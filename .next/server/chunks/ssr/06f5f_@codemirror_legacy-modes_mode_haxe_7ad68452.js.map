{"version":3,"sources":["turbopack:///[project]/node_modules/.pnpm/@codemirror+legacy-modes@6.5.1/node_modules/@codemirror/legacy-modes/mode/haxe.js"],"sourcesContent":["// Tokenizer\n\nfunction kw(type) {return {type: type, style: \"keyword\"};}\nvar A = kw(\"keyword a\"), B = kw(\"keyword b\"), C = kw(\"keyword c\");\nvar operator = kw(\"operator\"), atom = {type: \"atom\", style: \"atom\"}, attribute = {type:\"attribute\", style: \"attribute\"};\nvar type = kw(\"typedef\");\nvar keywords = {\n  \"if\": A, \"while\": A, \"else\": B, \"do\": B, \"try\": B,\n  \"return\": C, \"break\": C, \"continue\": C, \"new\": C, \"throw\": C,\n  \"var\": kw(\"var\"), \"inline\":attribute, \"static\": attribute, \"using\":kw(\"import\"),\n  \"public\": attribute, \"private\": attribute, \"cast\": kw(\"cast\"), \"import\": kw(\"import\"), \"macro\": kw(\"macro\"),\n  \"function\": kw(\"function\"), \"catch\": kw(\"catch\"), \"untyped\": kw(\"untyped\"), \"callback\": kw(\"cb\"),\n  \"for\": kw(\"for\"), \"switch\": kw(\"switch\"), \"case\": kw(\"case\"), \"default\": kw(\"default\"),\n  \"in\": operator, \"never\": kw(\"property_access\"), \"trace\":kw(\"trace\"),\n  \"class\": type, \"abstract\":type, \"enum\":type, \"interface\":type, \"typedef\":type, \"extends\":type, \"implements\":type, \"dynamic\":type,\n  \"true\": atom, \"false\": atom, \"null\": atom\n};\n\nvar isOperatorChar = /[+\\-*&%=<>!?|]/;\n\nfunction chain(stream, state, f) {\n  state.tokenize = f;\n  return f(stream, state);\n}\n\nfunction toUnescaped(stream, end) {\n  var escaped = false, next;\n  while ((next = stream.next()) != null) {\n    if (next == end && !escaped)\n      return true;\n    escaped = !escaped && next == \"\\\\\";\n  }\n}\n\n// Used as scratch variables to communicate multiple values without\n// consing up tons of objects.\nvar type, content;\nfunction ret(tp, style, cont) {\n  type = tp; content = cont;\n  return style;\n}\n\nfunction haxeTokenBase(stream, state) {\n  var ch = stream.next();\n  if (ch == '\"' || ch == \"'\") {\n    return chain(stream, state, haxeTokenString(ch));\n  } else if (/[\\[\\]{}\\(\\),;\\:\\.]/.test(ch)) {\n    return ret(ch);\n  } else if (ch == \"0\" && stream.eat(/x/i)) {\n    stream.eatWhile(/[\\da-f]/i);\n    return ret(\"number\", \"number\");\n  } else if (/\\d/.test(ch) || ch == \"-\" && stream.eat(/\\d/)) {\n    stream.match(/^\\d*(?:\\.\\d*(?!\\.))?(?:[eE][+\\-]?\\d+)?/);\n    return ret(\"number\", \"number\");\n  } else if (state.reAllowed && (ch == \"~\" && stream.eat(/\\//))) {\n    toUnescaped(stream, \"/\");\n    stream.eatWhile(/[gimsu]/);\n    return ret(\"regexp\", \"string.special\");\n  } else if (ch == \"/\") {\n    if (stream.eat(\"*\")) {\n      return chain(stream, state, haxeTokenComment);\n    } else if (stream.eat(\"/\")) {\n      stream.skipToEnd();\n      return ret(\"comment\", \"comment\");\n    } else {\n      stream.eatWhile(isOperatorChar);\n      return ret(\"operator\", null, stream.current());\n    }\n  } else if (ch == \"#\") {\n    stream.skipToEnd();\n    return ret(\"conditional\", \"meta\");\n  } else if (ch == \"@\") {\n    stream.eat(/:/);\n    stream.eatWhile(/[\\w_]/);\n    return ret (\"metadata\", \"meta\");\n  } else if (isOperatorChar.test(ch)) {\n    stream.eatWhile(isOperatorChar);\n    return ret(\"operator\", null, stream.current());\n  } else {\n    var word;\n    if(/[A-Z]/.test(ch)) {\n      stream.eatWhile(/[\\w_<>]/);\n      word = stream.current();\n      return ret(\"type\", \"type\", word);\n    } else {\n      stream.eatWhile(/[\\w_]/);\n      var word = stream.current(), known = keywords.propertyIsEnumerable(word) && keywords[word];\n      return (known && state.kwAllowed) ? ret(known.type, known.style, word) :\n        ret(\"variable\", \"variable\", word);\n    }\n  }\n}\n\nfunction haxeTokenString(quote) {\n  return function(stream, state) {\n    if (toUnescaped(stream, quote))\n      state.tokenize = haxeTokenBase;\n    return ret(\"string\", \"string\");\n  };\n}\n\nfunction haxeTokenComment(stream, state) {\n  var maybeEnd = false, ch;\n  while (ch = stream.next()) {\n    if (ch == \"/\" && maybeEnd) {\n      state.tokenize = haxeTokenBase;\n      break;\n    }\n    maybeEnd = (ch == \"*\");\n  }\n  return ret(\"comment\", \"comment\");\n}\n\n// Parser\n\nvar atomicTypes = {\"atom\": true, \"number\": true, \"variable\": true, \"string\": true, \"regexp\": true};\n\nfunction HaxeLexical(indented, column, type, align, prev, info) {\n  this.indented = indented;\n  this.column = column;\n  this.type = type;\n  this.prev = prev;\n  this.info = info;\n  if (align != null) this.align = align;\n}\n\nfunction inScope(state, varname) {\n  for (var v = state.localVars; v; v = v.next)\n    if (v.name == varname) return true;\n}\n\nfunction parseHaxe(state, style, type, content, stream) {\n  var cc = state.cc;\n  // Communicate our context to the combinators.\n  // (Less wasteful than consing up a hundred closures on every call.)\n  cx.state = state; cx.stream = stream; cx.marked = null, cx.cc = cc;\n\n  if (!state.lexical.hasOwnProperty(\"align\"))\n    state.lexical.align = true;\n\n  while(true) {\n    var combinator = cc.length ? cc.pop() : statement;\n    if (combinator(type, content)) {\n      while(cc.length && cc[cc.length - 1].lex)\n        cc.pop()();\n      if (cx.marked) return cx.marked;\n      if (type == \"variable\" && inScope(state, content)) return \"variableName.local\";\n      if (type == \"variable\" && imported(state, content)) return \"variableName.special\";\n      return style;\n    }\n  }\n}\n\nfunction imported(state, typename) {\n  if (/[a-z]/.test(typename.charAt(0)))\n    return false;\n  var len = state.importedtypes.length;\n  for (var i = 0; i<len; i++)\n    if(state.importedtypes[i]==typename) return true;\n}\n\nfunction registerimport(importname) {\n  var state = cx.state;\n  for (var t = state.importedtypes; t; t = t.next)\n    if(t.name == importname) return;\n  state.importedtypes = { name: importname, next: state.importedtypes };\n}\n// Combinator utils\n\nvar cx = {state: null, column: null, marked: null, cc: null};\nfunction pass() {\n  for (var i = arguments.length - 1; i >= 0; i--) cx.cc.push(arguments[i]);\n}\nfunction cont() {\n  pass.apply(null, arguments);\n  return true;\n}\nfunction inList(name, list) {\n  for (var v = list; v; v = v.next)\n    if (v.name == name) return true;\n  return false;\n}\nfunction register(varname) {\n  var state = cx.state;\n  if (state.context) {\n    cx.marked = \"def\";\n    if (inList(varname, state.localVars)) return;\n    state.localVars = {name: varname, next: state.localVars};\n  } else if (state.globalVars) {\n    if (inList(varname, state.globalVars)) return;\n    state.globalVars = {name: varname, next: state.globalVars};\n  }\n}\n\n// Combinators\n\nvar defaultVars = {name: \"this\", next: null};\nfunction pushcontext() {\n  if (!cx.state.context) cx.state.localVars = defaultVars;\n  cx.state.context = {prev: cx.state.context, vars: cx.state.localVars};\n}\nfunction popcontext() {\n  cx.state.localVars = cx.state.context.vars;\n  cx.state.context = cx.state.context.prev;\n}\npopcontext.lex = true;\nfunction pushlex(type, info) {\n  var result = function() {\n    var state = cx.state;\n    state.lexical = new HaxeLexical(state.indented, cx.stream.column(), type, null, state.lexical, info);\n  };\n  result.lex = true;\n  return result;\n}\nfunction poplex() {\n  var state = cx.state;\n  if (state.lexical.prev) {\n    if (state.lexical.type == \")\")\n      state.indented = state.lexical.indented;\n    state.lexical = state.lexical.prev;\n  }\n}\npoplex.lex = true;\n\nfunction expect(wanted) {\n  function f(type) {\n    if (type == wanted) return cont();\n    else if (wanted == \";\") return pass();\n    else return cont(f);\n  }\n  return f;\n}\n\nfunction statement(type) {\n  if (type == \"@\") return cont(metadef);\n  if (type == \"var\") return cont(pushlex(\"vardef\"), vardef1, expect(\";\"), poplex);\n  if (type == \"keyword a\") return cont(pushlex(\"form\"), expression, statement, poplex);\n  if (type == \"keyword b\") return cont(pushlex(\"form\"), statement, poplex);\n  if (type == \"{\") return cont(pushlex(\"}\"), pushcontext, block, poplex, popcontext);\n  if (type == \";\") return cont();\n  if (type == \"attribute\") return cont(maybeattribute);\n  if (type == \"function\") return cont(functiondef);\n  if (type == \"for\") return cont(pushlex(\"form\"), expect(\"(\"), pushlex(\")\"), forspec1, expect(\")\"),\n                                 poplex, statement, poplex);\n  if (type == \"variable\") return cont(pushlex(\"stat\"), maybelabel);\n  if (type == \"switch\") return cont(pushlex(\"form\"), expression, pushlex(\"}\", \"switch\"), expect(\"{\"),\n                                    block, poplex, poplex);\n  if (type == \"case\") return cont(expression, expect(\":\"));\n  if (type == \"default\") return cont(expect(\":\"));\n  if (type == \"catch\") return cont(pushlex(\"form\"), pushcontext, expect(\"(\"), funarg, expect(\")\"),\n                                   statement, poplex, popcontext);\n  if (type == \"import\") return cont(importdef, expect(\";\"));\n  if (type == \"typedef\") return cont(typedef);\n  return pass(pushlex(\"stat\"), expression, expect(\";\"), poplex);\n}\nfunction expression(type) {\n  if (atomicTypes.hasOwnProperty(type)) return cont(maybeoperator);\n  if (type == \"type\" ) return cont(maybeoperator);\n  if (type == \"function\") return cont(functiondef);\n  if (type == \"keyword c\") return cont(maybeexpression);\n  if (type == \"(\") return cont(pushlex(\")\"), maybeexpression, expect(\")\"), poplex, maybeoperator);\n  if (type == \"operator\") return cont(expression);\n  if (type == \"[\") return cont(pushlex(\"]\"), commasep(maybeexpression, \"]\"), poplex, maybeoperator);\n  if (type == \"{\") return cont(pushlex(\"}\"), commasep(objprop, \"}\"), poplex, maybeoperator);\n  return cont();\n}\nfunction maybeexpression(type) {\n  if (type.match(/[;\\}\\)\\],]/)) return pass();\n  return pass(expression);\n}\n\nfunction maybeoperator(type, value) {\n  if (type == \"operator\" && /\\+\\+|--/.test(value)) return cont(maybeoperator);\n  if (type == \"operator\" || type == \":\") return cont(expression);\n  if (type == \";\") return;\n  if (type == \"(\") return cont(pushlex(\")\"), commasep(expression, \")\"), poplex, maybeoperator);\n  if (type == \".\") return cont(property, maybeoperator);\n  if (type == \"[\") return cont(pushlex(\"]\"), expression, expect(\"]\"), poplex, maybeoperator);\n}\n\nfunction maybeattribute(type) {\n  if (type == \"attribute\") return cont(maybeattribute);\n  if (type == \"function\") return cont(functiondef);\n  if (type == \"var\") return cont(vardef1);\n}\n\nfunction metadef(type) {\n  if(type == \":\") return cont(metadef);\n  if(type == \"variable\") return cont(metadef);\n  if(type == \"(\") return cont(pushlex(\")\"), commasep(metaargs, \")\"), poplex, statement);\n}\nfunction metaargs(type) {\n  if(type == \"variable\") return cont();\n}\n\nfunction importdef (type, value) {\n  if(type == \"variable\" && /[A-Z]/.test(value.charAt(0))) { registerimport(value); return cont(); }\n  else if(type == \"variable\" || type == \"property\" || type == \".\" || value == \"*\") return cont(importdef);\n}\n\nfunction typedef (type, value)\n{\n  if(type == \"variable\" && /[A-Z]/.test(value.charAt(0))) { registerimport(value); return cont(); }\n  else if (type == \"type\" && /[A-Z]/.test(value.charAt(0))) { return cont(); }\n}\n\nfunction maybelabel(type) {\n  if (type == \":\") return cont(poplex, statement);\n  return pass(maybeoperator, expect(\";\"), poplex);\n}\nfunction property(type) {\n  if (type == \"variable\") {cx.marked = \"property\"; return cont();}\n}\nfunction objprop(type) {\n  if (type == \"variable\") cx.marked = \"property\";\n  if (atomicTypes.hasOwnProperty(type)) return cont(expect(\":\"), expression);\n}\nfunction commasep(what, end) {\n  function proceed(type) {\n    if (type == \",\") return cont(what, proceed);\n    if (type == end) return cont();\n    return cont(expect(end));\n  }\n  return function(type) {\n    if (type == end) return cont();\n    else return pass(what, proceed);\n  };\n}\nfunction block(type) {\n  if (type == \"}\") return cont();\n  return pass(statement, block);\n}\nfunction vardef1(type, value) {\n  if (type == \"variable\"){register(value); return cont(typeuse, vardef2);}\n  return cont();\n}\nfunction vardef2(type, value) {\n  if (value == \"=\") return cont(expression, vardef2);\n  if (type == \",\") return cont(vardef1);\n}\nfunction forspec1(type, value) {\n  if (type == \"variable\") {\n    register(value);\n    return cont(forin, expression)\n  } else {\n    return pass()\n  }\n}\nfunction forin(_type, value) {\n  if (value == \"in\") return cont();\n}\nfunction functiondef(type, value) {\n  //function names starting with upper-case letters are recognised as types, so cludging them together here.\n  if (type == \"variable\" || type == \"type\") {register(value); return cont(functiondef);}\n  if (value == \"new\") return cont(functiondef);\n  if (type == \"(\") return cont(pushlex(\")\"), pushcontext, commasep(funarg, \")\"), poplex, typeuse, statement, popcontext);\n}\nfunction typeuse(type) {\n  if(type == \":\") return cont(typestring);\n}\nfunction typestring(type) {\n  if(type == \"type\") return cont();\n  if(type == \"variable\") return cont();\n  if(type == \"{\") return cont(pushlex(\"}\"), commasep(typeprop, \"}\"), poplex);\n}\nfunction typeprop(type) {\n  if(type == \"variable\") return cont(typeuse);\n}\nfunction funarg(type, value) {\n  if (type == \"variable\") {register(value); return cont(typeuse);}\n}\n\n// Interface\nexport const haxe = {\n  name: \"haxe\",\n  startState: function(indentUnit) {\n    var defaulttypes = [\"Int\", \"Float\", \"String\", \"Void\", \"Std\", \"Bool\", \"Dynamic\", \"Array\"];\n    var state = {\n      tokenize: haxeTokenBase,\n      reAllowed: true,\n      kwAllowed: true,\n      cc: [],\n      lexical: new HaxeLexical(-indentUnit, 0, \"block\", false),\n      importedtypes: defaulttypes,\n      context: null,\n      indented: 0\n    };\n    return state;\n  },\n\n  token: function(stream, state) {\n    if (stream.sol()) {\n      if (!state.lexical.hasOwnProperty(\"align\"))\n        state.lexical.align = false;\n      state.indented = stream.indentation();\n    }\n    if (stream.eatSpace()) return null;\n    var style = state.tokenize(stream, state);\n    if (type == \"comment\") return style;\n    state.reAllowed = !!(type == \"operator\" || type == \"keyword c\" || type.match(/^[\\[{}\\(,;:]$/));\n    state.kwAllowed = type != '.';\n    return parseHaxe(state, style, type, content, stream);\n  },\n\n  indent: function(state, textAfter, cx) {\n    if (state.tokenize != haxeTokenBase) return 0;\n    var firstChar = textAfter && textAfter.charAt(0), lexical = state.lexical;\n    if (lexical.type == \"stat\" && firstChar == \"}\") lexical = lexical.prev;\n    var type = lexical.type, closing = firstChar == type;\n    if (type == \"vardef\") return lexical.indented + 4;\n    else if (type == \"form\" && firstChar == \"{\") return lexical.indented;\n    else if (type == \"stat\" || type == \"form\") return lexical.indented + cx.unit;\n    else if (lexical.info == \"switch\" && !closing)\n      return lexical.indented + (/^(?:case|default)\\b/.test(textAfter) ? cx.unit : 2 * cx.unit);\n    else if (lexical.align) return lexical.column + (closing ? 0 : 1);\n    else return lexical.indented + (closing ? 0 : cx.unit);\n  },\n\n  languageData: {\n    indentOnInput: /^\\s*[{}]$/,\n    commentTokens: {line: \"//\", block: {open: \"/*\", close: \"*/\"}}\n  }\n};\n\nexport const hxml = {\n  name: \"hxml\",\n  startState: function () {\n    return {\n      define: false,\n      inString: false\n    };\n  },\n  token: function (stream, state) {\n    var ch = stream.peek();\n    var sol = stream.sol();\n\n    ///* comments */\n    if (ch == \"#\") {\n      stream.skipToEnd();\n      return \"comment\";\n    }\n    if (sol && ch == \"-\") {\n      var style = \"variable-2\";\n\n      stream.eat(/-/);\n\n      if (stream.peek() == \"-\") {\n        stream.eat(/-/);\n        style = \"keyword a\";\n      }\n\n      if (stream.peek() == \"D\") {\n        stream.eat(/[D]/);\n        style = \"keyword c\";\n        state.define = true;\n      }\n\n      stream.eatWhile(/[A-Z]/i);\n      return style;\n    }\n\n    var ch = stream.peek();\n\n    if (state.inString == false && ch == \"'\") {\n      state.inString = true;\n      stream.next();\n    }\n\n    if (state.inString == true) {\n      if (stream.skipTo(\"'\")) {\n\n      } else {\n        stream.skipToEnd();\n      }\n\n      if (stream.peek() == \"'\") {\n        stream.next();\n        state.inString = false;\n      }\n\n      return \"string\";\n    }\n\n    stream.next();\n    return null;\n  },\n  languageData: {\n    commentTokens: {line: \"#\"}\n  }\n}\n"],"names":[],"mappings":"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","ignoreList":[0]}