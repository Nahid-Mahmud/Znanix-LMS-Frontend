{"version":3,"sources":["turbopack:///[project]/node_modules/.pnpm/@codemirror+legacy-modes@6.5.1/node_modules/@codemirror/legacy-modes/mode/python.js"],"sourcesContent":["function wordRegexp(words) {\n  return new RegExp(\"^((\" + words.join(\")|(\") + \"))\\\\b\");\n}\n\nvar wordOperators = wordRegexp([\"and\", \"or\", \"not\", \"is\"]);\nvar commonKeywords = [\"as\", \"assert\", \"break\", \"class\", \"continue\",\n                      \"def\", \"del\", \"elif\", \"else\", \"except\", \"finally\",\n                      \"for\", \"from\", \"global\", \"if\", \"import\",\n                      \"lambda\", \"pass\", \"raise\", \"return\",\n                      \"try\", \"while\", \"with\", \"yield\", \"in\", \"False\", \"True\"];\nvar commonBuiltins = [\"abs\", \"all\", \"any\", \"bin\", \"bool\", \"bytearray\", \"callable\", \"chr\",\n                      \"classmethod\", \"compile\", \"complex\", \"delattr\", \"dict\", \"dir\", \"divmod\",\n                      \"enumerate\", \"eval\", \"filter\", \"float\", \"format\", \"frozenset\",\n                      \"getattr\", \"globals\", \"hasattr\", \"hash\", \"help\", \"hex\", \"id\",\n                      \"input\", \"int\", \"isinstance\", \"issubclass\", \"iter\", \"len\",\n                      \"list\", \"locals\", \"map\", \"max\", \"memoryview\", \"min\", \"next\",\n                      \"object\", \"oct\", \"open\", \"ord\", \"pow\", \"property\", \"range\",\n                      \"repr\", \"reversed\", \"round\", \"set\", \"setattr\", \"slice\",\n                      \"sorted\", \"staticmethod\", \"str\", \"sum\", \"super\", \"tuple\",\n                      \"type\", \"vars\", \"zip\", \"__import__\", \"NotImplemented\",\n                      \"Ellipsis\", \"__debug__\"];\n\nfunction top(state) {\n  return state.scopes[state.scopes.length - 1];\n}\n\nexport function mkPython(parserConf) {\n  var ERRORCLASS = \"error\";\n\n  var delimiters = parserConf.delimiters || parserConf.singleDelimiters || /^[\\(\\)\\[\\]\\{\\}@,:`=;\\.\\\\]/;\n  //               (Backwards-compatibility with old, cumbersome config system)\n  var operators = [parserConf.singleOperators, parserConf.doubleOperators, parserConf.doubleDelimiters, parserConf.tripleDelimiters,\n                   parserConf.operators || /^([-+*/%\\/&|^]=?|[<>=]+|\\/\\/=?|\\*\\*=?|!=|[~!@]|\\.\\.\\.)/]\n  for (var i = 0; i < operators.length; i++) if (!operators[i]) operators.splice(i--, 1)\n\n  var hangingIndent = parserConf.hangingIndent;\n\n  var myKeywords = commonKeywords, myBuiltins = commonBuiltins;\n  if (parserConf.extra_keywords != undefined)\n    myKeywords = myKeywords.concat(parserConf.extra_keywords);\n\n  if (parserConf.extra_builtins != undefined)\n    myBuiltins = myBuiltins.concat(parserConf.extra_builtins);\n\n  var py3 = !(parserConf.version && Number(parserConf.version) < 3)\n  if (py3) {\n    // since http://legacy.python.org/dev/peps/pep-0465/ @ is also an operator\n    var identifiers = parserConf.identifiers|| /^[_A-Za-z\\u00A1-\\uFFFF][_A-Za-z0-9\\u00A1-\\uFFFF]*/;\n    myKeywords = myKeywords.concat([\"nonlocal\", \"None\", \"aiter\", \"anext\", \"async\", \"await\", \"breakpoint\", \"match\", \"case\"]);\n    myBuiltins = myBuiltins.concat([\"ascii\", \"bytes\", \"exec\", \"print\"]);\n    var stringPrefixes = new RegExp(\"^(([rbuf]|(br)|(rb)|(fr)|(rf))?('{3}|\\\"{3}|['\\\"]))\", \"i\");\n  } else {\n    var identifiers = parserConf.identifiers|| /^[_A-Za-z][_A-Za-z0-9]*/;\n    myKeywords = myKeywords.concat([\"exec\", \"print\"]);\n    myBuiltins = myBuiltins.concat([\"apply\", \"basestring\", \"buffer\", \"cmp\", \"coerce\", \"execfile\",\n                                    \"file\", \"intern\", \"long\", \"raw_input\", \"reduce\", \"reload\",\n                                    \"unichr\", \"unicode\", \"xrange\", \"None\"]);\n    var stringPrefixes = new RegExp(\"^(([rubf]|(ur)|(br))?('{3}|\\\"{3}|['\\\"]))\", \"i\");\n  }\n  var keywords = wordRegexp(myKeywords);\n  var builtins = wordRegexp(myBuiltins);\n\n  // tokenizers\n  function tokenBase(stream, state) {\n    var sol = stream.sol() && state.lastToken != \"\\\\\"\n    if (sol) state.indent = stream.indentation()\n    // Handle scope changes\n    if (sol && top(state).type == \"py\") {\n      var scopeOffset = top(state).offset;\n      if (stream.eatSpace()) {\n        var lineOffset = stream.indentation();\n        if (lineOffset > scopeOffset)\n          pushPyScope(stream, state);\n        else if (lineOffset < scopeOffset && dedent(stream, state) && stream.peek() != \"#\")\n          state.errorToken = true;\n        return null;\n      } else {\n        var style = tokenBaseInner(stream, state);\n        if (scopeOffset > 0 && dedent(stream, state))\n          style += \" \" + ERRORCLASS;\n        return style;\n      }\n    }\n    return tokenBaseInner(stream, state);\n  }\n\n  function tokenBaseInner(stream, state, inFormat) {\n    if (stream.eatSpace()) return null;\n\n    // Handle Comments\n    if (!inFormat && stream.match(/^#.*/)) return \"comment\";\n\n    // Handle Number Literals\n    if (stream.match(/^[0-9\\.]/, false)) {\n      var floatLiteral = false;\n      // Floats\n      if (stream.match(/^[\\d_]*\\.\\d+(e[\\+\\-]?\\d+)?/i)) { floatLiteral = true; }\n      if (stream.match(/^[\\d_]+\\.\\d*/)) { floatLiteral = true; }\n      if (stream.match(/^\\.\\d+/)) { floatLiteral = true; }\n      if (floatLiteral) {\n        // Float literals may be \"imaginary\"\n        stream.eat(/J/i);\n        return \"number\";\n      }\n      // Integers\n      var intLiteral = false;\n      // Hex\n      if (stream.match(/^0x[0-9a-f_]+/i)) intLiteral = true;\n      // Binary\n      if (stream.match(/^0b[01_]+/i)) intLiteral = true;\n      // Octal\n      if (stream.match(/^0o[0-7_]+/i)) intLiteral = true;\n      // Decimal\n      if (stream.match(/^[1-9][\\d_]*(e[\\+\\-]?[\\d_]+)?/)) {\n        // Decimal literals may be \"imaginary\"\n        stream.eat(/J/i);\n        // TODO - Can you have imaginary longs?\n        intLiteral = true;\n      }\n      // Zero by itself with no other piece of number.\n      if (stream.match(/^0(?![\\dx])/i)) intLiteral = true;\n      if (intLiteral) {\n        // Integer literals may be \"long\"\n        stream.eat(/L/i);\n        return \"number\";\n      }\n    }\n\n    // Handle Strings\n    if (stream.match(stringPrefixes)) {\n      var isFmtString = stream.current().toLowerCase().indexOf('f') !== -1;\n      if (!isFmtString) {\n        state.tokenize = tokenStringFactory(stream.current(), state.tokenize);\n        return state.tokenize(stream, state);\n      } else {\n        state.tokenize = formatStringFactory(stream.current(), state.tokenize);\n        return state.tokenize(stream, state);\n      }\n    }\n\n    for (var i = 0; i < operators.length; i++)\n      if (stream.match(operators[i])) return \"operator\"\n\n    if (stream.match(delimiters)) return \"punctuation\";\n\n    if (state.lastToken == \".\" && stream.match(identifiers))\n      return \"property\";\n\n    if (stream.match(keywords) || stream.match(wordOperators))\n      return \"keyword\";\n\n    if (stream.match(builtins))\n      return \"builtin\";\n\n    if (stream.match(/^(self|cls)\\b/))\n      return \"self\";\n\n    if (stream.match(identifiers)) {\n      if (state.lastToken == \"def\" || state.lastToken == \"class\")\n        return \"def\";\n      return \"variable\";\n    }\n\n    // Handle non-detected items\n    stream.next();\n    return inFormat ? null :ERRORCLASS;\n  }\n\n  function formatStringFactory(delimiter, tokenOuter) {\n    while (\"rubf\".indexOf(delimiter.charAt(0).toLowerCase()) >= 0)\n      delimiter = delimiter.substr(1);\n\n    var singleline = delimiter.length == 1;\n    var OUTCLASS = \"string\";\n\n    function tokenNestedExpr(depth) {\n      return function(stream, state) {\n        var inner = tokenBaseInner(stream, state, true)\n        if (inner == \"punctuation\") {\n          if (stream.current() == \"{\") {\n            state.tokenize = tokenNestedExpr(depth + 1)\n          } else if (stream.current() == \"}\") {\n            if (depth > 1) state.tokenize = tokenNestedExpr(depth - 1)\n            else state.tokenize = tokenString\n          }\n        }\n        return inner\n      }\n    }\n\n    function tokenString(stream, state) {\n      while (!stream.eol()) {\n        stream.eatWhile(/[^'\"\\{\\}\\\\]/);\n        if (stream.eat(\"\\\\\")) {\n          stream.next();\n          if (singleline && stream.eol())\n            return OUTCLASS;\n        } else if (stream.match(delimiter)) {\n          state.tokenize = tokenOuter;\n          return OUTCLASS;\n        } else if (stream.match('{{')) {\n          // ignore {{ in f-str\n          return OUTCLASS;\n        } else if (stream.match('{', false)) {\n          // switch to nested mode\n          state.tokenize = tokenNestedExpr(0)\n          if (stream.current()) return OUTCLASS;\n          else return state.tokenize(stream, state)\n        } else if (stream.match('}}')) {\n          return OUTCLASS;\n        } else if (stream.match('}')) {\n          // single } in f-string is an error\n          return ERRORCLASS;\n        } else {\n          stream.eat(/['\"]/);\n        }\n      }\n      if (singleline) {\n        if (parserConf.singleLineStringErrors)\n          return ERRORCLASS;\n        else\n          state.tokenize = tokenOuter;\n      }\n      return OUTCLASS;\n    }\n    tokenString.isString = true;\n    return tokenString;\n  }\n\n  function tokenStringFactory(delimiter, tokenOuter) {\n    while (\"rubf\".indexOf(delimiter.charAt(0).toLowerCase()) >= 0)\n      delimiter = delimiter.substr(1);\n\n    var singleline = delimiter.length == 1;\n    var OUTCLASS = \"string\";\n\n    function tokenString(stream, state) {\n      while (!stream.eol()) {\n        stream.eatWhile(/[^'\"\\\\]/);\n        if (stream.eat(\"\\\\\")) {\n          stream.next();\n          if (singleline && stream.eol())\n            return OUTCLASS;\n        } else if (stream.match(delimiter)) {\n          state.tokenize = tokenOuter;\n          return OUTCLASS;\n        } else {\n          stream.eat(/['\"]/);\n        }\n      }\n      if (singleline) {\n        if (parserConf.singleLineStringErrors)\n          return ERRORCLASS;\n        else\n          state.tokenize = tokenOuter;\n      }\n      return OUTCLASS;\n    }\n    tokenString.isString = true;\n    return tokenString;\n  }\n\n  function pushPyScope(stream, state) {\n    while (top(state).type != \"py\") state.scopes.pop()\n    state.scopes.push({offset: top(state).offset + stream.indentUnit,\n                       type: \"py\",\n                       align: null})\n  }\n\n  function pushBracketScope(stream, state, type) {\n    var align = stream.match(/^[\\s\\[\\{\\(]*(?:#|$)/, false) ? null : stream.column() + 1\n    state.scopes.push({offset: state.indent + (hangingIndent || stream.indentUnit),\n                       type: type,\n                       align: align})\n  }\n\n  function dedent(stream, state) {\n    var indented = stream.indentation();\n    while (state.scopes.length > 1 && top(state).offset > indented) {\n      if (top(state).type != \"py\") return true;\n      state.scopes.pop();\n    }\n    return top(state).offset != indented;\n  }\n\n  function tokenLexer(stream, state) {\n    if (stream.sol()) {\n      state.beginningOfLine = true;\n      state.dedent = false;\n    }\n\n    var style = state.tokenize(stream, state);\n    var current = stream.current();\n\n    // Handle decorators\n    if (state.beginningOfLine && current == \"@\")\n      return stream.match(identifiers, false) ? \"meta\" : py3 ? \"operator\" : ERRORCLASS;\n\n    if (/\\S/.test(current)) state.beginningOfLine = false;\n\n    if ((style == \"variable\" || style == \"builtin\")\n        && state.lastToken == \"meta\")\n      style = \"meta\";\n\n    // Handle scope changes.\n    if (current == \"pass\" || current == \"return\")\n      state.dedent = true;\n\n    if (current == \"lambda\") state.lambda = true;\n    if (current == \":\" && !state.lambda && top(state).type == \"py\" && stream.match(/^\\s*(?:#|$)/, false))\n      pushPyScope(stream, state);\n\n    if (current.length == 1 && !/string|comment/.test(style)) {\n      var delimiter_index = \"[({\".indexOf(current);\n      if (delimiter_index != -1)\n        pushBracketScope(stream, state, \"])}\".slice(delimiter_index, delimiter_index+1));\n\n      delimiter_index = \"])}\".indexOf(current);\n      if (delimiter_index != -1) {\n        if (top(state).type == current) state.indent = state.scopes.pop().offset - (hangingIndent || stream.indentUnit)\n        else return ERRORCLASS;\n      }\n    }\n    if (state.dedent && stream.eol() && top(state).type == \"py\" && state.scopes.length > 1)\n      state.scopes.pop();\n\n    return style;\n  }\n\n  return {\n    name: \"python\",\n\n    startState: function() {\n      return {\n        tokenize: tokenBase,\n        scopes: [{offset: 0, type: \"py\", align: null}],\n        indent: 0,\n        lastToken: null,\n        lambda: false,\n        dedent: 0\n      };\n    },\n\n    token: function(stream, state) {\n      var addErr = state.errorToken;\n      if (addErr) state.errorToken = false;\n      var style = tokenLexer(stream, state);\n\n      if (style && style != \"comment\")\n        state.lastToken = (style == \"keyword\" || style == \"punctuation\") ? stream.current() : style;\n      if (style == \"punctuation\") style = null;\n\n      if (stream.eol() && state.lambda)\n        state.lambda = false;\n      return addErr ? ERRORCLASS : style;\n    },\n\n    indent: function(state, textAfter, cx) {\n      if (state.tokenize != tokenBase)\n        return state.tokenize.isString ? null : 0;\n\n      var scope = top(state)\n      var closing = scope.type == textAfter.charAt(0) ||\n          scope.type == \"py\" && !state.dedent && /^(else:|elif |except |finally:)/.test(textAfter)\n      if (scope.align != null)\n        return scope.align - (closing ? 1 : 0)\n      else\n        return scope.offset - (closing ? hangingIndent || cx.unit : 0)\n    },\n\n    languageData: {\n      autocomplete: commonKeywords.concat(commonBuiltins).concat([\"exec\", \"print\"]),\n      indentOnInput: /^\\s*([\\}\\]\\)]|else:|elif |except |finally:)$/,\n      commentTokens: {line: \"#\"},\n      closeBrackets: {brackets: [\"(\", \"[\", \"{\", \"'\", '\"', \"'''\", '\"\"\"']}\n    }\n  };\n};\n\nvar words = function(str) { return str.split(\" \"); };\n\nexport const python = mkPython({})\n\nexport const cython = mkPython({\n  extra_keywords: words(\"by cdef cimport cpdef ctypedef enum except \"+\n                        \"extern gil include nogil property public \"+\n                        \"readonly struct union DEF IF ELIF ELSE\")\n})\n"],"names":[],"mappings":"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","ignoreList":[0]}