{"version":3,"sources":["turbopack:///[project]/node_modules/.pnpm/@codemirror+legacy-modes@6.5.1/node_modules/@codemirror/legacy-modes/mode/sieve.js"],"sourcesContent":["function words(str) {\n  var obj = {}, words = str.split(\" \");\n  for (var i = 0; i < words.length; ++i) obj[words[i]] = true;\n  return obj;\n}\n\nvar keywords = words(\"if elsif else stop require\");\nvar atoms = words(\"true false not\");\n\nfunction tokenBase(stream, state) {\n\n  var ch = stream.next();\n  if (ch == \"/\" && stream.eat(\"*\")) {\n    state.tokenize = tokenCComment;\n    return tokenCComment(stream, state);\n  }\n\n  if (ch === '#') {\n    stream.skipToEnd();\n    return \"comment\";\n  }\n\n  if (ch == \"\\\"\") {\n    state.tokenize = tokenString(ch);\n    return state.tokenize(stream, state);\n  }\n\n  if (ch == \"(\") {\n    state._indent.push(\"(\");\n    // add virtual angel wings so that editor behaves...\n    // ...more sane incase of broken brackets\n    state._indent.push(\"{\");\n    return null;\n  }\n\n  if (ch === \"{\") {\n    state._indent.push(\"{\");\n    return null;\n  }\n\n  if (ch == \")\")  {\n    state._indent.pop();\n    state._indent.pop();\n  }\n\n  if (ch === \"}\") {\n    state._indent.pop();\n    return null;\n  }\n\n  if (ch == \",\")\n    return null;\n\n  if (ch == \";\")\n    return null;\n\n\n  if (/[{}\\(\\),;]/.test(ch))\n    return null;\n\n  // 1*DIGIT \"K\" / \"M\" / \"G\"\n  if (/\\d/.test(ch)) {\n    stream.eatWhile(/[\\d]/);\n    stream.eat(/[KkMmGg]/);\n    return \"number\";\n  }\n\n  // \":\" (ALPHA / \"_\") *(ALPHA / DIGIT / \"_\")\n  if (ch == \":\") {\n    stream.eatWhile(/[a-zA-Z_]/);\n    stream.eatWhile(/[a-zA-Z0-9_]/);\n\n    return \"operator\";\n  }\n\n  stream.eatWhile(/\\w/);\n  var cur = stream.current();\n\n  // \"text:\" *(SP / HTAB) (hash-comment / CRLF)\n  // *(multiline-literal / multiline-dotstart)\n  // \".\" CRLF\n  if ((cur == \"text\") && stream.eat(\":\"))\n  {\n    state.tokenize = tokenMultiLineString;\n    return \"string\";\n  }\n\n  if (keywords.propertyIsEnumerable(cur))\n    return \"keyword\";\n\n  if (atoms.propertyIsEnumerable(cur))\n    return \"atom\";\n\n  return null;\n}\n\nfunction tokenMultiLineString(stream, state)\n{\n  state._multiLineString = true;\n  // the first line is special it may contain a comment\n  if (!stream.sol()) {\n    stream.eatSpace();\n\n    if (stream.peek() == \"#\") {\n      stream.skipToEnd();\n      return \"comment\";\n    }\n\n    stream.skipToEnd();\n    return \"string\";\n  }\n\n  if ((stream.next() == \".\")  && (stream.eol()))\n  {\n    state._multiLineString = false;\n    state.tokenize = tokenBase;\n  }\n\n  return \"string\";\n}\n\nfunction tokenCComment(stream, state) {\n  var maybeEnd = false, ch;\n  while ((ch = stream.next()) != null) {\n    if (maybeEnd && ch == \"/\") {\n      state.tokenize = tokenBase;\n      break;\n    }\n    maybeEnd = (ch == \"*\");\n  }\n  return \"comment\";\n}\n\nfunction tokenString(quote) {\n  return function(stream, state) {\n    var escaped = false, ch;\n    while ((ch = stream.next()) != null) {\n      if (ch == quote && !escaped)\n        break;\n      escaped = !escaped && ch == \"\\\\\";\n    }\n    if (!escaped) state.tokenize = tokenBase;\n    return \"string\";\n  };\n}\n\nexport const sieve = {\n  name: \"sieve\",\n  startState: function(base) {\n    return {tokenize: tokenBase,\n            baseIndent: base || 0,\n            _indent: []};\n  },\n\n  token: function(stream, state) {\n    if (stream.eatSpace())\n      return null;\n\n    return (state.tokenize || tokenBase)(stream, state);\n  },\n\n  indent: function(state, _textAfter, cx) {\n    var length = state._indent.length;\n    if (_textAfter && (_textAfter[0] == \"}\"))\n      length--;\n\n    if (length <0)\n      length = 0;\n\n    return length * cx.unit;\n  },\n\n  languageData: {\n    indentOnInput: /^\\s*\\}$/\n  }\n};\n"],"names":[],"mappings":"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","ignoreList":[0]}