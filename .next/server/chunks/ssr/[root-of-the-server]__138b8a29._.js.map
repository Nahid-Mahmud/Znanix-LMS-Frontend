{"version":3,"sources":["turbopack:///[project]/node_modules/.pnpm/extend@3.0.2/node_modules/extend/index.js","turbopack:///[project]/node_modules/.pnpm/mdast-util-to-string@4.0.0/node_modules/mdast-util-to-string/lib/index.js","turbopack:///[project]/node_modules/.pnpm/micromark-util-chunked@2.0.1/node_modules/micromark-util-chunked/index.js","turbopack:///[project]/node_modules/.pnpm/micromark-util-combine-extensions@2.0.1/node_modules/micromark-util-combine-extensions/index.js","turbopack:///[project]/node_modules/.pnpm/micromark-util-character@2.1.1/node_modules/micromark-util-character/index.js","turbopack:///[project]/node_modules/.pnpm/micromark-factory-space@2.0.1/node_modules/micromark-factory-space/index.js","turbopack:///[project]/node_modules/.pnpm/micromark@4.0.2/node_modules/micromark/lib/initialize/content.js","turbopack:///[project]/node_modules/.pnpm/micromark@4.0.2/node_modules/micromark/lib/initialize/document.js","turbopack:///[project]/node_modules/.pnpm/micromark-core-commonmark@2.0.3/node_modules/micromark-core-commonmark/lib/blank-line.js","turbopack:///[project]/node_modules/.pnpm/micromark-util-subtokenize@2.1.0/node_modules/micromark-util-subtokenize/lib/splice-buffer.js","turbopack:///[project]/node_modules/.pnpm/micromark-util-subtokenize@2.1.0/node_modules/micromark-util-subtokenize/index.js","turbopack:///[project]/node_modules/.pnpm/micromark-core-commonmark@2.0.3/node_modules/micromark-core-commonmark/lib/content.js","turbopack:///[project]/node_modules/.pnpm/micromark@4.0.2/node_modules/micromark/lib/initialize/flow.js","turbopack:///[project]/node_modules/.pnpm/micromark@4.0.2/node_modules/micromark/lib/initialize/text.js","turbopack:///[project]/node_modules/.pnpm/micromark-util-classify-character@2.0.1/node_modules/micromark-util-classify-character/index.js","turbopack:///[project]/node_modules/.pnpm/micromark-util-resolve-all@2.0.1/node_modules/micromark-util-resolve-all/index.js","turbopack:///[project]/node_modules/.pnpm/micromark-core-commonmark@2.0.3/node_modules/micromark-core-commonmark/lib/attention.js","turbopack:///[project]/node_modules/.pnpm/micromark-core-commonmark@2.0.3/node_modules/micromark-core-commonmark/lib/autolink.js","turbopack:///[project]/node_modules/.pnpm/micromark-core-commonmark@2.0.3/node_modules/micromark-core-commonmark/lib/block-quote.js","turbopack:///[project]/node_modules/.pnpm/micromark-core-commonmark@2.0.3/node_modules/micromark-core-commonmark/lib/character-escape.js","turbopack:///[project]/node_modules/.pnpm/character-entities@2.0.2/node_modules/character-entities/index.js","turbopack:///[project]/node_modules/.pnpm/decode-named-character-reference@1.2.0/node_modules/decode-named-character-reference/index.js","turbopack:///[project]/node_modules/.pnpm/micromark-core-commonmark@2.0.3/node_modules/micromark-core-commonmark/lib/character-reference.js","turbopack:///[project]/node_modules/.pnpm/micromark-core-commonmark@2.0.3/node_modules/micromark-core-commonmark/lib/code-fenced.js","turbopack:///[project]/node_modules/.pnpm/micromark-core-commonmark@2.0.3/node_modules/micromark-core-commonmark/lib/code-indented.js","turbopack:///[project]/node_modules/.pnpm/micromark-core-commonmark@2.0.3/node_modules/micromark-core-commonmark/lib/code-text.js","turbopack:///[project]/node_modules/.pnpm/micromark-factory-destination@2.0.1/node_modules/micromark-factory-destination/index.js","turbopack:///[project]/node_modules/.pnpm/micromark-factory-label@2.0.1/node_modules/micromark-factory-label/index.js","turbopack:///[project]/node_modules/.pnpm/micromark-factory-title@2.0.1/node_modules/micromark-factory-title/index.js","turbopack:///[project]/node_modules/.pnpm/micromark-factory-whitespace@2.0.1/node_modules/micromark-factory-whitespace/index.js","turbopack:///[project]/node_modules/.pnpm/micromark-util-normalize-identifier@2.0.1/node_modules/micromark-util-normalize-identifier/index.js","turbopack:///[project]/node_modules/.pnpm/micromark-core-commonmark@2.0.3/node_modules/micromark-core-commonmark/lib/definition.js","turbopack:///[project]/node_modules/.pnpm/micromark-core-commonmark@2.0.3/node_modules/micromark-core-commonmark/lib/hard-break-escape.js","turbopack:///[project]/node_modules/.pnpm/micromark-core-commonmark@2.0.3/node_modules/micromark-core-commonmark/lib/heading-atx.js","turbopack:///[project]/node_modules/.pnpm/micromark-util-html-tag-name@2.0.1/node_modules/micromark-util-html-tag-name/index.js","turbopack:///[project]/node_modules/.pnpm/micromark-core-commonmark@2.0.3/node_modules/micromark-core-commonmark/lib/html-flow.js","turbopack:///[project]/node_modules/.pnpm/micromark-core-commonmark@2.0.3/node_modules/micromark-core-commonmark/lib/html-text.js","turbopack:///[project]/node_modules/.pnpm/micromark-core-commonmark@2.0.3/node_modules/micromark-core-commonmark/lib/label-end.js","turbopack:///[project]/node_modules/.pnpm/micromark-core-commonmark@2.0.3/node_modules/micromark-core-commonmark/lib/label-start-image.js","turbopack:///[project]/node_modules/.pnpm/micromark-core-commonmark@2.0.3/node_modules/micromark-core-commonmark/lib/label-start-link.js","turbopack:///[project]/node_modules/.pnpm/micromark-core-commonmark@2.0.3/node_modules/micromark-core-commonmark/lib/line-ending.js","turbopack:///[project]/node_modules/.pnpm/micromark-core-commonmark@2.0.3/node_modules/micromark-core-commonmark/lib/thematic-break.js","turbopack:///[project]/node_modules/.pnpm/micromark-core-commonmark@2.0.3/node_modules/micromark-core-commonmark/lib/list.js","turbopack:///[project]/node_modules/.pnpm/micromark-core-commonmark@2.0.3/node_modules/micromark-core-commonmark/lib/setext-underline.js","turbopack:///[project]/node_modules/.pnpm/micromark@4.0.2/node_modules/micromark/lib/constructs.js","turbopack:///[project]/node_modules/.pnpm/micromark@4.0.2/node_modules/micromark/lib/parse.js","turbopack:///[project]/node_modules/.pnpm/micromark@4.0.2/node_modules/micromark/lib/create-tokenizer.js","turbopack:///[project]/node_modules/.pnpm/micromark@4.0.2/node_modules/micromark/lib/postprocess.js","turbopack:///[project]/node_modules/.pnpm/micromark@4.0.2/node_modules/micromark/lib/preprocess.js","turbopack:///[project]/node_modules/.pnpm/micromark-util-decode-numeric-character-reference@2.0.2/node_modules/micromark-util-decode-numeric-character-reference/index.js","turbopack:///[project]/node_modules/.pnpm/micromark-util-decode-string@2.0.1/node_modules/micromark-util-decode-string/index.js","turbopack:///[project]/node_modules/.pnpm/unist-util-stringify-position@4.0.0/node_modules/unist-util-stringify-position/lib/index.js","turbopack:///[project]/node_modules/.pnpm/mdast-util-from-markdown@2.0.2/node_modules/mdast-util-from-markdown/lib/index.js","turbopack:///[project]/node_modules/.pnpm/remark-parse@11.0.0/node_modules/remark-parse/lib/index.js","turbopack:///[project]/node_modules/.pnpm/zwitch@2.0.4/node_modules/zwitch/index.js","turbopack:///[project]/node_modules/.pnpm/mdast-util-to-markdown@2.1.2/node_modules/mdast-util-to-markdown/lib/configure.js","turbopack:///[project]/node_modules/.pnpm/mdast-util-to-markdown@2.1.2/node_modules/mdast-util-to-markdown/lib/handle/blockquote.js","turbopack:///[project]/node_modules/.pnpm/mdast-util-to-markdown@2.1.2/node_modules/mdast-util-to-markdown/lib/util/pattern-in-scope.js","turbopack:///[project]/node_modules/.pnpm/mdast-util-to-markdown@2.1.2/node_modules/mdast-util-to-markdown/lib/handle/break.js","turbopack:///[project]/node_modules/.pnpm/longest-streak@3.1.0/node_modules/longest-streak/index.js","turbopack:///[project]/node_modules/.pnpm/mdast-util-to-markdown@2.1.2/node_modules/mdast-util-to-markdown/lib/util/format-code-as-indented.js","turbopack:///[project]/node_modules/.pnpm/mdast-util-to-markdown@2.1.2/node_modules/mdast-util-to-markdown/lib/util/check-fence.js","turbopack:///[project]/node_modules/.pnpm/mdast-util-to-markdown@2.1.2/node_modules/mdast-util-to-markdown/lib/handle/code.js","turbopack:///[project]/node_modules/.pnpm/mdast-util-to-markdown@2.1.2/node_modules/mdast-util-to-markdown/lib/util/check-quote.js","turbopack:///[project]/node_modules/.pnpm/mdast-util-to-markdown@2.1.2/node_modules/mdast-util-to-markdown/lib/handle/definition.js","turbopack:///[project]/node_modules/.pnpm/mdast-util-to-markdown@2.1.2/node_modules/mdast-util-to-markdown/lib/util/check-emphasis.js","turbopack:///[project]/node_modules/.pnpm/mdast-util-to-markdown@2.1.2/node_modules/mdast-util-to-markdown/lib/util/encode-character-reference.js","turbopack:///[project]/node_modules/.pnpm/mdast-util-to-markdown@2.1.2/node_modules/mdast-util-to-markdown/lib/util/encode-info.js","turbopack:///[project]/node_modules/.pnpm/mdast-util-to-markdown@2.1.2/node_modules/mdast-util-to-markdown/lib/handle/emphasis.js","turbopack:///[project]/node_modules/.pnpm/unist-util-is@6.0.0/node_modules/unist-util-is/lib/index.js","turbopack:///[project]/node_modules/.pnpm/unist-util-visit-parents@6.0.1/node_modules/unist-util-visit-parents/lib/color.node.js","turbopack:///[project]/node_modules/.pnpm/unist-util-visit-parents@6.0.1/node_modules/unist-util-visit-parents/lib/index.js","turbopack:///[project]/node_modules/.pnpm/unist-util-visit@5.0.0/node_modules/unist-util-visit/lib/index.js","turbopack:///[project]/node_modules/.pnpm/mdast-util-to-markdown@2.1.2/node_modules/mdast-util-to-markdown/lib/util/format-heading-as-setext.js","turbopack:///[project]/node_modules/.pnpm/mdast-util-to-markdown@2.1.2/node_modules/mdast-util-to-markdown/lib/handle/heading.js","turbopack:///[project]/node_modules/.pnpm/mdast-util-to-markdown@2.1.2/node_modules/mdast-util-to-markdown/lib/handle/html.js","turbopack:///[project]/node_modules/.pnpm/mdast-util-to-markdown@2.1.2/node_modules/mdast-util-to-markdown/lib/handle/image.js","turbopack:///[project]/node_modules/.pnpm/mdast-util-to-markdown@2.1.2/node_modules/mdast-util-to-markdown/lib/handle/image-reference.js","turbopack:///[project]/node_modules/.pnpm/mdast-util-to-markdown@2.1.2/node_modules/mdast-util-to-markdown/lib/handle/inline-code.js","turbopack:///[project]/node_modules/.pnpm/mdast-util-to-markdown@2.1.2/node_modules/mdast-util-to-markdown/lib/util/format-link-as-autolink.js","turbopack:///[project]/node_modules/.pnpm/mdast-util-to-markdown@2.1.2/node_modules/mdast-util-to-markdown/lib/handle/link.js","turbopack:///[project]/node_modules/.pnpm/mdast-util-to-markdown@2.1.2/node_modules/mdast-util-to-markdown/lib/handle/link-reference.js","turbopack:///[project]/node_modules/.pnpm/mdast-util-to-markdown@2.1.2/node_modules/mdast-util-to-markdown/lib/util/check-bullet.js","turbopack:///[project]/node_modules/.pnpm/mdast-util-to-markdown@2.1.2/node_modules/mdast-util-to-markdown/lib/util/check-bullet-other.js","turbopack:///[project]/node_modules/.pnpm/mdast-util-to-markdown@2.1.2/node_modules/mdast-util-to-markdown/lib/util/check-bullet-ordered.js","turbopack:///[project]/node_modules/.pnpm/mdast-util-to-markdown@2.1.2/node_modules/mdast-util-to-markdown/lib/util/check-rule.js","turbopack:///[project]/node_modules/.pnpm/mdast-util-to-markdown@2.1.2/node_modules/mdast-util-to-markdown/lib/handle/list.js","turbopack:///[project]/node_modules/.pnpm/mdast-util-to-markdown@2.1.2/node_modules/mdast-util-to-markdown/lib/util/check-list-item-indent.js","turbopack:///[project]/node_modules/.pnpm/mdast-util-to-markdown@2.1.2/node_modules/mdast-util-to-markdown/lib/handle/list-item.js","turbopack:///[project]/node_modules/.pnpm/mdast-util-to-markdown@2.1.2/node_modules/mdast-util-to-markdown/lib/handle/paragraph.js","turbopack:///[project]/node_modules/.pnpm/mdast-util-phrasing@4.1.0/node_modules/mdast-util-phrasing/lib/index.js","turbopack:///[project]/node_modules/.pnpm/mdast-util-to-markdown@2.1.2/node_modules/mdast-util-to-markdown/lib/handle/root.js","turbopack:///[project]/node_modules/.pnpm/mdast-util-to-markdown@2.1.2/node_modules/mdast-util-to-markdown/lib/util/check-strong.js","turbopack:///[project]/node_modules/.pnpm/mdast-util-to-markdown@2.1.2/node_modules/mdast-util-to-markdown/lib/handle/strong.js","turbopack:///[project]/node_modules/.pnpm/mdast-util-to-markdown@2.1.2/node_modules/mdast-util-to-markdown/lib/handle/text.js","turbopack:///[project]/node_modules/.pnpm/mdast-util-to-markdown@2.1.2/node_modules/mdast-util-to-markdown/lib/util/check-rule-repetition.js","turbopack:///[project]/node_modules/.pnpm/mdast-util-to-markdown@2.1.2/node_modules/mdast-util-to-markdown/lib/handle/thematic-break.js","turbopack:///[project]/node_modules/.pnpm/mdast-util-to-markdown@2.1.2/node_modules/mdast-util-to-markdown/lib/handle/index.js","turbopack:///[project]/node_modules/.pnpm/mdast-util-to-markdown@2.1.2/node_modules/mdast-util-to-markdown/lib/join.js","turbopack:///[project]/node_modules/.pnpm/mdast-util-to-markdown@2.1.2/node_modules/mdast-util-to-markdown/lib/unsafe.js","turbopack:///[project]/node_modules/.pnpm/mdast-util-to-markdown@2.1.2/node_modules/mdast-util-to-markdown/lib/util/association.js","turbopack:///[project]/node_modules/.pnpm/mdast-util-to-markdown@2.1.2/node_modules/mdast-util-to-markdown/lib/util/compile-pattern.js","turbopack:///[project]/node_modules/.pnpm/mdast-util-to-markdown@2.1.2/node_modules/mdast-util-to-markdown/lib/util/container-phrasing.js","turbopack:///[project]/node_modules/.pnpm/mdast-util-to-markdown@2.1.2/node_modules/mdast-util-to-markdown/lib/util/container-flow.js","turbopack:///[project]/node_modules/.pnpm/mdast-util-to-markdown@2.1.2/node_modules/mdast-util-to-markdown/lib/util/indent-lines.js","turbopack:///[project]/node_modules/.pnpm/mdast-util-to-markdown@2.1.2/node_modules/mdast-util-to-markdown/lib/util/safe.js","turbopack:///[project]/node_modules/.pnpm/mdast-util-to-markdown@2.1.2/node_modules/mdast-util-to-markdown/lib/util/track.js","turbopack:///[project]/node_modules/.pnpm/mdast-util-to-markdown@2.1.2/node_modules/mdast-util-to-markdown/lib/index.js","turbopack:///[project]/node_modules/.pnpm/remark-stringify@11.0.0/node_modules/remark-stringify/lib/index.js","turbopack:///[project]/node_modules/.pnpm/bail@2.0.2/node_modules/bail/index.js","turbopack:///[project]/node_modules/.pnpm/unified@11.0.5/node_modules/unified/lib/index.js","turbopack:///[project]/node_modules/.pnpm/devlop@1.1.0/node_modules/devlop/lib/default.js","turbopack:///[project]/node_modules/.pnpm/is-plain-obj@4.1.0/node_modules/is-plain-obj/index.js","turbopack:///[project]/node_modules/.pnpm/trough@2.2.0/node_modules/trough/lib/index.js","turbopack:///[project]/node_modules/.pnpm/vfile-message@4.0.3/node_modules/vfile-message/lib/index.js","turbopack:///[project]/node_modules/.pnpm/vfile@6.0.3/node_modules/vfile/lib/minurl.shared.js","turbopack:///[project]/node_modules/.pnpm/vfile@6.0.3/node_modules/vfile/lib/index.js","turbopack:///[project]/node_modules/.pnpm/unified@11.0.5/node_modules/unified/lib/callable-instance.js","turbopack:///[project]/node_modules/.pnpm/remark@15.0.1/node_modules/remark/index.js","turbopack:///[project]/node_modules/.pnpm/ccount@2.0.1/node_modules/ccount/index.js","turbopack:///[project]/node_modules/.pnpm/escape-string-regexp@5.0.0/node_modules/escape-string-regexp/index.js","turbopack:///[project]/node_modules/.pnpm/mdast-util-find-and-replace@3.0.2/node_modules/mdast-util-find-and-replace/lib/index.js","turbopack:///[project]/node_modules/.pnpm/mdast-util-gfm-autolink-literal@2.0.1/node_modules/mdast-util-gfm-autolink-literal/lib/index.js","turbopack:///[project]/node_modules/.pnpm/mdast-util-gfm-footnote@2.1.0/node_modules/mdast-util-gfm-footnote/lib/index.js","turbopack:///[project]/node_modules/.pnpm/mdast-util-gfm-strikethrough@2.0.0/node_modules/mdast-util-gfm-strikethrough/lib/index.js","turbopack:///[project]/node_modules/.pnpm/markdown-table@3.0.4/node_modules/markdown-table/index.js","turbopack:///[project]/node_modules/.pnpm/mdast-util-gfm-table@2.0.0/node_modules/mdast-util-gfm-table/lib/index.js","turbopack:///[project]/node_modules/.pnpm/mdast-util-gfm-task-list-item@2.0.0/node_modules/mdast-util-gfm-task-list-item/lib/index.js","turbopack:///[project]/node_modules/.pnpm/mdast-util-gfm@3.1.0/node_modules/mdast-util-gfm/lib/index.js","turbopack:///[project]/node_modules/.pnpm/micromark-extension-gfm-autolink-literal@2.1.0/node_modules/micromark-extension-gfm-autolink-literal/lib/syntax.js","turbopack:///[project]/node_modules/.pnpm/micromark-util-encode@2.0.1/node_modules/micromark-util-encode/index.js","turbopack:///[project]/node_modules/.pnpm/micromark-util-sanitize-uri@2.0.1/node_modules/micromark-util-sanitize-uri/index.js","turbopack:///[project]/node_modules/.pnpm/micromark-extension-gfm-autolink-literal@2.1.0/node_modules/micromark-extension-gfm-autolink-literal/lib/html.js","turbopack:///[project]/node_modules/.pnpm/micromark-extension-gfm-footnote@2.1.0/node_modules/micromark-extension-gfm-footnote/lib/syntax.js","turbopack:///[project]/node_modules/.pnpm/micromark-extension-gfm-footnote@2.1.0/node_modules/micromark-extension-gfm-footnote/lib/html.js","turbopack:///[project]/node_modules/.pnpm/micromark-extension-gfm-strikethrough@2.1.0/node_modules/micromark-extension-gfm-strikethrough/lib/syntax.js","turbopack:///[project]/node_modules/.pnpm/micromark-extension-gfm-strikethrough@2.1.0/node_modules/micromark-extension-gfm-strikethrough/lib/html.js","turbopack:///[project]/node_modules/.pnpm/micromark-extension-gfm-table@2.1.1/node_modules/micromark-extension-gfm-table/lib/edit-map.js","turbopack:///[project]/node_modules/.pnpm/micromark-extension-gfm-table@2.1.1/node_modules/micromark-extension-gfm-table/lib/infer.js","turbopack:///[project]/node_modules/.pnpm/micromark-extension-gfm-table@2.1.1/node_modules/micromark-extension-gfm-table/lib/syntax.js","turbopack:///[project]/node_modules/.pnpm/micromark-extension-gfm-table@2.1.1/node_modules/micromark-extension-gfm-table/lib/html.js","turbopack:///[project]/node_modules/.pnpm/micromark-extension-gfm-tagfilter@2.0.0/node_modules/micromark-extension-gfm-tagfilter/lib/index.js","turbopack:///[project]/node_modules/.pnpm/micromark-extension-gfm-task-list-item@2.1.0/node_modules/micromark-extension-gfm-task-list-item/lib/syntax.js","turbopack:///[project]/node_modules/.pnpm/micromark-extension-gfm-task-list-item@2.1.0/node_modules/micromark-extension-gfm-task-list-item/lib/html.js","turbopack:///[project]/node_modules/.pnpm/micromark-extension-gfm@3.0.0/node_modules/micromark-extension-gfm/index.js","turbopack:///[project]/node_modules/.pnpm/remark-gfm@4.0.1/node_modules/remark-gfm/lib/index.js","turbopack:///[project]/node_modules/.pnpm/@ungap+structured-clone@1.3.0/node_modules/@ungap/structured-clone/esm/types.js","turbopack:///[project]/node_modules/.pnpm/@ungap+structured-clone@1.3.0/node_modules/@ungap/structured-clone/esm/deserialize.js","turbopack:///[project]/node_modules/.pnpm/@ungap+structured-clone@1.3.0/node_modules/@ungap/structured-clone/esm/serialize.js","turbopack:///[project]/node_modules/.pnpm/@ungap+structured-clone@1.3.0/node_modules/@ungap/structured-clone/esm/index.js","turbopack:///[project]/node_modules/.pnpm/unist-util-position@5.0.0/node_modules/unist-util-position/lib/index.js","turbopack:///[project]/node_modules/.pnpm/hast-util-sanitize@5.0.2/node_modules/hast-util-sanitize/lib/schema.js","turbopack:///[project]/node_modules/.pnpm/hast-util-sanitize@5.0.2/node_modules/hast-util-sanitize/lib/index.js","turbopack:///[project]/node_modules/.pnpm/mdast-util-to-hast@13.2.0/node_modules/mdast-util-to-hast/lib/footer.js","turbopack:///[project]/node_modules/.pnpm/mdast-util-to-hast@13.2.0/node_modules/mdast-util-to-hast/lib/handlers/blockquote.js","turbopack:///[project]/node_modules/.pnpm/mdast-util-to-hast@13.2.0/node_modules/mdast-util-to-hast/lib/handlers/break.js","turbopack:///[project]/node_modules/.pnpm/mdast-util-to-hast@13.2.0/node_modules/mdast-util-to-hast/lib/handlers/code.js","turbopack:///[project]/node_modules/.pnpm/mdast-util-to-hast@13.2.0/node_modules/mdast-util-to-hast/lib/handlers/delete.js","turbopack:///[project]/node_modules/.pnpm/mdast-util-to-hast@13.2.0/node_modules/mdast-util-to-hast/lib/handlers/emphasis.js","turbopack:///[project]/node_modules/.pnpm/mdast-util-to-hast@13.2.0/node_modules/mdast-util-to-hast/lib/handlers/footnote-reference.js","turbopack:///[project]/node_modules/.pnpm/mdast-util-to-hast@13.2.0/node_modules/mdast-util-to-hast/lib/handlers/heading.js","turbopack:///[project]/node_modules/.pnpm/mdast-util-to-hast@13.2.0/node_modules/mdast-util-to-hast/lib/handlers/html.js","turbopack:///[project]/node_modules/.pnpm/mdast-util-to-hast@13.2.0/node_modules/mdast-util-to-hast/lib/revert.js","turbopack:///[project]/node_modules/.pnpm/mdast-util-to-hast@13.2.0/node_modules/mdast-util-to-hast/lib/handlers/image-reference.js","turbopack:///[project]/node_modules/.pnpm/mdast-util-to-hast@13.2.0/node_modules/mdast-util-to-hast/lib/handlers/image.js","turbopack:///[project]/node_modules/.pnpm/mdast-util-to-hast@13.2.0/node_modules/mdast-util-to-hast/lib/handlers/inline-code.js","turbopack:///[project]/node_modules/.pnpm/mdast-util-to-hast@13.2.0/node_modules/mdast-util-to-hast/lib/handlers/link-reference.js","turbopack:///[project]/node_modules/.pnpm/mdast-util-to-hast@13.2.0/node_modules/mdast-util-to-hast/lib/handlers/link.js","turbopack:///[project]/node_modules/.pnpm/mdast-util-to-hast@13.2.0/node_modules/mdast-util-to-hast/lib/handlers/list-item.js","turbopack:///[project]/node_modules/.pnpm/mdast-util-to-hast@13.2.0/node_modules/mdast-util-to-hast/lib/handlers/list.js","turbopack:///[project]/node_modules/.pnpm/mdast-util-to-hast@13.2.0/node_modules/mdast-util-to-hast/lib/handlers/paragraph.js","turbopack:///[project]/node_modules/.pnpm/mdast-util-to-hast@13.2.0/node_modules/mdast-util-to-hast/lib/handlers/root.js","turbopack:///[project]/node_modules/.pnpm/mdast-util-to-hast@13.2.0/node_modules/mdast-util-to-hast/lib/handlers/strong.js","turbopack:///[project]/node_modules/.pnpm/mdast-util-to-hast@13.2.0/node_modules/mdast-util-to-hast/lib/handlers/table.js","turbopack:///[project]/node_modules/.pnpm/mdast-util-to-hast@13.2.0/node_modules/mdast-util-to-hast/lib/handlers/table-row.js","turbopack:///[project]/node_modules/.pnpm/mdast-util-to-hast@13.2.0/node_modules/mdast-util-to-hast/lib/handlers/table-cell.js","turbopack:///[project]/node_modules/.pnpm/trim-lines@3.0.1/node_modules/trim-lines/index.js","turbopack:///[project]/node_modules/.pnpm/mdast-util-to-hast@13.2.0/node_modules/mdast-util-to-hast/lib/handlers/text.js","turbopack:///[project]/node_modules/.pnpm/mdast-util-to-hast@13.2.0/node_modules/mdast-util-to-hast/lib/handlers/thematic-break.js","turbopack:///[project]/node_modules/.pnpm/mdast-util-to-hast@13.2.0/node_modules/mdast-util-to-hast/lib/handlers/index.js","turbopack:///[project]/node_modules/.pnpm/mdast-util-to-hast@13.2.0/node_modules/mdast-util-to-hast/lib/state.js","turbopack:///[project]/node_modules/.pnpm/mdast-util-to-hast@13.2.0/node_modules/mdast-util-to-hast/lib/index.js","turbopack:///[project]/node_modules/.pnpm/html-void-elements@3.0.0/node_modules/html-void-elements/index.js","turbopack:///[project]/node_modules/.pnpm/property-information@7.1.0/node_modules/property-information/lib/util/schema.js","turbopack:///[project]/node_modules/.pnpm/property-information@7.1.0/node_modules/property-information/lib/util/merge.js","turbopack:///[project]/node_modules/.pnpm/property-information@7.1.0/node_modules/property-information/lib/normalize.js","turbopack:///[project]/node_modules/.pnpm/property-information@7.1.0/node_modules/property-information/lib/util/info.js","turbopack:///[project]/node_modules/.pnpm/property-information@7.1.0/node_modules/property-information/lib/util/types.js","turbopack:///[project]/node_modules/.pnpm/property-information@7.1.0/node_modules/property-information/lib/util/defined-info.js","turbopack:///[project]/node_modules/.pnpm/property-information@7.1.0/node_modules/property-information/lib/util/create.js","turbopack:///[project]/node_modules/.pnpm/property-information@7.1.0/node_modules/property-information/lib/aria.js","turbopack:///[project]/node_modules/.pnpm/property-information@7.1.0/node_modules/property-information/lib/util/case-sensitive-transform.js","turbopack:///[project]/node_modules/.pnpm/property-information@7.1.0/node_modules/property-information/lib/util/case-insensitive-transform.js","turbopack:///[project]/node_modules/.pnpm/property-information@7.1.0/node_modules/property-information/lib/html.js","turbopack:///[project]/node_modules/.pnpm/property-information@7.1.0/node_modules/property-information/lib/svg.js","turbopack:///[project]/node_modules/.pnpm/property-information@7.1.0/node_modules/property-information/lib/xlink.js","turbopack:///[project]/node_modules/.pnpm/property-information@7.1.0/node_modules/property-information/lib/xmlns.js","turbopack:///[project]/node_modules/.pnpm/property-information@7.1.0/node_modules/property-information/lib/xml.js","turbopack:///[project]/node_modules/.pnpm/property-information@7.1.0/node_modules/property-information/index.js","turbopack:///[project]/node_modules/.pnpm/stringify-entities@4.0.4/node_modules/stringify-entities/lib/core.js","turbopack:///[project]/node_modules/.pnpm/stringify-entities@4.0.4/node_modules/stringify-entities/lib/util/to-hexadecimal.js","turbopack:///[project]/node_modules/.pnpm/stringify-entities@4.0.4/node_modules/stringify-entities/lib/util/to-decimal.js","turbopack:///[project]/node_modules/.pnpm/character-entities-legacy@3.0.0/node_modules/character-entities-legacy/index.js","turbopack:///[project]/node_modules/.pnpm/character-entities-html4@2.1.0/node_modules/character-entities-html4/index.js","turbopack:///[project]/node_modules/.pnpm/stringify-entities@4.0.4/node_modules/stringify-entities/lib/constant/dangerous.js","turbopack:///[project]/node_modules/.pnpm/stringify-entities@4.0.4/node_modules/stringify-entities/lib/util/to-named.js","turbopack:///[project]/node_modules/.pnpm/stringify-entities@4.0.4/node_modules/stringify-entities/lib/util/format-smart.js","turbopack:///[project]/node_modules/.pnpm/stringify-entities@4.0.4/node_modules/stringify-entities/lib/util/format-basic.js","turbopack:///[project]/node_modules/.pnpm/stringify-entities@4.0.4/node_modules/stringify-entities/lib/index.js","turbopack:///[project]/node_modules/.pnpm/hast-util-to-html@9.0.5/node_modules/hast-util-to-html/lib/handle/comment.js","turbopack:///[project]/node_modules/.pnpm/hast-util-to-html@9.0.5/node_modules/hast-util-to-html/lib/handle/doctype.js","turbopack:///[project]/node_modules/.pnpm/comma-separated-tokens@2.0.3/node_modules/comma-separated-tokens/index.js","turbopack:///[project]/node_modules/.pnpm/property-information@7.1.0/node_modules/property-information/lib/find.js","turbopack:///[project]/node_modules/.pnpm/space-separated-tokens@2.0.2/node_modules/space-separated-tokens/index.js","turbopack:///[project]/node_modules/.pnpm/hast-util-whitespace@3.0.0/node_modules/hast-util-whitespace/lib/index.js","turbopack:///[project]/node_modules/.pnpm/hast-util-to-html@9.0.5/node_modules/hast-util-to-html/lib/omission/util/siblings.js","turbopack:///[project]/node_modules/.pnpm/hast-util-to-html@9.0.5/node_modules/hast-util-to-html/lib/omission/omission.js","turbopack:///[project]/node_modules/.pnpm/hast-util-to-html@9.0.5/node_modules/hast-util-to-html/lib/omission/closing.js","turbopack:///[project]/node_modules/.pnpm/hast-util-to-html@9.0.5/node_modules/hast-util-to-html/lib/omission/opening.js","turbopack:///[project]/node_modules/.pnpm/hast-util-to-html@9.0.5/node_modules/hast-util-to-html/lib/handle/element.js","turbopack:///[project]/node_modules/.pnpm/hast-util-to-html@9.0.5/node_modules/hast-util-to-html/lib/handle/text.js","turbopack:///[project]/node_modules/.pnpm/hast-util-to-html@9.0.5/node_modules/hast-util-to-html/lib/handle/raw.js","turbopack:///[project]/node_modules/.pnpm/hast-util-to-html@9.0.5/node_modules/hast-util-to-html/lib/handle/root.js","turbopack:///[project]/node_modules/.pnpm/hast-util-to-html@9.0.5/node_modules/hast-util-to-html/lib/handle/index.js","turbopack:///[project]/node_modules/.pnpm/hast-util-to-html@9.0.5/node_modules/hast-util-to-html/lib/index.js","turbopack:///[project]/node_modules/.pnpm/remark-html@16.0.1/node_modules/remark-html/lib/index.js","turbopack:///[project]/src/utils/processMarkdown.ts"],"sourcesContent":["'use strict';\n\nvar hasOwn = Object.prototype.hasOwnProperty;\nvar toStr = Object.prototype.toString;\nvar defineProperty = Object.defineProperty;\nvar gOPD = Object.getOwnPropertyDescriptor;\n\nvar isArray = function isArray(arr) {\n\tif (typeof Array.isArray === 'function') {\n\t\treturn Array.isArray(arr);\n\t}\n\n\treturn toStr.call(arr) === '[object Array]';\n};\n\nvar isPlainObject = function isPlainObject(obj) {\n\tif (!obj || toStr.call(obj) !== '[object Object]') {\n\t\treturn false;\n\t}\n\n\tvar hasOwnConstructor = hasOwn.call(obj, 'constructor');\n\tvar hasIsPrototypeOf = obj.constructor && obj.constructor.prototype && hasOwn.call(obj.constructor.prototype, 'isPrototypeOf');\n\t// Not own constructor property must be Object\n\tif (obj.constructor && !hasOwnConstructor && !hasIsPrototypeOf) {\n\t\treturn false;\n\t}\n\n\t// Own properties are enumerated firstly, so to speed up,\n\t// if last one is own, then all properties are own.\n\tvar key;\n\tfor (key in obj) { /**/ }\n\n\treturn typeof key === 'undefined' || hasOwn.call(obj, key);\n};\n\n// If name is '__proto__', and Object.defineProperty is available, define __proto__ as an own property on target\nvar setProperty = function setProperty(target, options) {\n\tif (defineProperty && options.name === '__proto__') {\n\t\tdefineProperty(target, options.name, {\n\t\t\tenumerable: true,\n\t\t\tconfigurable: true,\n\t\t\tvalue: options.newValue,\n\t\t\twritable: true\n\t\t});\n\t} else {\n\t\ttarget[options.name] = options.newValue;\n\t}\n};\n\n// Return undefined instead of __proto__ if '__proto__' is not an own property\nvar getProperty = function getProperty(obj, name) {\n\tif (name === '__proto__') {\n\t\tif (!hasOwn.call(obj, name)) {\n\t\t\treturn void 0;\n\t\t} else if (gOPD) {\n\t\t\t// In early versions of node, obj['__proto__'] is buggy when obj has\n\t\t\t// __proto__ as an own property. Object.getOwnPropertyDescriptor() works.\n\t\t\treturn gOPD(obj, name).value;\n\t\t}\n\t}\n\n\treturn obj[name];\n};\n\nmodule.exports = function extend() {\n\tvar options, name, src, copy, copyIsArray, clone;\n\tvar target = arguments[0];\n\tvar i = 1;\n\tvar length = arguments.length;\n\tvar deep = false;\n\n\t// Handle a deep copy situation\n\tif (typeof target === 'boolean') {\n\t\tdeep = target;\n\t\ttarget = arguments[1] || {};\n\t\t// skip the boolean and the target\n\t\ti = 2;\n\t}\n\tif (target == null || (typeof target !== 'object' && typeof target !== 'function')) {\n\t\ttarget = {};\n\t}\n\n\tfor (; i < length; ++i) {\n\t\toptions = arguments[i];\n\t\t// Only deal with non-null/undefined values\n\t\tif (options != null) {\n\t\t\t// Extend the base object\n\t\t\tfor (name in options) {\n\t\t\t\tsrc = getProperty(target, name);\n\t\t\t\tcopy = getProperty(options, name);\n\n\t\t\t\t// Prevent never-ending loop\n\t\t\t\tif (target !== copy) {\n\t\t\t\t\t// Recurse if we're merging plain objects or arrays\n\t\t\t\t\tif (deep && copy && (isPlainObject(copy) || (copyIsArray = isArray(copy)))) {\n\t\t\t\t\t\tif (copyIsArray) {\n\t\t\t\t\t\t\tcopyIsArray = false;\n\t\t\t\t\t\t\tclone = src && isArray(src) ? src : [];\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tclone = src && isPlainObject(src) ? src : {};\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Never move original objects, clone them\n\t\t\t\t\t\tsetProperty(target, { name: name, newValue: extend(deep, clone, copy) });\n\n\t\t\t\t\t// Don't bring in undefined values\n\t\t\t\t\t} else if (typeof copy !== 'undefined') {\n\t\t\t\t\t\tsetProperty(target, { name: name, newValue: copy });\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// Return the modified object\n\treturn target;\n};\n","/**\n * @typedef {import('mdast').Nodes} Nodes\n *\n * @typedef Options\n *   Configuration (optional).\n * @property {boolean | null | undefined} [includeImageAlt=true]\n *   Whether to use `alt` for `image`s (default: `true`).\n * @property {boolean | null | undefined} [includeHtml=true]\n *   Whether to use `value` of HTML (default: `true`).\n */\n\n/** @type {Options} */\nconst emptyOptions = {}\n\n/**\n * Get the text content of a node or list of nodes.\n *\n * Prefers the node’s plain-text fields, otherwise serializes its children,\n * and if the given value is an array, serialize the nodes in it.\n *\n * @param {unknown} [value]\n *   Thing to serialize, typically `Node`.\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n * @returns {string}\n *   Serialized `value`.\n */\nexport function toString(value, options) {\n  const settings = options || emptyOptions\n  const includeImageAlt =\n    typeof settings.includeImageAlt === 'boolean'\n      ? settings.includeImageAlt\n      : true\n  const includeHtml =\n    typeof settings.includeHtml === 'boolean' ? settings.includeHtml : true\n\n  return one(value, includeImageAlt, includeHtml)\n}\n\n/**\n * One node or several nodes.\n *\n * @param {unknown} value\n *   Thing to serialize.\n * @param {boolean} includeImageAlt\n *   Include image `alt`s.\n * @param {boolean} includeHtml\n *   Include HTML.\n * @returns {string}\n *   Serialized node.\n */\nfunction one(value, includeImageAlt, includeHtml) {\n  if (node(value)) {\n    if ('value' in value) {\n      return value.type === 'html' && !includeHtml ? '' : value.value\n    }\n\n    if (includeImageAlt && 'alt' in value && value.alt) {\n      return value.alt\n    }\n\n    if ('children' in value) {\n      return all(value.children, includeImageAlt, includeHtml)\n    }\n  }\n\n  if (Array.isArray(value)) {\n    return all(value, includeImageAlt, includeHtml)\n  }\n\n  return ''\n}\n\n/**\n * Serialize a list of nodes.\n *\n * @param {Array<unknown>} values\n *   Thing to serialize.\n * @param {boolean} includeImageAlt\n *   Include image `alt`s.\n * @param {boolean} includeHtml\n *   Include HTML.\n * @returns {string}\n *   Serialized nodes.\n */\nfunction all(values, includeImageAlt, includeHtml) {\n  /** @type {Array<string>} */\n  const result = []\n  let index = -1\n\n  while (++index < values.length) {\n    result[index] = one(values[index], includeImageAlt, includeHtml)\n  }\n\n  return result.join('')\n}\n\n/**\n * Check if `value` looks like a node.\n *\n * @param {unknown} value\n *   Thing.\n * @returns {value is Nodes}\n *   Whether `value` is a node.\n */\nfunction node(value) {\n  return Boolean(value && typeof value === 'object')\n}\n","/**\n * Like `Array#splice`, but smarter for giant arrays.\n *\n * `Array#splice` takes all items to be inserted as individual argument which\n * causes a stack overflow in V8 when trying to insert 100k items for instance.\n *\n * Otherwise, this does not return the removed items, and takes `items` as an\n * array instead of rest parameters.\n *\n * @template {unknown} T\n *   Item type.\n * @param {Array<T>} list\n *   List to operate on.\n * @param {number} start\n *   Index to remove/insert at (can be negative).\n * @param {number} remove\n *   Number of items to remove.\n * @param {Array<T>} items\n *   Items to inject into `list`.\n * @returns {undefined}\n *   Nothing.\n */\nexport function splice(list, start, remove, items) {\n  const end = list.length;\n  let chunkStart = 0;\n  /** @type {Array<unknown>} */\n  let parameters;\n\n  // Make start between zero and `end` (included).\n  if (start < 0) {\n    start = -start > end ? 0 : end + start;\n  } else {\n    start = start > end ? end : start;\n  }\n  remove = remove > 0 ? remove : 0;\n\n  // No need to chunk the items if there’s only a couple (10k) items.\n  if (items.length < 10000) {\n    parameters = Array.from(items);\n    parameters.unshift(start, remove);\n    // @ts-expect-error Hush, it’s fine.\n    list.splice(...parameters);\n  } else {\n    // Delete `remove` items starting from `start`\n    if (remove) list.splice(start, remove);\n\n    // Insert the items in chunks to not cause stack overflows.\n    while (chunkStart < items.length) {\n      parameters = items.slice(chunkStart, chunkStart + 10000);\n      parameters.unshift(start, 0);\n      // @ts-expect-error Hush, it’s fine.\n      list.splice(...parameters);\n      chunkStart += 10000;\n      start += 10000;\n    }\n  }\n}\n\n/**\n * Append `items` (an array) at the end of `list` (another array).\n * When `list` was empty, returns `items` instead.\n *\n * This prevents a potentially expensive operation when `list` is empty,\n * and adds items in batches to prevent V8 from hanging.\n *\n * @template {unknown} T\n *   Item type.\n * @param {Array<T>} list\n *   List to operate on.\n * @param {Array<T>} items\n *   Items to add to `list`.\n * @returns {Array<T>}\n *   Either `list` or `items`.\n */\nexport function push(list, items) {\n  if (list.length > 0) {\n    splice(list, list.length, 0, items);\n    return list;\n  }\n  return items;\n}","/**\n * @import {\n *   Extension,\n *   Handles,\n *   HtmlExtension,\n *   NormalizedExtension\n * } from 'micromark-util-types'\n */\n\nimport {splice} from 'micromark-util-chunked'\n\nconst hasOwnProperty = {}.hasOwnProperty\n\n/**\n * Combine multiple syntax extensions into one.\n *\n * @param {ReadonlyArray<Extension>} extensions\n *   List of syntax extensions.\n * @returns {NormalizedExtension}\n *   A single combined extension.\n */\nexport function combineExtensions(extensions) {\n  /** @type {NormalizedExtension} */\n  const all = {}\n  let index = -1\n\n  while (++index < extensions.length) {\n    syntaxExtension(all, extensions[index])\n  }\n\n  return all\n}\n\n/**\n * Merge `extension` into `all`.\n *\n * @param {NormalizedExtension} all\n *   Extension to merge into.\n * @param {Extension} extension\n *   Extension to merge.\n * @returns {undefined}\n *   Nothing.\n */\nfunction syntaxExtension(all, extension) {\n  /** @type {keyof Extension} */\n  let hook\n\n  for (hook in extension) {\n    const maybe = hasOwnProperty.call(all, hook) ? all[hook] : undefined\n    /** @type {Record<string, unknown>} */\n    const left = maybe || (all[hook] = {})\n    /** @type {Record<string, unknown> | undefined} */\n    const right = extension[hook]\n    /** @type {string} */\n    let code\n\n    if (right) {\n      for (code in right) {\n        if (!hasOwnProperty.call(left, code)) left[code] = []\n        const value = right[code]\n        constructs(\n          // @ts-expect-error Looks like a list.\n          left[code],\n          Array.isArray(value) ? value : value ? [value] : []\n        )\n      }\n    }\n  }\n}\n\n/**\n * Merge `list` into `existing` (both lists of constructs).\n * Mutates `existing`.\n *\n * @param {Array<unknown>} existing\n *   List of constructs to merge into.\n * @param {Array<unknown>} list\n *   List of constructs to merge.\n * @returns {undefined}\n *   Nothing.\n */\nfunction constructs(existing, list) {\n  let index = -1\n  /** @type {Array<unknown>} */\n  const before = []\n\n  while (++index < list.length) {\n    // @ts-expect-error Looks like an object.\n    ;(list[index].add === 'after' ? existing : before).push(list[index])\n  }\n\n  splice(existing, 0, 0, before)\n}\n\n/**\n * Combine multiple HTML extensions into one.\n *\n * @param {ReadonlyArray<HtmlExtension>} htmlExtensions\n *   List of HTML extensions.\n * @returns {HtmlExtension}\n *   Single combined HTML extension.\n */\nexport function combineHtmlExtensions(htmlExtensions) {\n  /** @type {HtmlExtension} */\n  const handlers = {}\n  let index = -1\n\n  while (++index < htmlExtensions.length) {\n    htmlExtension(handlers, htmlExtensions[index])\n  }\n\n  return handlers\n}\n\n/**\n * Merge `extension` into `all`.\n *\n * @param {HtmlExtension} all\n *   Extension to merge into.\n * @param {HtmlExtension} extension\n *   Extension to merge.\n * @returns {undefined}\n *   Nothing.\n */\nfunction htmlExtension(all, extension) {\n  /** @type {keyof HtmlExtension} */\n  let hook\n\n  for (hook in extension) {\n    const maybe = hasOwnProperty.call(all, hook) ? all[hook] : undefined\n    const left = maybe || (all[hook] = {})\n    const right = extension[hook]\n    /** @type {keyof Handles} */\n    let type\n\n    if (right) {\n      for (type in right) {\n        // @ts-expect-error assume document vs regular handler are managed correctly.\n        left[type] = right[type]\n      }\n    }\n  }\n}\n","/**\n * @import {Code} from 'micromark-util-types'\n */\n\n/**\n * Check whether the character code represents an ASCII alpha (`a` through `z`,\n * case insensitive).\n *\n * An **ASCII alpha** is an ASCII upper alpha or ASCII lower alpha.\n *\n * An **ASCII upper alpha** is a character in the inclusive range U+0041 (`A`)\n * to U+005A (`Z`).\n *\n * An **ASCII lower alpha** is a character in the inclusive range U+0061 (`a`)\n * to U+007A (`z`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiAlpha = regexCheck(/[A-Za-z]/);\n\n/**\n * Check whether the character code represents an ASCII alphanumeric (`a`\n * through `z`, case insensitive, or `0` through `9`).\n *\n * An **ASCII alphanumeric** is an ASCII digit (see `asciiDigit`) or ASCII alpha\n * (see `asciiAlpha`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiAlphanumeric = regexCheck(/[\\dA-Za-z]/);\n\n/**\n * Check whether the character code represents an ASCII atext.\n *\n * atext is an ASCII alphanumeric (see `asciiAlphanumeric`), or a character in\n * the inclusive ranges U+0023 NUMBER SIGN (`#`) to U+0027 APOSTROPHE (`'`),\n * U+002A ASTERISK (`*`), U+002B PLUS SIGN (`+`), U+002D DASH (`-`), U+002F\n * SLASH (`/`), U+003D EQUALS TO (`=`), U+003F QUESTION MARK (`?`), U+005E\n * CARET (`^`) to U+0060 GRAVE ACCENT (`` ` ``), or U+007B LEFT CURLY BRACE\n * (`{`) to U+007E TILDE (`~`).\n *\n * See:\n * **\\[RFC5322]**:\n * [Internet Message Format](https://tools.ietf.org/html/rfc5322).\n * P. Resnick.\n * IETF.\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiAtext = regexCheck(/[#-'*+\\--9=?A-Z^-~]/);\n\n/**\n * Check whether a character code is an ASCII control character.\n *\n * An **ASCII control** is a character in the inclusive range U+0000 NULL (NUL)\n * to U+001F (US), or U+007F (DEL).\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function asciiControl(code) {\n  return (\n    // Special whitespace codes (which have negative values), C0 and Control\n    // character DEL\n    code !== null && (code < 32 || code === 127)\n  );\n}\n\n/**\n * Check whether the character code represents an ASCII digit (`0` through `9`).\n *\n * An **ASCII digit** is a character in the inclusive range U+0030 (`0`) to\n * U+0039 (`9`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiDigit = regexCheck(/\\d/);\n\n/**\n * Check whether the character code represents an ASCII hex digit (`a` through\n * `f`, case insensitive, or `0` through `9`).\n *\n * An **ASCII hex digit** is an ASCII digit (see `asciiDigit`), ASCII upper hex\n * digit, or an ASCII lower hex digit.\n *\n * An **ASCII upper hex digit** is a character in the inclusive range U+0041\n * (`A`) to U+0046 (`F`).\n *\n * An **ASCII lower hex digit** is a character in the inclusive range U+0061\n * (`a`) to U+0066 (`f`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiHexDigit = regexCheck(/[\\dA-Fa-f]/);\n\n/**\n * Check whether the character code represents ASCII punctuation.\n *\n * An **ASCII punctuation** is a character in the inclusive ranges U+0021\n * EXCLAMATION MARK (`!`) to U+002F SLASH (`/`), U+003A COLON (`:`) to U+0040 AT\n * SIGN (`@`), U+005B LEFT SQUARE BRACKET (`[`) to U+0060 GRAVE ACCENT\n * (`` ` ``), or U+007B LEFT CURLY BRACE (`{`) to U+007E TILDE (`~`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiPunctuation = regexCheck(/[!-/:-@[-`{-~]/);\n\n/**\n * Check whether a character code is a markdown line ending.\n *\n * A **markdown line ending** is the virtual characters M-0003 CARRIAGE RETURN\n * LINE FEED (CRLF), M-0004 LINE FEED (LF) and M-0005 CARRIAGE RETURN (CR).\n *\n * In micromark, the actual character U+000A LINE FEED (LF) and U+000D CARRIAGE\n * RETURN (CR) are replaced by these virtual characters depending on whether\n * they occurred together.\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownLineEnding(code) {\n  return code !== null && code < -2;\n}\n\n/**\n * Check whether a character code is a markdown line ending (see\n * `markdownLineEnding`) or markdown space (see `markdownSpace`).\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownLineEndingOrSpace(code) {\n  return code !== null && (code < 0 || code === 32);\n}\n\n/**\n * Check whether a character code is a markdown space.\n *\n * A **markdown space** is the concrete character U+0020 SPACE (SP) and the\n * virtual characters M-0001 VIRTUAL SPACE (VS) and M-0002 HORIZONTAL TAB (HT).\n *\n * In micromark, the actual character U+0009 CHARACTER TABULATION (HT) is\n * replaced by one M-0002 HORIZONTAL TAB (HT) and between 0 and 3 M-0001 VIRTUAL\n * SPACE (VS) characters, depending on the column at which the tab occurred.\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownSpace(code) {\n  return code === -2 || code === -1 || code === 32;\n}\n\n// Size note: removing ASCII from the regex and using `asciiPunctuation` here\n// In fact adds to the bundle size.\n/**\n * Check whether the character code represents Unicode punctuation.\n *\n * A **Unicode punctuation** is a character in the Unicode `Pc` (Punctuation,\n * Connector), `Pd` (Punctuation, Dash), `Pe` (Punctuation, Close), `Pf`\n * (Punctuation, Final quote), `Pi` (Punctuation, Initial quote), `Po`\n * (Punctuation, Other), or `Ps` (Punctuation, Open) categories, or an ASCII\n * punctuation (see `asciiPunctuation`).\n *\n * See:\n * **\\[UNICODE]**:\n * [The Unicode Standard](https://www.unicode.org/versions/).\n * Unicode Consortium.\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const unicodePunctuation = regexCheck(/\\p{P}|\\p{S}/u);\n\n/**\n * Check whether the character code represents Unicode whitespace.\n *\n * Note that this does handle micromark specific markdown whitespace characters.\n * See `markdownLineEndingOrSpace` to check that.\n *\n * A **Unicode whitespace** is a character in the Unicode `Zs` (Separator,\n * Space) category, or U+0009 CHARACTER TABULATION (HT), U+000A LINE FEED (LF),\n * U+000C (FF), or U+000D CARRIAGE RETURN (CR) (**\\[UNICODE]**).\n *\n * See:\n * **\\[UNICODE]**:\n * [The Unicode Standard](https://www.unicode.org/versions/).\n * Unicode Consortium.\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const unicodeWhitespace = regexCheck(/\\s/);\n\n/**\n * Create a code check from a regex.\n *\n * @param {RegExp} regex\n *   Expression.\n * @returns {(code: Code) => boolean}\n *   Check.\n */\nfunction regexCheck(regex) {\n  return check;\n\n  /**\n   * Check whether a code matches the bound regex.\n   *\n   * @param {Code} code\n   *   Character code.\n   * @returns {boolean}\n   *   Whether the character code matches the bound regex.\n   */\n  function check(code) {\n    return code !== null && code > -1 && regex.test(String.fromCharCode(code));\n  }\n}","/**\n * @import {Effects, State, TokenType} from 'micromark-util-types'\n */\n\nimport { markdownSpace } from 'micromark-util-character';\n\n// To do: implement `spaceOrTab`, `spaceOrTabMinMax`, `spaceOrTabWithOptions`.\n\n/**\n * Parse spaces and tabs.\n *\n * There is no `nok` parameter:\n *\n * *   spaces in markdown are often optional, in which case this factory can be\n *     used and `ok` will be switched to whether spaces were found or not\n * *   one line ending or space can be detected with `markdownSpace(code)` right\n *     before using `factorySpace`\n *\n * ###### Examples\n *\n * Where `␉` represents a tab (plus how much it expands) and `␠` represents a\n * single space.\n *\n * ```markdown\n * ␉\n * ␠␠␠␠\n * ␉␠\n * ```\n *\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @param {TokenType} type\n *   Type (`' \\t'`).\n * @param {number | undefined} [max=Infinity]\n *   Max (exclusive).\n * @returns {State}\n *   Start state.\n */\nexport function factorySpace(effects, ok, type, max) {\n  const limit = max ? max - 1 : Number.POSITIVE_INFINITY;\n  let size = 0;\n  return start;\n\n  /** @type {State} */\n  function start(code) {\n    if (markdownSpace(code)) {\n      effects.enter(type);\n      return prefix(code);\n    }\n    return ok(code);\n  }\n\n  /** @type {State} */\n  function prefix(code) {\n    if (markdownSpace(code) && size++ < limit) {\n      effects.consume(code);\n      return prefix;\n    }\n    effects.exit(type);\n    return ok(code);\n  }\n}","/**\n * @import {\n *   InitialConstruct,\n *   Initializer,\n *   State,\n *   TokenizeContext,\n *   Token\n * } from 'micromark-util-types'\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding } from 'micromark-util-character';\n/** @type {InitialConstruct} */\nexport const content = {\n  tokenize: initializeContent\n};\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Initializer}\n *   Content.\n */\nfunction initializeContent(effects) {\n  const contentStart = effects.attempt(this.parser.constructs.contentInitial, afterContentStartConstruct, paragraphInitial);\n  /** @type {Token} */\n  let previous;\n  return contentStart;\n\n  /** @type {State} */\n  function afterContentStartConstruct(code) {\n    if (code === null) {\n      effects.consume(code);\n      return;\n    }\n    effects.enter(\"lineEnding\");\n    effects.consume(code);\n    effects.exit(\"lineEnding\");\n    return factorySpace(effects, contentStart, \"linePrefix\");\n  }\n\n  /** @type {State} */\n  function paragraphInitial(code) {\n    effects.enter(\"paragraph\");\n    return lineStart(code);\n  }\n\n  /** @type {State} */\n  function lineStart(code) {\n    const token = effects.enter(\"chunkText\", {\n      contentType: \"text\",\n      previous\n    });\n    if (previous) {\n      previous.next = token;\n    }\n    previous = token;\n    return data(code);\n  }\n\n  /** @type {State} */\n  function data(code) {\n    if (code === null) {\n      effects.exit(\"chunkText\");\n      effects.exit(\"paragraph\");\n      effects.consume(code);\n      return;\n    }\n    if (markdownLineEnding(code)) {\n      effects.consume(code);\n      effects.exit(\"chunkText\");\n      return lineStart;\n    }\n\n    // Data.\n    effects.consume(code);\n    return data;\n  }\n}","/**\n * @import {\n *   Construct,\n *   ContainerState,\n *   InitialConstruct,\n *   Initializer,\n *   Point,\n *   State,\n *   TokenizeContext,\n *   Tokenizer,\n *   Token\n * } from 'micromark-util-types'\n */\n\n/**\n * @typedef {[Construct, ContainerState]} StackItem\n *   Construct and its state.\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding } from 'micromark-util-character';\nimport { splice } from 'micromark-util-chunked';\n/** @type {InitialConstruct} */\nexport const document = {\n  tokenize: initializeDocument\n};\n\n/** @type {Construct} */\nconst containerConstruct = {\n  tokenize: tokenizeContainer\n};\n\n/**\n * @this {TokenizeContext}\n *   Self.\n * @type {Initializer}\n *   Initializer.\n */\nfunction initializeDocument(effects) {\n  const self = this;\n  /** @type {Array<StackItem>} */\n  const stack = [];\n  let continued = 0;\n  /** @type {TokenizeContext | undefined} */\n  let childFlow;\n  /** @type {Token | undefined} */\n  let childToken;\n  /** @type {number} */\n  let lineStartOffset;\n  return start;\n\n  /** @type {State} */\n  function start(code) {\n    // First we iterate through the open blocks, starting with the root\n    // document, and descending through last children down to the last open\n    // block.\n    // Each block imposes a condition that the line must satisfy if the block is\n    // to remain open.\n    // For example, a block quote requires a `>` character.\n    // A paragraph requires a non-blank line.\n    // In this phase we may match all or just some of the open blocks.\n    // But we cannot close unmatched blocks yet, because we may have a lazy\n    // continuation line.\n    if (continued < stack.length) {\n      const item = stack[continued];\n      self.containerState = item[1];\n      return effects.attempt(item[0].continuation, documentContinue, checkNewContainers)(code);\n    }\n\n    // Done.\n    return checkNewContainers(code);\n  }\n\n  /** @type {State} */\n  function documentContinue(code) {\n    continued++;\n\n    // Note: this field is called `_closeFlow` but it also closes containers.\n    // Perhaps a good idea to rename it but it’s already used in the wild by\n    // extensions.\n    if (self.containerState._closeFlow) {\n      self.containerState._closeFlow = undefined;\n      if (childFlow) {\n        closeFlow();\n      }\n\n      // Note: this algorithm for moving events around is similar to the\n      // algorithm when dealing with lazy lines in `writeToChild`.\n      const indexBeforeExits = self.events.length;\n      let indexBeforeFlow = indexBeforeExits;\n      /** @type {Point | undefined} */\n      let point;\n\n      // Find the flow chunk.\n      while (indexBeforeFlow--) {\n        if (self.events[indexBeforeFlow][0] === 'exit' && self.events[indexBeforeFlow][1].type === \"chunkFlow\") {\n          point = self.events[indexBeforeFlow][1].end;\n          break;\n        }\n      }\n      exitContainers(continued);\n\n      // Fix positions.\n      let index = indexBeforeExits;\n      while (index < self.events.length) {\n        self.events[index][1].end = {\n          ...point\n        };\n        index++;\n      }\n\n      // Inject the exits earlier (they’re still also at the end).\n      splice(self.events, indexBeforeFlow + 1, 0, self.events.slice(indexBeforeExits));\n\n      // Discard the duplicate exits.\n      self.events.length = index;\n      return checkNewContainers(code);\n    }\n    return start(code);\n  }\n\n  /** @type {State} */\n  function checkNewContainers(code) {\n    // Next, after consuming the continuation markers for existing blocks, we\n    // look for new block starts (e.g. `>` for a block quote).\n    // If we encounter a new block start, we close any blocks unmatched in\n    // step 1 before creating the new block as a child of the last matched\n    // block.\n    if (continued === stack.length) {\n      // No need to `check` whether there’s a container, of `exitContainers`\n      // would be moot.\n      // We can instead immediately `attempt` to parse one.\n      if (!childFlow) {\n        return documentContinued(code);\n      }\n\n      // If we have concrete content, such as block HTML or fenced code,\n      // we can’t have containers “pierce” into them, so we can immediately\n      // start.\n      if (childFlow.currentConstruct && childFlow.currentConstruct.concrete) {\n        return flowStart(code);\n      }\n\n      // If we do have flow, it could still be a blank line,\n      // but we’d be interrupting it w/ a new container if there’s a current\n      // construct.\n      // To do: next major: remove `_gfmTableDynamicInterruptHack` (no longer\n      // needed in micromark-extension-gfm-table@1.0.6).\n      self.interrupt = Boolean(childFlow.currentConstruct && !childFlow._gfmTableDynamicInterruptHack);\n    }\n\n    // Check if there is a new container.\n    self.containerState = {};\n    return effects.check(containerConstruct, thereIsANewContainer, thereIsNoNewContainer)(code);\n  }\n\n  /** @type {State} */\n  function thereIsANewContainer(code) {\n    if (childFlow) closeFlow();\n    exitContainers(continued);\n    return documentContinued(code);\n  }\n\n  /** @type {State} */\n  function thereIsNoNewContainer(code) {\n    self.parser.lazy[self.now().line] = continued !== stack.length;\n    lineStartOffset = self.now().offset;\n    return flowStart(code);\n  }\n\n  /** @type {State} */\n  function documentContinued(code) {\n    // Try new containers.\n    self.containerState = {};\n    return effects.attempt(containerConstruct, containerContinue, flowStart)(code);\n  }\n\n  /** @type {State} */\n  function containerContinue(code) {\n    continued++;\n    stack.push([self.currentConstruct, self.containerState]);\n    // Try another.\n    return documentContinued(code);\n  }\n\n  /** @type {State} */\n  function flowStart(code) {\n    if (code === null) {\n      if (childFlow) closeFlow();\n      exitContainers(0);\n      effects.consume(code);\n      return;\n    }\n    childFlow = childFlow || self.parser.flow(self.now());\n    effects.enter(\"chunkFlow\", {\n      _tokenizer: childFlow,\n      contentType: \"flow\",\n      previous: childToken\n    });\n    return flowContinue(code);\n  }\n\n  /** @type {State} */\n  function flowContinue(code) {\n    if (code === null) {\n      writeToChild(effects.exit(\"chunkFlow\"), true);\n      exitContainers(0);\n      effects.consume(code);\n      return;\n    }\n    if (markdownLineEnding(code)) {\n      effects.consume(code);\n      writeToChild(effects.exit(\"chunkFlow\"));\n      // Get ready for the next line.\n      continued = 0;\n      self.interrupt = undefined;\n      return start;\n    }\n    effects.consume(code);\n    return flowContinue;\n  }\n\n  /**\n   * @param {Token} token\n   *   Token.\n   * @param {boolean | undefined} [endOfFile]\n   *   Whether the token is at the end of the file (default: `false`).\n   * @returns {undefined}\n   *   Nothing.\n   */\n  function writeToChild(token, endOfFile) {\n    const stream = self.sliceStream(token);\n    if (endOfFile) stream.push(null);\n    token.previous = childToken;\n    if (childToken) childToken.next = token;\n    childToken = token;\n    childFlow.defineSkip(token.start);\n    childFlow.write(stream);\n\n    // Alright, so we just added a lazy line:\n    //\n    // ```markdown\n    // > a\n    // b.\n    //\n    // Or:\n    //\n    // > ~~~c\n    // d\n    //\n    // Or:\n    //\n    // > | e |\n    // f\n    // ```\n    //\n    // The construct in the second example (fenced code) does not accept lazy\n    // lines, so it marked itself as done at the end of its first line, and\n    // then the content construct parses `d`.\n    // Most constructs in markdown match on the first line: if the first line\n    // forms a construct, a non-lazy line can’t “unmake” it.\n    //\n    // The construct in the third example is potentially a GFM table, and\n    // those are *weird*.\n    // It *could* be a table, from the first line, if the following line\n    // matches a condition.\n    // In this case, that second line is lazy, which “unmakes” the first line\n    // and turns the whole into one content block.\n    //\n    // We’ve now parsed the non-lazy and the lazy line, and can figure out\n    // whether the lazy line started a new flow block.\n    // If it did, we exit the current containers between the two flow blocks.\n    if (self.parser.lazy[token.start.line]) {\n      let index = childFlow.events.length;\n      while (index--) {\n        if (\n        // The token starts before the line ending…\n        childFlow.events[index][1].start.offset < lineStartOffset && (\n        // …and either is not ended yet…\n        !childFlow.events[index][1].end ||\n        // …or ends after it.\n        childFlow.events[index][1].end.offset > lineStartOffset)) {\n          // Exit: there’s still something open, which means it’s a lazy line\n          // part of something.\n          return;\n        }\n      }\n\n      // Note: this algorithm for moving events around is similar to the\n      // algorithm when closing flow in `documentContinue`.\n      const indexBeforeExits = self.events.length;\n      let indexBeforeFlow = indexBeforeExits;\n      /** @type {boolean | undefined} */\n      let seen;\n      /** @type {Point | undefined} */\n      let point;\n\n      // Find the previous chunk (the one before the lazy line).\n      while (indexBeforeFlow--) {\n        if (self.events[indexBeforeFlow][0] === 'exit' && self.events[indexBeforeFlow][1].type === \"chunkFlow\") {\n          if (seen) {\n            point = self.events[indexBeforeFlow][1].end;\n            break;\n          }\n          seen = true;\n        }\n      }\n      exitContainers(continued);\n\n      // Fix positions.\n      index = indexBeforeExits;\n      while (index < self.events.length) {\n        self.events[index][1].end = {\n          ...point\n        };\n        index++;\n      }\n\n      // Inject the exits earlier (they’re still also at the end).\n      splice(self.events, indexBeforeFlow + 1, 0, self.events.slice(indexBeforeExits));\n\n      // Discard the duplicate exits.\n      self.events.length = index;\n    }\n  }\n\n  /**\n   * @param {number} size\n   *   Size.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  function exitContainers(size) {\n    let index = stack.length;\n\n    // Exit open containers.\n    while (index-- > size) {\n      const entry = stack[index];\n      self.containerState = entry[1];\n      entry[0].exit.call(self, effects);\n    }\n    stack.length = size;\n  }\n  function closeFlow() {\n    childFlow.write([null]);\n    childToken = undefined;\n    childFlow = undefined;\n    self.containerState._closeFlow = undefined;\n  }\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n *   Tokenizer.\n */\nfunction tokenizeContainer(effects, ok, nok) {\n  // Always populated by defaults.\n\n  return factorySpace(effects, effects.attempt(this.parser.constructs.document, ok, nok), \"linePrefix\", this.parser.constructs.disable.null.includes('codeIndented') ? undefined : 4);\n}","/**\n * @import {\n *   Construct,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding, markdownSpace } from 'micromark-util-character';\n/** @type {Construct} */\nexport const blankLine = {\n  partial: true,\n  tokenize: tokenizeBlankLine\n};\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeBlankLine(effects, ok, nok) {\n  return start;\n\n  /**\n   * Start of blank line.\n   *\n   * > 👉 **Note**: `␠` represents a space character.\n   *\n   * ```markdown\n   * > | ␠␠␊\n   *     ^\n   * > | ␊\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    return markdownSpace(code) ? factorySpace(effects, after, \"linePrefix\")(code) : after(code);\n  }\n\n  /**\n   * At eof/eol, after optional whitespace.\n   *\n   * > 👉 **Note**: `␠` represents a space character.\n   *\n   * ```markdown\n   * > | ␠␠␊\n   *       ^\n   * > | ␊\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    return code === null || markdownLineEnding(code) ? ok(code) : nok(code);\n  }\n}","/**\n * Some of the internal operations of micromark do lots of editing\n * operations on very large arrays. This runs into problems with two\n * properties of most circa-2020 JavaScript interpreters:\n *\n *  - Array-length modifications at the high end of an array (push/pop) are\n *    expected to be common and are implemented in (amortized) time\n *    proportional to the number of elements added or removed, whereas\n *    other operations (shift/unshift and splice) are much less efficient.\n *  - Function arguments are passed on the stack, so adding tens of thousands\n *    of elements to an array with `arr.push(...newElements)` will frequently\n *    cause stack overflows. (see <https://stackoverflow.com/questions/22123769/rangeerror-maximum-call-stack-size-exceeded-why>)\n *\n * SpliceBuffers are an implementation of gap buffers, which are a\n * generalization of the \"queue made of two stacks\" idea. The splice buffer\n * maintains a cursor, and moving the cursor has cost proportional to the\n * distance the cursor moves, but inserting, deleting, or splicing in\n * new information at the cursor is as efficient as the push/pop operation.\n * This allows for an efficient sequence of splices (or pushes, pops, shifts,\n * or unshifts) as long such edits happen at the same part of the array or\n * generally sweep through the array from the beginning to the end.\n *\n * The interface for splice buffers also supports large numbers of inputs by\n * passing a single array argument rather passing multiple arguments on the\n * function call stack.\n *\n * @template T\n *   Item type.\n */\nexport class SpliceBuffer {\n  /**\n   * @param {ReadonlyArray<T> | null | undefined} [initial]\n   *   Initial items (optional).\n   * @returns\n   *   Splice buffer.\n   */\n  constructor(initial) {\n    /** @type {Array<T>} */\n    this.left = initial ? [...initial] : [];\n    /** @type {Array<T>} */\n    this.right = [];\n  }\n\n  /**\n   * Array access;\n   * does not move the cursor.\n   *\n   * @param {number} index\n   *   Index.\n   * @return {T}\n   *   Item.\n   */\n  get(index) {\n    if (index < 0 || index >= this.left.length + this.right.length) {\n      throw new RangeError('Cannot access index `' + index + '` in a splice buffer of size `' + (this.left.length + this.right.length) + '`');\n    }\n    if (index < this.left.length) return this.left[index];\n    return this.right[this.right.length - index + this.left.length - 1];\n  }\n\n  /**\n   * The length of the splice buffer, one greater than the largest index in the\n   * array.\n   */\n  get length() {\n    return this.left.length + this.right.length;\n  }\n\n  /**\n   * Remove and return `list[0]`;\n   * moves the cursor to `0`.\n   *\n   * @returns {T | undefined}\n   *   Item, optional.\n   */\n  shift() {\n    this.setCursor(0);\n    return this.right.pop();\n  }\n\n  /**\n   * Slice the buffer to get an array;\n   * does not move the cursor.\n   *\n   * @param {number} start\n   *   Start.\n   * @param {number | null | undefined} [end]\n   *   End (optional).\n   * @returns {Array<T>}\n   *   Array of items.\n   */\n  slice(start, end) {\n    /** @type {number} */\n    const stop = end === null || end === undefined ? Number.POSITIVE_INFINITY : end;\n    if (stop < this.left.length) {\n      return this.left.slice(start, stop);\n    }\n    if (start > this.left.length) {\n      return this.right.slice(this.right.length - stop + this.left.length, this.right.length - start + this.left.length).reverse();\n    }\n    return this.left.slice(start).concat(this.right.slice(this.right.length - stop + this.left.length).reverse());\n  }\n\n  /**\n   * Mimics the behavior of Array.prototype.splice() except for the change of\n   * interface necessary to avoid segfaults when patching in very large arrays.\n   *\n   * This operation moves cursor is moved to `start` and results in the cursor\n   * placed after any inserted items.\n   *\n   * @param {number} start\n   *   Start;\n   *   zero-based index at which to start changing the array;\n   *   negative numbers count backwards from the end of the array and values\n   *   that are out-of bounds are clamped to the appropriate end of the array.\n   * @param {number | null | undefined} [deleteCount=0]\n   *   Delete count (default: `0`);\n   *   maximum number of elements to delete, starting from start.\n   * @param {Array<T> | null | undefined} [items=[]]\n   *   Items to include in place of the deleted items (default: `[]`).\n   * @return {Array<T>}\n   *   Any removed items.\n   */\n  splice(start, deleteCount, items) {\n    /** @type {number} */\n    const count = deleteCount || 0;\n    this.setCursor(Math.trunc(start));\n    const removed = this.right.splice(this.right.length - count, Number.POSITIVE_INFINITY);\n    if (items) chunkedPush(this.left, items);\n    return removed.reverse();\n  }\n\n  /**\n   * Remove and return the highest-numbered item in the array, so\n   * `list[list.length - 1]`;\n   * Moves the cursor to `length`.\n   *\n   * @returns {T | undefined}\n   *   Item, optional.\n   */\n  pop() {\n    this.setCursor(Number.POSITIVE_INFINITY);\n    return this.left.pop();\n  }\n\n  /**\n   * Inserts a single item to the high-numbered side of the array;\n   * moves the cursor to `length`.\n   *\n   * @param {T} item\n   *   Item.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  push(item) {\n    this.setCursor(Number.POSITIVE_INFINITY);\n    this.left.push(item);\n  }\n\n  /**\n   * Inserts many items to the high-numbered side of the array.\n   * Moves the cursor to `length`.\n   *\n   * @param {Array<T>} items\n   *   Items.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  pushMany(items) {\n    this.setCursor(Number.POSITIVE_INFINITY);\n    chunkedPush(this.left, items);\n  }\n\n  /**\n   * Inserts a single item to the low-numbered side of the array;\n   * Moves the cursor to `0`.\n   *\n   * @param {T} item\n   *   Item.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  unshift(item) {\n    this.setCursor(0);\n    this.right.push(item);\n  }\n\n  /**\n   * Inserts many items to the low-numbered side of the array;\n   * moves the cursor to `0`.\n   *\n   * @param {Array<T>} items\n   *   Items.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  unshiftMany(items) {\n    this.setCursor(0);\n    chunkedPush(this.right, items.reverse());\n  }\n\n  /**\n   * Move the cursor to a specific position in the array. Requires\n   * time proportional to the distance moved.\n   *\n   * If `n < 0`, the cursor will end up at the beginning.\n   * If `n > length`, the cursor will end up at the end.\n   *\n   * @param {number} n\n   *   Position.\n   * @return {undefined}\n   *   Nothing.\n   */\n  setCursor(n) {\n    if (n === this.left.length || n > this.left.length && this.right.length === 0 || n < 0 && this.left.length === 0) return;\n    if (n < this.left.length) {\n      // Move cursor to the this.left\n      const removed = this.left.splice(n, Number.POSITIVE_INFINITY);\n      chunkedPush(this.right, removed.reverse());\n    } else {\n      // Move cursor to the this.right\n      const removed = this.right.splice(this.left.length + this.right.length - n, Number.POSITIVE_INFINITY);\n      chunkedPush(this.left, removed.reverse());\n    }\n  }\n}\n\n/**\n * Avoid stack overflow by pushing items onto the stack in segments\n *\n * @template T\n *   Item type.\n * @param {Array<T>} list\n *   List to inject into.\n * @param {ReadonlyArray<T>} right\n *   Items to inject.\n * @return {undefined}\n *   Nothing.\n */\nfunction chunkedPush(list, right) {\n  /** @type {number} */\n  let chunkStart = 0;\n  if (right.length < 10000) {\n    list.push(...right);\n  } else {\n    while (chunkStart < right.length) {\n      list.push(...right.slice(chunkStart, chunkStart + 10000));\n      chunkStart += 10000;\n    }\n  }\n}","/**\n * @import {Chunk, Event, Token} from 'micromark-util-types'\n */\n\nimport { splice } from 'micromark-util-chunked';\nimport { SpliceBuffer } from './lib/splice-buffer.js';\n\n// Hidden API exposed for testing.\nexport { SpliceBuffer } from './lib/splice-buffer.js';\n\n/**\n * Tokenize subcontent.\n *\n * @param {Array<Event>} eventsArray\n *   List of events.\n * @returns {boolean}\n *   Whether subtokens were found.\n */\n// eslint-disable-next-line complexity\nexport function subtokenize(eventsArray) {\n  /** @type {Record<string, number>} */\n  const jumps = {};\n  let index = -1;\n  /** @type {Event} */\n  let event;\n  /** @type {number | undefined} */\n  let lineIndex;\n  /** @type {number} */\n  let otherIndex;\n  /** @type {Event} */\n  let otherEvent;\n  /** @type {Array<Event>} */\n  let parameters;\n  /** @type {Array<Event>} */\n  let subevents;\n  /** @type {boolean | undefined} */\n  let more;\n  const events = new SpliceBuffer(eventsArray);\n  while (++index < events.length) {\n    while (index in jumps) {\n      index = jumps[index];\n    }\n    event = events.get(index);\n\n    // Add a hook for the GFM tasklist extension, which needs to know if text\n    // is in the first content of a list item.\n    if (index && event[1].type === \"chunkFlow\" && events.get(index - 1)[1].type === \"listItemPrefix\") {\n      subevents = event[1]._tokenizer.events;\n      otherIndex = 0;\n      if (otherIndex < subevents.length && subevents[otherIndex][1].type === \"lineEndingBlank\") {\n        otherIndex += 2;\n      }\n      if (otherIndex < subevents.length && subevents[otherIndex][1].type === \"content\") {\n        while (++otherIndex < subevents.length) {\n          if (subevents[otherIndex][1].type === \"content\") {\n            break;\n          }\n          if (subevents[otherIndex][1].type === \"chunkText\") {\n            subevents[otherIndex][1]._isInFirstContentOfListItem = true;\n            otherIndex++;\n          }\n        }\n      }\n    }\n\n    // Enter.\n    if (event[0] === 'enter') {\n      if (event[1].contentType) {\n        Object.assign(jumps, subcontent(events, index));\n        index = jumps[index];\n        more = true;\n      }\n    }\n    // Exit.\n    else if (event[1]._container) {\n      otherIndex = index;\n      lineIndex = undefined;\n      while (otherIndex--) {\n        otherEvent = events.get(otherIndex);\n        if (otherEvent[1].type === \"lineEnding\" || otherEvent[1].type === \"lineEndingBlank\") {\n          if (otherEvent[0] === 'enter') {\n            if (lineIndex) {\n              events.get(lineIndex)[1].type = \"lineEndingBlank\";\n            }\n            otherEvent[1].type = \"lineEnding\";\n            lineIndex = otherIndex;\n          }\n        } else if (otherEvent[1].type === \"linePrefix\" || otherEvent[1].type === \"listItemIndent\") {\n          // Move past.\n        } else {\n          break;\n        }\n      }\n      if (lineIndex) {\n        // Fix position.\n        event[1].end = {\n          ...events.get(lineIndex)[1].start\n        };\n\n        // Switch container exit w/ line endings.\n        parameters = events.slice(lineIndex, index);\n        parameters.unshift(event);\n        events.splice(lineIndex, index - lineIndex + 1, parameters);\n      }\n    }\n  }\n\n  // The changes to the `events` buffer must be copied back into the eventsArray\n  splice(eventsArray, 0, Number.POSITIVE_INFINITY, events.slice(0));\n  return !more;\n}\n\n/**\n * Tokenize embedded tokens.\n *\n * @param {SpliceBuffer<Event>} events\n *   Events.\n * @param {number} eventIndex\n *   Index.\n * @returns {Record<string, number>}\n *   Gaps.\n */\nfunction subcontent(events, eventIndex) {\n  const token = events.get(eventIndex)[1];\n  const context = events.get(eventIndex)[2];\n  let startPosition = eventIndex - 1;\n  /** @type {Array<number>} */\n  const startPositions = [];\n  let tokenizer = token._tokenizer;\n  if (!tokenizer) {\n    tokenizer = context.parser[token.contentType](token.start);\n    if (token._contentTypeTextTrailing) {\n      tokenizer._contentTypeTextTrailing = true;\n    }\n  }\n  const childEvents = tokenizer.events;\n  /** @type {Array<[number, number]>} */\n  const jumps = [];\n  /** @type {Record<string, number>} */\n  const gaps = {};\n  /** @type {Array<Chunk>} */\n  let stream;\n  /** @type {Token | undefined} */\n  let previous;\n  let index = -1;\n  /** @type {Token | undefined} */\n  let current = token;\n  let adjust = 0;\n  let start = 0;\n  const breaks = [start];\n\n  // Loop forward through the linked tokens to pass them in order to the\n  // subtokenizer.\n  while (current) {\n    // Find the position of the event for this token.\n    while (events.get(++startPosition)[1] !== current) {\n      // Empty.\n    }\n    startPositions.push(startPosition);\n    if (!current._tokenizer) {\n      stream = context.sliceStream(current);\n      if (!current.next) {\n        stream.push(null);\n      }\n      if (previous) {\n        tokenizer.defineSkip(current.start);\n      }\n      if (current._isInFirstContentOfListItem) {\n        tokenizer._gfmTasklistFirstContentOfListItem = true;\n      }\n      tokenizer.write(stream);\n      if (current._isInFirstContentOfListItem) {\n        tokenizer._gfmTasklistFirstContentOfListItem = undefined;\n      }\n    }\n\n    // Unravel the next token.\n    previous = current;\n    current = current.next;\n  }\n\n  // Now, loop back through all events (and linked tokens), to figure out which\n  // parts belong where.\n  current = token;\n  while (++index < childEvents.length) {\n    if (\n    // Find a void token that includes a break.\n    childEvents[index][0] === 'exit' && childEvents[index - 1][0] === 'enter' && childEvents[index][1].type === childEvents[index - 1][1].type && childEvents[index][1].start.line !== childEvents[index][1].end.line) {\n      start = index + 1;\n      breaks.push(start);\n      // Help GC.\n      current._tokenizer = undefined;\n      current.previous = undefined;\n      current = current.next;\n    }\n  }\n\n  // Help GC.\n  tokenizer.events = [];\n\n  // If there’s one more token (which is the cases for lines that end in an\n  // EOF), that’s perfect: the last point we found starts it.\n  // If there isn’t then make sure any remaining content is added to it.\n  if (current) {\n    // Help GC.\n    current._tokenizer = undefined;\n    current.previous = undefined;\n  } else {\n    breaks.pop();\n  }\n\n  // Now splice the events from the subtokenizer into the current events,\n  // moving back to front so that splice indices aren’t affected.\n  index = breaks.length;\n  while (index--) {\n    const slice = childEvents.slice(breaks[index], breaks[index + 1]);\n    const start = startPositions.pop();\n    jumps.push([start, start + slice.length - 1]);\n    events.splice(start, 2, slice);\n  }\n  jumps.reverse();\n  index = -1;\n  while (++index < jumps.length) {\n    gaps[adjust + jumps[index][0]] = adjust + jumps[index][1];\n    adjust += jumps[index][1] - jumps[index][0] - 1;\n  }\n  return gaps;\n}","/**\n * @import {\n *   Construct,\n *   Resolver,\n *   State,\n *   TokenizeContext,\n *   Tokenizer,\n *   Token\n * } from 'micromark-util-types'\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding } from 'micromark-util-character';\nimport { subtokenize } from 'micromark-util-subtokenize';\n/**\n * No name because it must not be turned off.\n * @type {Construct}\n */\nexport const content = {\n  resolve: resolveContent,\n  tokenize: tokenizeContent\n};\n\n/** @type {Construct} */\nconst continuationConstruct = {\n  partial: true,\n  tokenize: tokenizeContinuation\n};\n\n/**\n * Content is transparent: it’s parsed right now. That way, definitions are also\n * parsed right now: before text in paragraphs (specifically, media) are parsed.\n *\n * @type {Resolver}\n */\nfunction resolveContent(events) {\n  subtokenize(events);\n  return events;\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeContent(effects, ok) {\n  /** @type {Token | undefined} */\n  let previous;\n  return chunkStart;\n\n  /**\n   * Before a content chunk.\n   *\n   * ```markdown\n   * > | abc\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function chunkStart(code) {\n    effects.enter(\"content\");\n    previous = effects.enter(\"chunkContent\", {\n      contentType: \"content\"\n    });\n    return chunkInside(code);\n  }\n\n  /**\n   * In a content chunk.\n   *\n   * ```markdown\n   * > | abc\n   *     ^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function chunkInside(code) {\n    if (code === null) {\n      return contentEnd(code);\n    }\n\n    // To do: in `markdown-rs`, each line is parsed on its own, and everything\n    // is stitched together resolving.\n    if (markdownLineEnding(code)) {\n      return effects.check(continuationConstruct, contentContinue, contentEnd)(code);\n    }\n\n    // Data.\n    effects.consume(code);\n    return chunkInside;\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function contentEnd(code) {\n    effects.exit(\"chunkContent\");\n    effects.exit(\"content\");\n    return ok(code);\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function contentContinue(code) {\n    effects.consume(code);\n    effects.exit(\"chunkContent\");\n    previous.next = effects.enter(\"chunkContent\", {\n      contentType: \"content\",\n      previous\n    });\n    previous = previous.next;\n    return chunkInside;\n  }\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeContinuation(effects, ok, nok) {\n  const self = this;\n  return startLookahead;\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function startLookahead(code) {\n    effects.exit(\"chunkContent\");\n    effects.enter(\"lineEnding\");\n    effects.consume(code);\n    effects.exit(\"lineEnding\");\n    return factorySpace(effects, prefixed, \"linePrefix\");\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function prefixed(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return nok(code);\n    }\n\n    // Always populated by defaults.\n\n    const tail = self.events[self.events.length - 1];\n    if (!self.parser.constructs.disable.null.includes('codeIndented') && tail && tail[1].type === \"linePrefix\" && tail[2].sliceSerialize(tail[1], true).length >= 4) {\n      return ok(code);\n    }\n    return effects.interrupt(self.parser.constructs.flow, nok, ok)(code);\n  }\n}","/**\n * @import {\n *   InitialConstruct,\n *   Initializer,\n *   State,\n *   TokenizeContext\n * } from 'micromark-util-types'\n */\n\nimport { blankLine, content } from 'micromark-core-commonmark';\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding } from 'micromark-util-character';\n/** @type {InitialConstruct} */\nexport const flow = {\n  tokenize: initializeFlow\n};\n\n/**\n * @this {TokenizeContext}\n *   Self.\n * @type {Initializer}\n *   Initializer.\n */\nfunction initializeFlow(effects) {\n  const self = this;\n  const initial = effects.attempt(\n  // Try to parse a blank line.\n  blankLine, atBlankEnding,\n  // Try to parse initial flow (essentially, only code).\n  effects.attempt(this.parser.constructs.flowInitial, afterConstruct, factorySpace(effects, effects.attempt(this.parser.constructs.flow, afterConstruct, effects.attempt(content, afterConstruct)), \"linePrefix\")));\n  return initial;\n\n  /** @type {State} */\n  function atBlankEnding(code) {\n    if (code === null) {\n      effects.consume(code);\n      return;\n    }\n    effects.enter(\"lineEndingBlank\");\n    effects.consume(code);\n    effects.exit(\"lineEndingBlank\");\n    self.currentConstruct = undefined;\n    return initial;\n  }\n\n  /** @type {State} */\n  function afterConstruct(code) {\n    if (code === null) {\n      effects.consume(code);\n      return;\n    }\n    effects.enter(\"lineEnding\");\n    effects.consume(code);\n    effects.exit(\"lineEnding\");\n    self.currentConstruct = undefined;\n    return initial;\n  }\n}","/**\n * @import {\n *   Code,\n *   InitialConstruct,\n *   Initializer,\n *   Resolver,\n *   State,\n *   TokenizeContext\n * } from 'micromark-util-types'\n */\n\nexport const resolver = {\n  resolveAll: createResolver()\n};\nexport const string = initializeFactory('string');\nexport const text = initializeFactory('text');\n\n/**\n * @param {'string' | 'text'} field\n *   Field.\n * @returns {InitialConstruct}\n *   Construct.\n */\nfunction initializeFactory(field) {\n  return {\n    resolveAll: createResolver(field === 'text' ? resolveAllLineSuffixes : undefined),\n    tokenize: initializeText\n  };\n\n  /**\n   * @this {TokenizeContext}\n   *   Context.\n   * @type {Initializer}\n   */\n  function initializeText(effects) {\n    const self = this;\n    const constructs = this.parser.constructs[field];\n    const text = effects.attempt(constructs, start, notText);\n    return start;\n\n    /** @type {State} */\n    function start(code) {\n      return atBreak(code) ? text(code) : notText(code);\n    }\n\n    /** @type {State} */\n    function notText(code) {\n      if (code === null) {\n        effects.consume(code);\n        return;\n      }\n      effects.enter(\"data\");\n      effects.consume(code);\n      return data;\n    }\n\n    /** @type {State} */\n    function data(code) {\n      if (atBreak(code)) {\n        effects.exit(\"data\");\n        return text(code);\n      }\n\n      // Data.\n      effects.consume(code);\n      return data;\n    }\n\n    /**\n     * @param {Code} code\n     *   Code.\n     * @returns {boolean}\n     *   Whether the code is a break.\n     */\n    function atBreak(code) {\n      if (code === null) {\n        return true;\n      }\n      const list = constructs[code];\n      let index = -1;\n      if (list) {\n        // Always populated by defaults.\n\n        while (++index < list.length) {\n          const item = list[index];\n          if (!item.previous || item.previous.call(self, self.previous)) {\n            return true;\n          }\n        }\n      }\n      return false;\n    }\n  }\n}\n\n/**\n * @param {Resolver | undefined} [extraResolver]\n *   Resolver.\n * @returns {Resolver}\n *   Resolver.\n */\nfunction createResolver(extraResolver) {\n  return resolveAllText;\n\n  /** @type {Resolver} */\n  function resolveAllText(events, context) {\n    let index = -1;\n    /** @type {number | undefined} */\n    let enter;\n\n    // A rather boring computation (to merge adjacent `data` events) which\n    // improves mm performance by 29%.\n    while (++index <= events.length) {\n      if (enter === undefined) {\n        if (events[index] && events[index][1].type === \"data\") {\n          enter = index;\n          index++;\n        }\n      } else if (!events[index] || events[index][1].type !== \"data\") {\n        // Don’t do anything if there is one data token.\n        if (index !== enter + 2) {\n          events[enter][1].end = events[index - 1][1].end;\n          events.splice(enter + 2, index - enter - 2);\n          index = enter + 2;\n        }\n        enter = undefined;\n      }\n    }\n    return extraResolver ? extraResolver(events, context) : events;\n  }\n}\n\n/**\n * A rather ugly set of instructions which again looks at chunks in the input\n * stream.\n * The reason to do this here is that it is *much* faster to parse in reverse.\n * And that we can’t hook into `null` to split the line suffix before an EOF.\n * To do: figure out if we can make this into a clean utility, or even in core.\n * As it will be useful for GFMs literal autolink extension (and maybe even\n * tables?)\n *\n * @type {Resolver}\n */\nfunction resolveAllLineSuffixes(events, context) {\n  let eventIndex = 0; // Skip first.\n\n  while (++eventIndex <= events.length) {\n    if ((eventIndex === events.length || events[eventIndex][1].type === \"lineEnding\") && events[eventIndex - 1][1].type === \"data\") {\n      const data = events[eventIndex - 1][1];\n      const chunks = context.sliceStream(data);\n      let index = chunks.length;\n      let bufferIndex = -1;\n      let size = 0;\n      /** @type {boolean | undefined} */\n      let tabs;\n      while (index--) {\n        const chunk = chunks[index];\n        if (typeof chunk === 'string') {\n          bufferIndex = chunk.length;\n          while (chunk.charCodeAt(bufferIndex - 1) === 32) {\n            size++;\n            bufferIndex--;\n          }\n          if (bufferIndex) break;\n          bufferIndex = -1;\n        }\n        // Number\n        else if (chunk === -2) {\n          tabs = true;\n          size++;\n        } else if (chunk === -1) {\n          // Empty\n        } else {\n          // Replacement character, exit.\n          index++;\n          break;\n        }\n      }\n\n      // Allow final trailing whitespace.\n      if (context._contentTypeTextTrailing && eventIndex === events.length) {\n        size = 0;\n      }\n      if (size) {\n        const token = {\n          type: eventIndex === events.length || tabs || size < 2 ? \"lineSuffix\" : \"hardBreakTrailing\",\n          start: {\n            _bufferIndex: index ? bufferIndex : data.start._bufferIndex + bufferIndex,\n            _index: data.start._index + index,\n            line: data.end.line,\n            column: data.end.column - size,\n            offset: data.end.offset - size\n          },\n          end: {\n            ...data.end\n          }\n        };\n        data.end = {\n          ...token.start\n        };\n        if (data.start.offset === data.end.offset) {\n          Object.assign(data, token);\n        } else {\n          events.splice(eventIndex, 0, ['enter', token, context], ['exit', token, context]);\n          eventIndex += 2;\n        }\n      }\n      eventIndex++;\n    }\n  }\n  return events;\n}","/**\n * @import {Code} from 'micromark-util-types'\n */\n\nimport { markdownLineEndingOrSpace, unicodePunctuation, unicodeWhitespace } from 'micromark-util-character';\n/**\n * Classify whether a code represents whitespace, punctuation, or something\n * else.\n *\n * Used for attention (emphasis, strong), whose sequences can open or close\n * based on the class of surrounding characters.\n *\n * > 👉 **Note**: eof (`null`) is seen as whitespace.\n *\n * @param {Code} code\n *   Code.\n * @returns {typeof constants.characterGroupWhitespace | typeof constants.characterGroupPunctuation | undefined}\n *   Group.\n */\nexport function classifyCharacter(code) {\n  if (code === null || markdownLineEndingOrSpace(code) || unicodeWhitespace(code)) {\n    return 1;\n  }\n  if (unicodePunctuation(code)) {\n    return 2;\n  }\n}","/**\n * @import {Event, Resolver, TokenizeContext} from 'micromark-util-types'\n */\n\n/**\n * Call all `resolveAll`s.\n *\n * @param {ReadonlyArray<{resolveAll?: Resolver | undefined}>} constructs\n *   List of constructs, optionally with `resolveAll`s.\n * @param {Array<Event>} events\n *   List of events.\n * @param {TokenizeContext} context\n *   Context used by `tokenize`.\n * @returns {Array<Event>}\n *   Changed events.\n */\nexport function resolveAll(constructs, events, context) {\n  /** @type {Array<Resolver>} */\n  const called = []\n  let index = -1\n\n  while (++index < constructs.length) {\n    const resolve = constructs[index].resolveAll\n\n    if (resolve && !called.includes(resolve)) {\n      events = resolve(events, context)\n      called.push(resolve)\n    }\n  }\n\n  return events\n}\n","/**\n * @import {\n *   Code,\n *   Construct,\n *   Event,\n *   Point,\n *   Resolver,\n *   State,\n *   TokenizeContext,\n *   Tokenizer,\n *   Token\n * } from 'micromark-util-types'\n */\n\nimport { push, splice } from 'micromark-util-chunked';\nimport { classifyCharacter } from 'micromark-util-classify-character';\nimport { resolveAll } from 'micromark-util-resolve-all';\n/** @type {Construct} */\nexport const attention = {\n  name: 'attention',\n  resolveAll: resolveAllAttention,\n  tokenize: tokenizeAttention\n};\n\n/**\n * Take all events and resolve attention to emphasis or strong.\n *\n * @type {Resolver}\n */\n// eslint-disable-next-line complexity\nfunction resolveAllAttention(events, context) {\n  let index = -1;\n  /** @type {number} */\n  let open;\n  /** @type {Token} */\n  let group;\n  /** @type {Token} */\n  let text;\n  /** @type {Token} */\n  let openingSequence;\n  /** @type {Token} */\n  let closingSequence;\n  /** @type {number} */\n  let use;\n  /** @type {Array<Event>} */\n  let nextEvents;\n  /** @type {number} */\n  let offset;\n\n  // Walk through all events.\n  //\n  // Note: performance of this is fine on an mb of normal markdown, but it’s\n  // a bottleneck for malicious stuff.\n  while (++index < events.length) {\n    // Find a token that can close.\n    if (events[index][0] === 'enter' && events[index][1].type === 'attentionSequence' && events[index][1]._close) {\n      open = index;\n\n      // Now walk back to find an opener.\n      while (open--) {\n        // Find a token that can open the closer.\n        if (events[open][0] === 'exit' && events[open][1].type === 'attentionSequence' && events[open][1]._open &&\n        // If the markers are the same:\n        context.sliceSerialize(events[open][1]).charCodeAt(0) === context.sliceSerialize(events[index][1]).charCodeAt(0)) {\n          // If the opening can close or the closing can open,\n          // and the close size *is not* a multiple of three,\n          // but the sum of the opening and closing size *is* multiple of three,\n          // then don’t match.\n          if ((events[open][1]._close || events[index][1]._open) && (events[index][1].end.offset - events[index][1].start.offset) % 3 && !((events[open][1].end.offset - events[open][1].start.offset + events[index][1].end.offset - events[index][1].start.offset) % 3)) {\n            continue;\n          }\n\n          // Number of markers to use from the sequence.\n          use = events[open][1].end.offset - events[open][1].start.offset > 1 && events[index][1].end.offset - events[index][1].start.offset > 1 ? 2 : 1;\n          const start = {\n            ...events[open][1].end\n          };\n          const end = {\n            ...events[index][1].start\n          };\n          movePoint(start, -use);\n          movePoint(end, use);\n          openingSequence = {\n            type: use > 1 ? \"strongSequence\" : \"emphasisSequence\",\n            start,\n            end: {\n              ...events[open][1].end\n            }\n          };\n          closingSequence = {\n            type: use > 1 ? \"strongSequence\" : \"emphasisSequence\",\n            start: {\n              ...events[index][1].start\n            },\n            end\n          };\n          text = {\n            type: use > 1 ? \"strongText\" : \"emphasisText\",\n            start: {\n              ...events[open][1].end\n            },\n            end: {\n              ...events[index][1].start\n            }\n          };\n          group = {\n            type: use > 1 ? \"strong\" : \"emphasis\",\n            start: {\n              ...openingSequence.start\n            },\n            end: {\n              ...closingSequence.end\n            }\n          };\n          events[open][1].end = {\n            ...openingSequence.start\n          };\n          events[index][1].start = {\n            ...closingSequence.end\n          };\n          nextEvents = [];\n\n          // If there are more markers in the opening, add them before.\n          if (events[open][1].end.offset - events[open][1].start.offset) {\n            nextEvents = push(nextEvents, [['enter', events[open][1], context], ['exit', events[open][1], context]]);\n          }\n\n          // Opening.\n          nextEvents = push(nextEvents, [['enter', group, context], ['enter', openingSequence, context], ['exit', openingSequence, context], ['enter', text, context]]);\n\n          // Always populated by defaults.\n\n          // Between.\n          nextEvents = push(nextEvents, resolveAll(context.parser.constructs.insideSpan.null, events.slice(open + 1, index), context));\n\n          // Closing.\n          nextEvents = push(nextEvents, [['exit', text, context], ['enter', closingSequence, context], ['exit', closingSequence, context], ['exit', group, context]]);\n\n          // If there are more markers in the closing, add them after.\n          if (events[index][1].end.offset - events[index][1].start.offset) {\n            offset = 2;\n            nextEvents = push(nextEvents, [['enter', events[index][1], context], ['exit', events[index][1], context]]);\n          } else {\n            offset = 0;\n          }\n          splice(events, open - 1, index - open + 3, nextEvents);\n          index = open + nextEvents.length - offset - 2;\n          break;\n        }\n      }\n    }\n  }\n\n  // Remove remaining sequences.\n  index = -1;\n  while (++index < events.length) {\n    if (events[index][1].type === 'attentionSequence') {\n      events[index][1].type = 'data';\n    }\n  }\n  return events;\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeAttention(effects, ok) {\n  const attentionMarkers = this.parser.constructs.attentionMarkers.null;\n  const previous = this.previous;\n  const before = classifyCharacter(previous);\n\n  /** @type {NonNullable<Code>} */\n  let marker;\n  return start;\n\n  /**\n   * Before a sequence.\n   *\n   * ```markdown\n   * > | **\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    marker = code;\n    effects.enter('attentionSequence');\n    return inside(code);\n  }\n\n  /**\n   * In a sequence.\n   *\n   * ```markdown\n   * > | **\n   *     ^^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    if (code === marker) {\n      effects.consume(code);\n      return inside;\n    }\n    const token = effects.exit('attentionSequence');\n\n    // To do: next major: move this to resolver, just like `markdown-rs`.\n    const after = classifyCharacter(code);\n\n    // Always populated by defaults.\n\n    const open = !after || after === 2 && before || attentionMarkers.includes(code);\n    const close = !before || before === 2 && after || attentionMarkers.includes(previous);\n    token._open = Boolean(marker === 42 ? open : open && (before || !close));\n    token._close = Boolean(marker === 42 ? close : close && (after || !open));\n    return ok(code);\n  }\n}\n\n/**\n * Move a point a bit.\n *\n * Note: `move` only works inside lines! It’s not possible to move past other\n * chunks (replacement characters, tabs, or line endings).\n *\n * @param {Point} point\n *   Point.\n * @param {number} offset\n *   Amount to move.\n * @returns {undefined}\n *   Nothing.\n */\nfunction movePoint(point, offset) {\n  point.column += offset;\n  point.offset += offset;\n  point._bufferIndex += offset;\n}","/**\n * @import {\n *   Construct,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { asciiAlphanumeric, asciiAlpha, asciiAtext, asciiControl } from 'micromark-util-character';\n/** @type {Construct} */\nexport const autolink = {\n  name: 'autolink',\n  tokenize: tokenizeAutolink\n};\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeAutolink(effects, ok, nok) {\n  let size = 0;\n  return start;\n\n  /**\n   * Start of an autolink.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *      ^\n   * > | a<user@example.com>b\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(\"autolink\");\n    effects.enter(\"autolinkMarker\");\n    effects.consume(code);\n    effects.exit(\"autolinkMarker\");\n    effects.enter(\"autolinkProtocol\");\n    return open;\n  }\n\n  /**\n   * After `<`, at protocol or atext.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *       ^\n   * > | a<user@example.com>b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (asciiAlpha(code)) {\n      effects.consume(code);\n      return schemeOrEmailAtext;\n    }\n    if (code === 64) {\n      return nok(code);\n    }\n    return emailAtext(code);\n  }\n\n  /**\n   * At second byte of protocol or atext.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *        ^\n   * > | a<user@example.com>b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function schemeOrEmailAtext(code) {\n    // ASCII alphanumeric and `+`, `-`, and `.`.\n    if (code === 43 || code === 45 || code === 46 || asciiAlphanumeric(code)) {\n      // Count the previous alphabetical from `open` too.\n      size = 1;\n      return schemeInsideOrEmailAtext(code);\n    }\n    return emailAtext(code);\n  }\n\n  /**\n   * In ambiguous protocol or atext.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *        ^\n   * > | a<user@example.com>b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function schemeInsideOrEmailAtext(code) {\n    if (code === 58) {\n      effects.consume(code);\n      size = 0;\n      return urlInside;\n    }\n\n    // ASCII alphanumeric and `+`, `-`, and `.`.\n    if ((code === 43 || code === 45 || code === 46 || asciiAlphanumeric(code)) && size++ < 32) {\n      effects.consume(code);\n      return schemeInsideOrEmailAtext;\n    }\n    size = 0;\n    return emailAtext(code);\n  }\n\n  /**\n   * After protocol, in URL.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function urlInside(code) {\n    if (code === 62) {\n      effects.exit(\"autolinkProtocol\");\n      effects.enter(\"autolinkMarker\");\n      effects.consume(code);\n      effects.exit(\"autolinkMarker\");\n      effects.exit(\"autolink\");\n      return ok;\n    }\n\n    // ASCII control, space, or `<`.\n    if (code === null || code === 32 || code === 60 || asciiControl(code)) {\n      return nok(code);\n    }\n    effects.consume(code);\n    return urlInside;\n  }\n\n  /**\n   * In email atext.\n   *\n   * ```markdown\n   * > | a<user.name@example.com>b\n   *              ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailAtext(code) {\n    if (code === 64) {\n      effects.consume(code);\n      return emailAtSignOrDot;\n    }\n    if (asciiAtext(code)) {\n      effects.consume(code);\n      return emailAtext;\n    }\n    return nok(code);\n  }\n\n  /**\n   * In label, after at-sign or dot.\n   *\n   * ```markdown\n   * > | a<user.name@example.com>b\n   *                 ^       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailAtSignOrDot(code) {\n    return asciiAlphanumeric(code) ? emailLabel(code) : nok(code);\n  }\n\n  /**\n   * In label, where `.` and `>` are allowed.\n   *\n   * ```markdown\n   * > | a<user.name@example.com>b\n   *                   ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailLabel(code) {\n    if (code === 46) {\n      effects.consume(code);\n      size = 0;\n      return emailAtSignOrDot;\n    }\n    if (code === 62) {\n      // Exit, then change the token type.\n      effects.exit(\"autolinkProtocol\").type = \"autolinkEmail\";\n      effects.enter(\"autolinkMarker\");\n      effects.consume(code);\n      effects.exit(\"autolinkMarker\");\n      effects.exit(\"autolink\");\n      return ok;\n    }\n    return emailValue(code);\n  }\n\n  /**\n   * In label, where `.` and `>` are *not* allowed.\n   *\n   * Though, this is also used in `emailLabel` to parse other values.\n   *\n   * ```markdown\n   * > | a<user.name@ex-ample.com>b\n   *                    ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailValue(code) {\n    // ASCII alphanumeric or `-`.\n    if ((code === 45 || asciiAlphanumeric(code)) && size++ < 63) {\n      const next = code === 45 ? emailValue : emailLabel;\n      effects.consume(code);\n      return next;\n    }\n    return nok(code);\n  }\n}","/**\n * @import {\n *   Construct,\n *   Exiter,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownSpace } from 'micromark-util-character';\n/** @type {Construct} */\nexport const blockQuote = {\n  continuation: {\n    tokenize: tokenizeBlockQuoteContinuation\n  },\n  exit,\n  name: 'blockQuote',\n  tokenize: tokenizeBlockQuoteStart\n};\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeBlockQuoteStart(effects, ok, nok) {\n  const self = this;\n  return start;\n\n  /**\n   * Start of block quote.\n   *\n   * ```markdown\n   * > | > a\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (code === 62) {\n      const state = self.containerState;\n      if (!state.open) {\n        effects.enter(\"blockQuote\", {\n          _container: true\n        });\n        state.open = true;\n      }\n      effects.enter(\"blockQuotePrefix\");\n      effects.enter(\"blockQuoteMarker\");\n      effects.consume(code);\n      effects.exit(\"blockQuoteMarker\");\n      return after;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After `>`, before optional whitespace.\n   *\n   * ```markdown\n   * > | > a\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    if (markdownSpace(code)) {\n      effects.enter(\"blockQuotePrefixWhitespace\");\n      effects.consume(code);\n      effects.exit(\"blockQuotePrefixWhitespace\");\n      effects.exit(\"blockQuotePrefix\");\n      return ok;\n    }\n    effects.exit(\"blockQuotePrefix\");\n    return ok(code);\n  }\n}\n\n/**\n * Start of block quote continuation.\n *\n * ```markdown\n *   | > a\n * > | > b\n *     ^\n * ```\n *\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeBlockQuoteContinuation(effects, ok, nok) {\n  const self = this;\n  return contStart;\n\n  /**\n   * Start of block quote continuation.\n   *\n   * Also used to parse the first block quote opening.\n   *\n   * ```markdown\n   *   | > a\n   * > | > b\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function contStart(code) {\n    if (markdownSpace(code)) {\n      // Always populated by defaults.\n\n      return factorySpace(effects, contBefore, \"linePrefix\", self.parser.constructs.disable.null.includes('codeIndented') ? undefined : 4)(code);\n    }\n    return contBefore(code);\n  }\n\n  /**\n   * At `>`, after optional whitespace.\n   *\n   * Also used to parse the first block quote opening.\n   *\n   * ```markdown\n   *   | > a\n   * > | > b\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function contBefore(code) {\n    return effects.attempt(blockQuote, ok, nok)(code);\n  }\n}\n\n/** @type {Exiter} */\nfunction exit(effects) {\n  effects.exit(\"blockQuote\");\n}","/**\n * @import {\n *   Construct,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { asciiPunctuation } from 'micromark-util-character';\n/** @type {Construct} */\nexport const characterEscape = {\n  name: 'characterEscape',\n  tokenize: tokenizeCharacterEscape\n};\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeCharacterEscape(effects, ok, nok) {\n  return start;\n\n  /**\n   * Start of character escape.\n   *\n   * ```markdown\n   * > | a\\*b\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(\"characterEscape\");\n    effects.enter(\"escapeMarker\");\n    effects.consume(code);\n    effects.exit(\"escapeMarker\");\n    return inside;\n  }\n\n  /**\n   * After `\\`, at punctuation.\n   *\n   * ```markdown\n   * > | a\\*b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    // ASCII punctuation.\n    if (asciiPunctuation(code)) {\n      effects.enter(\"characterEscapeValue\");\n      effects.consume(code);\n      effects.exit(\"characterEscapeValue\");\n      effects.exit(\"characterEscape\");\n      return ok;\n    }\n    return nok(code);\n  }\n}","/**\n * Map of named character references.\n *\n * @type {Record<string, string>}\n */\nexport const characterEntities = {\n  AElig: 'Æ',\n  AMP: '&',\n  Aacute: 'Á',\n  Abreve: 'Ă',\n  Acirc: 'Â',\n  Acy: 'А',\n  Afr: '𝔄',\n  Agrave: 'À',\n  Alpha: 'Α',\n  Amacr: 'Ā',\n  And: '⩓',\n  Aogon: 'Ą',\n  Aopf: '𝔸',\n  ApplyFunction: '⁡',\n  Aring: 'Å',\n  Ascr: '𝒜',\n  Assign: '≔',\n  Atilde: 'Ã',\n  Auml: 'Ä',\n  Backslash: '∖',\n  Barv: '⫧',\n  Barwed: '⌆',\n  Bcy: 'Б',\n  Because: '∵',\n  Bernoullis: 'ℬ',\n  Beta: 'Β',\n  Bfr: '𝔅',\n  Bopf: '𝔹',\n  Breve: '˘',\n  Bscr: 'ℬ',\n  Bumpeq: '≎',\n  CHcy: 'Ч',\n  COPY: '©',\n  Cacute: 'Ć',\n  Cap: '⋒',\n  CapitalDifferentialD: 'ⅅ',\n  Cayleys: 'ℭ',\n  Ccaron: 'Č',\n  Ccedil: 'Ç',\n  Ccirc: 'Ĉ',\n  Cconint: '∰',\n  Cdot: 'Ċ',\n  Cedilla: '¸',\n  CenterDot: '·',\n  Cfr: 'ℭ',\n  Chi: 'Χ',\n  CircleDot: '⊙',\n  CircleMinus: '⊖',\n  CirclePlus: '⊕',\n  CircleTimes: '⊗',\n  ClockwiseContourIntegral: '∲',\n  CloseCurlyDoubleQuote: '”',\n  CloseCurlyQuote: '’',\n  Colon: '∷',\n  Colone: '⩴',\n  Congruent: '≡',\n  Conint: '∯',\n  ContourIntegral: '∮',\n  Copf: 'ℂ',\n  Coproduct: '∐',\n  CounterClockwiseContourIntegral: '∳',\n  Cross: '⨯',\n  Cscr: '𝒞',\n  Cup: '⋓',\n  CupCap: '≍',\n  DD: 'ⅅ',\n  DDotrahd: '⤑',\n  DJcy: 'Ђ',\n  DScy: 'Ѕ',\n  DZcy: 'Џ',\n  Dagger: '‡',\n  Darr: '↡',\n  Dashv: '⫤',\n  Dcaron: 'Ď',\n  Dcy: 'Д',\n  Del: '∇',\n  Delta: 'Δ',\n  Dfr: '𝔇',\n  DiacriticalAcute: '´',\n  DiacriticalDot: '˙',\n  DiacriticalDoubleAcute: '˝',\n  DiacriticalGrave: '`',\n  DiacriticalTilde: '˜',\n  Diamond: '⋄',\n  DifferentialD: 'ⅆ',\n  Dopf: '𝔻',\n  Dot: '¨',\n  DotDot: '⃜',\n  DotEqual: '≐',\n  DoubleContourIntegral: '∯',\n  DoubleDot: '¨',\n  DoubleDownArrow: '⇓',\n  DoubleLeftArrow: '⇐',\n  DoubleLeftRightArrow: '⇔',\n  DoubleLeftTee: '⫤',\n  DoubleLongLeftArrow: '⟸',\n  DoubleLongLeftRightArrow: '⟺',\n  DoubleLongRightArrow: '⟹',\n  DoubleRightArrow: '⇒',\n  DoubleRightTee: '⊨',\n  DoubleUpArrow: '⇑',\n  DoubleUpDownArrow: '⇕',\n  DoubleVerticalBar: '∥',\n  DownArrow: '↓',\n  DownArrowBar: '⤓',\n  DownArrowUpArrow: '⇵',\n  DownBreve: '̑',\n  DownLeftRightVector: '⥐',\n  DownLeftTeeVector: '⥞',\n  DownLeftVector: '↽',\n  DownLeftVectorBar: '⥖',\n  DownRightTeeVector: '⥟',\n  DownRightVector: '⇁',\n  DownRightVectorBar: '⥗',\n  DownTee: '⊤',\n  DownTeeArrow: '↧',\n  Downarrow: '⇓',\n  Dscr: '𝒟',\n  Dstrok: 'Đ',\n  ENG: 'Ŋ',\n  ETH: 'Ð',\n  Eacute: 'É',\n  Ecaron: 'Ě',\n  Ecirc: 'Ê',\n  Ecy: 'Э',\n  Edot: 'Ė',\n  Efr: '𝔈',\n  Egrave: 'È',\n  Element: '∈',\n  Emacr: 'Ē',\n  EmptySmallSquare: '◻',\n  EmptyVerySmallSquare: '▫',\n  Eogon: 'Ę',\n  Eopf: '𝔼',\n  Epsilon: 'Ε',\n  Equal: '⩵',\n  EqualTilde: '≂',\n  Equilibrium: '⇌',\n  Escr: 'ℰ',\n  Esim: '⩳',\n  Eta: 'Η',\n  Euml: 'Ë',\n  Exists: '∃',\n  ExponentialE: 'ⅇ',\n  Fcy: 'Ф',\n  Ffr: '𝔉',\n  FilledSmallSquare: '◼',\n  FilledVerySmallSquare: '▪',\n  Fopf: '𝔽',\n  ForAll: '∀',\n  Fouriertrf: 'ℱ',\n  Fscr: 'ℱ',\n  GJcy: 'Ѓ',\n  GT: '>',\n  Gamma: 'Γ',\n  Gammad: 'Ϝ',\n  Gbreve: 'Ğ',\n  Gcedil: 'Ģ',\n  Gcirc: 'Ĝ',\n  Gcy: 'Г',\n  Gdot: 'Ġ',\n  Gfr: '𝔊',\n  Gg: '⋙',\n  Gopf: '𝔾',\n  GreaterEqual: '≥',\n  GreaterEqualLess: '⋛',\n  GreaterFullEqual: '≧',\n  GreaterGreater: '⪢',\n  GreaterLess: '≷',\n  GreaterSlantEqual: '⩾',\n  GreaterTilde: '≳',\n  Gscr: '𝒢',\n  Gt: '≫',\n  HARDcy: 'Ъ',\n  Hacek: 'ˇ',\n  Hat: '^',\n  Hcirc: 'Ĥ',\n  Hfr: 'ℌ',\n  HilbertSpace: 'ℋ',\n  Hopf: 'ℍ',\n  HorizontalLine: '─',\n  Hscr: 'ℋ',\n  Hstrok: 'Ħ',\n  HumpDownHump: '≎',\n  HumpEqual: '≏',\n  IEcy: 'Е',\n  IJlig: 'Ĳ',\n  IOcy: 'Ё',\n  Iacute: 'Í',\n  Icirc: 'Î',\n  Icy: 'И',\n  Idot: 'İ',\n  Ifr: 'ℑ',\n  Igrave: 'Ì',\n  Im: 'ℑ',\n  Imacr: 'Ī',\n  ImaginaryI: 'ⅈ',\n  Implies: '⇒',\n  Int: '∬',\n  Integral: '∫',\n  Intersection: '⋂',\n  InvisibleComma: '⁣',\n  InvisibleTimes: '⁢',\n  Iogon: 'Į',\n  Iopf: '𝕀',\n  Iota: 'Ι',\n  Iscr: 'ℐ',\n  Itilde: 'Ĩ',\n  Iukcy: 'І',\n  Iuml: 'Ï',\n  Jcirc: 'Ĵ',\n  Jcy: 'Й',\n  Jfr: '𝔍',\n  Jopf: '𝕁',\n  Jscr: '𝒥',\n  Jsercy: 'Ј',\n  Jukcy: 'Є',\n  KHcy: 'Х',\n  KJcy: 'Ќ',\n  Kappa: 'Κ',\n  Kcedil: 'Ķ',\n  Kcy: 'К',\n  Kfr: '𝔎',\n  Kopf: '𝕂',\n  Kscr: '𝒦',\n  LJcy: 'Љ',\n  LT: '<',\n  Lacute: 'Ĺ',\n  Lambda: 'Λ',\n  Lang: '⟪',\n  Laplacetrf: 'ℒ',\n  Larr: '↞',\n  Lcaron: 'Ľ',\n  Lcedil: 'Ļ',\n  Lcy: 'Л',\n  LeftAngleBracket: '⟨',\n  LeftArrow: '←',\n  LeftArrowBar: '⇤',\n  LeftArrowRightArrow: '⇆',\n  LeftCeiling: '⌈',\n  LeftDoubleBracket: '⟦',\n  LeftDownTeeVector: '⥡',\n  LeftDownVector: '⇃',\n  LeftDownVectorBar: '⥙',\n  LeftFloor: '⌊',\n  LeftRightArrow: '↔',\n  LeftRightVector: '⥎',\n  LeftTee: '⊣',\n  LeftTeeArrow: '↤',\n  LeftTeeVector: '⥚',\n  LeftTriangle: '⊲',\n  LeftTriangleBar: '⧏',\n  LeftTriangleEqual: '⊴',\n  LeftUpDownVector: '⥑',\n  LeftUpTeeVector: '⥠',\n  LeftUpVector: '↿',\n  LeftUpVectorBar: '⥘',\n  LeftVector: '↼',\n  LeftVectorBar: '⥒',\n  Leftarrow: '⇐',\n  Leftrightarrow: '⇔',\n  LessEqualGreater: '⋚',\n  LessFullEqual: '≦',\n  LessGreater: '≶',\n  LessLess: '⪡',\n  LessSlantEqual: '⩽',\n  LessTilde: '≲',\n  Lfr: '𝔏',\n  Ll: '⋘',\n  Lleftarrow: '⇚',\n  Lmidot: 'Ŀ',\n  LongLeftArrow: '⟵',\n  LongLeftRightArrow: '⟷',\n  LongRightArrow: '⟶',\n  Longleftarrow: '⟸',\n  Longleftrightarrow: '⟺',\n  Longrightarrow: '⟹',\n  Lopf: '𝕃',\n  LowerLeftArrow: '↙',\n  LowerRightArrow: '↘',\n  Lscr: 'ℒ',\n  Lsh: '↰',\n  Lstrok: 'Ł',\n  Lt: '≪',\n  Map: '⤅',\n  Mcy: 'М',\n  MediumSpace: ' ',\n  Mellintrf: 'ℳ',\n  Mfr: '𝔐',\n  MinusPlus: '∓',\n  Mopf: '𝕄',\n  Mscr: 'ℳ',\n  Mu: 'Μ',\n  NJcy: 'Њ',\n  Nacute: 'Ń',\n  Ncaron: 'Ň',\n  Ncedil: 'Ņ',\n  Ncy: 'Н',\n  NegativeMediumSpace: '​',\n  NegativeThickSpace: '​',\n  NegativeThinSpace: '​',\n  NegativeVeryThinSpace: '​',\n  NestedGreaterGreater: '≫',\n  NestedLessLess: '≪',\n  NewLine: '\\n',\n  Nfr: '𝔑',\n  NoBreak: '⁠',\n  NonBreakingSpace: ' ',\n  Nopf: 'ℕ',\n  Not: '⫬',\n  NotCongruent: '≢',\n  NotCupCap: '≭',\n  NotDoubleVerticalBar: '∦',\n  NotElement: '∉',\n  NotEqual: '≠',\n  NotEqualTilde: '≂̸',\n  NotExists: '∄',\n  NotGreater: '≯',\n  NotGreaterEqual: '≱',\n  NotGreaterFullEqual: '≧̸',\n  NotGreaterGreater: '≫̸',\n  NotGreaterLess: '≹',\n  NotGreaterSlantEqual: '⩾̸',\n  NotGreaterTilde: '≵',\n  NotHumpDownHump: '≎̸',\n  NotHumpEqual: '≏̸',\n  NotLeftTriangle: '⋪',\n  NotLeftTriangleBar: '⧏̸',\n  NotLeftTriangleEqual: '⋬',\n  NotLess: '≮',\n  NotLessEqual: '≰',\n  NotLessGreater: '≸',\n  NotLessLess: '≪̸',\n  NotLessSlantEqual: '⩽̸',\n  NotLessTilde: '≴',\n  NotNestedGreaterGreater: '⪢̸',\n  NotNestedLessLess: '⪡̸',\n  NotPrecedes: '⊀',\n  NotPrecedesEqual: '⪯̸',\n  NotPrecedesSlantEqual: '⋠',\n  NotReverseElement: '∌',\n  NotRightTriangle: '⋫',\n  NotRightTriangleBar: '⧐̸',\n  NotRightTriangleEqual: '⋭',\n  NotSquareSubset: '⊏̸',\n  NotSquareSubsetEqual: '⋢',\n  NotSquareSuperset: '⊐̸',\n  NotSquareSupersetEqual: '⋣',\n  NotSubset: '⊂⃒',\n  NotSubsetEqual: '⊈',\n  NotSucceeds: '⊁',\n  NotSucceedsEqual: '⪰̸',\n  NotSucceedsSlantEqual: '⋡',\n  NotSucceedsTilde: '≿̸',\n  NotSuperset: '⊃⃒',\n  NotSupersetEqual: '⊉',\n  NotTilde: '≁',\n  NotTildeEqual: '≄',\n  NotTildeFullEqual: '≇',\n  NotTildeTilde: '≉',\n  NotVerticalBar: '∤',\n  Nscr: '𝒩',\n  Ntilde: 'Ñ',\n  Nu: 'Ν',\n  OElig: 'Œ',\n  Oacute: 'Ó',\n  Ocirc: 'Ô',\n  Ocy: 'О',\n  Odblac: 'Ő',\n  Ofr: '𝔒',\n  Ograve: 'Ò',\n  Omacr: 'Ō',\n  Omega: 'Ω',\n  Omicron: 'Ο',\n  Oopf: '𝕆',\n  OpenCurlyDoubleQuote: '“',\n  OpenCurlyQuote: '‘',\n  Or: '⩔',\n  Oscr: '𝒪',\n  Oslash: 'Ø',\n  Otilde: 'Õ',\n  Otimes: '⨷',\n  Ouml: 'Ö',\n  OverBar: '‾',\n  OverBrace: '⏞',\n  OverBracket: '⎴',\n  OverParenthesis: '⏜',\n  PartialD: '∂',\n  Pcy: 'П',\n  Pfr: '𝔓',\n  Phi: 'Φ',\n  Pi: 'Π',\n  PlusMinus: '±',\n  Poincareplane: 'ℌ',\n  Popf: 'ℙ',\n  Pr: '⪻',\n  Precedes: '≺',\n  PrecedesEqual: '⪯',\n  PrecedesSlantEqual: '≼',\n  PrecedesTilde: '≾',\n  Prime: '″',\n  Product: '∏',\n  Proportion: '∷',\n  Proportional: '∝',\n  Pscr: '𝒫',\n  Psi: 'Ψ',\n  QUOT: '\"',\n  Qfr: '𝔔',\n  Qopf: 'ℚ',\n  Qscr: '𝒬',\n  RBarr: '⤐',\n  REG: '®',\n  Racute: 'Ŕ',\n  Rang: '⟫',\n  Rarr: '↠',\n  Rarrtl: '⤖',\n  Rcaron: 'Ř',\n  Rcedil: 'Ŗ',\n  Rcy: 'Р',\n  Re: 'ℜ',\n  ReverseElement: '∋',\n  ReverseEquilibrium: '⇋',\n  ReverseUpEquilibrium: '⥯',\n  Rfr: 'ℜ',\n  Rho: 'Ρ',\n  RightAngleBracket: '⟩',\n  RightArrow: '→',\n  RightArrowBar: '⇥',\n  RightArrowLeftArrow: '⇄',\n  RightCeiling: '⌉',\n  RightDoubleBracket: '⟧',\n  RightDownTeeVector: '⥝',\n  RightDownVector: '⇂',\n  RightDownVectorBar: '⥕',\n  RightFloor: '⌋',\n  RightTee: '⊢',\n  RightTeeArrow: '↦',\n  RightTeeVector: '⥛',\n  RightTriangle: '⊳',\n  RightTriangleBar: '⧐',\n  RightTriangleEqual: '⊵',\n  RightUpDownVector: '⥏',\n  RightUpTeeVector: '⥜',\n  RightUpVector: '↾',\n  RightUpVectorBar: '⥔',\n  RightVector: '⇀',\n  RightVectorBar: '⥓',\n  Rightarrow: '⇒',\n  Ropf: 'ℝ',\n  RoundImplies: '⥰',\n  Rrightarrow: '⇛',\n  Rscr: 'ℛ',\n  Rsh: '↱',\n  RuleDelayed: '⧴',\n  SHCHcy: 'Щ',\n  SHcy: 'Ш',\n  SOFTcy: 'Ь',\n  Sacute: 'Ś',\n  Sc: '⪼',\n  Scaron: 'Š',\n  Scedil: 'Ş',\n  Scirc: 'Ŝ',\n  Scy: 'С',\n  Sfr: '𝔖',\n  ShortDownArrow: '↓',\n  ShortLeftArrow: '←',\n  ShortRightArrow: '→',\n  ShortUpArrow: '↑',\n  Sigma: 'Σ',\n  SmallCircle: '∘',\n  Sopf: '𝕊',\n  Sqrt: '√',\n  Square: '□',\n  SquareIntersection: '⊓',\n  SquareSubset: '⊏',\n  SquareSubsetEqual: '⊑',\n  SquareSuperset: '⊐',\n  SquareSupersetEqual: '⊒',\n  SquareUnion: '⊔',\n  Sscr: '𝒮',\n  Star: '⋆',\n  Sub: '⋐',\n  Subset: '⋐',\n  SubsetEqual: '⊆',\n  Succeeds: '≻',\n  SucceedsEqual: '⪰',\n  SucceedsSlantEqual: '≽',\n  SucceedsTilde: '≿',\n  SuchThat: '∋',\n  Sum: '∑',\n  Sup: '⋑',\n  Superset: '⊃',\n  SupersetEqual: '⊇',\n  Supset: '⋑',\n  THORN: 'Þ',\n  TRADE: '™',\n  TSHcy: 'Ћ',\n  TScy: 'Ц',\n  Tab: '\\t',\n  Tau: 'Τ',\n  Tcaron: 'Ť',\n  Tcedil: 'Ţ',\n  Tcy: 'Т',\n  Tfr: '𝔗',\n  Therefore: '∴',\n  Theta: 'Θ',\n  ThickSpace: '  ',\n  ThinSpace: ' ',\n  Tilde: '∼',\n  TildeEqual: '≃',\n  TildeFullEqual: '≅',\n  TildeTilde: '≈',\n  Topf: '𝕋',\n  TripleDot: '⃛',\n  Tscr: '𝒯',\n  Tstrok: 'Ŧ',\n  Uacute: 'Ú',\n  Uarr: '↟',\n  Uarrocir: '⥉',\n  Ubrcy: 'Ў',\n  Ubreve: 'Ŭ',\n  Ucirc: 'Û',\n  Ucy: 'У',\n  Udblac: 'Ű',\n  Ufr: '𝔘',\n  Ugrave: 'Ù',\n  Umacr: 'Ū',\n  UnderBar: '_',\n  UnderBrace: '⏟',\n  UnderBracket: '⎵',\n  UnderParenthesis: '⏝',\n  Union: '⋃',\n  UnionPlus: '⊎',\n  Uogon: 'Ų',\n  Uopf: '𝕌',\n  UpArrow: '↑',\n  UpArrowBar: '⤒',\n  UpArrowDownArrow: '⇅',\n  UpDownArrow: '↕',\n  UpEquilibrium: '⥮',\n  UpTee: '⊥',\n  UpTeeArrow: '↥',\n  Uparrow: '⇑',\n  Updownarrow: '⇕',\n  UpperLeftArrow: '↖',\n  UpperRightArrow: '↗',\n  Upsi: 'ϒ',\n  Upsilon: 'Υ',\n  Uring: 'Ů',\n  Uscr: '𝒰',\n  Utilde: 'Ũ',\n  Uuml: 'Ü',\n  VDash: '⊫',\n  Vbar: '⫫',\n  Vcy: 'В',\n  Vdash: '⊩',\n  Vdashl: '⫦',\n  Vee: '⋁',\n  Verbar: '‖',\n  Vert: '‖',\n  VerticalBar: '∣',\n  VerticalLine: '|',\n  VerticalSeparator: '❘',\n  VerticalTilde: '≀',\n  VeryThinSpace: ' ',\n  Vfr: '𝔙',\n  Vopf: '𝕍',\n  Vscr: '𝒱',\n  Vvdash: '⊪',\n  Wcirc: 'Ŵ',\n  Wedge: '⋀',\n  Wfr: '𝔚',\n  Wopf: '𝕎',\n  Wscr: '𝒲',\n  Xfr: '𝔛',\n  Xi: 'Ξ',\n  Xopf: '𝕏',\n  Xscr: '𝒳',\n  YAcy: 'Я',\n  YIcy: 'Ї',\n  YUcy: 'Ю',\n  Yacute: 'Ý',\n  Ycirc: 'Ŷ',\n  Ycy: 'Ы',\n  Yfr: '𝔜',\n  Yopf: '𝕐',\n  Yscr: '𝒴',\n  Yuml: 'Ÿ',\n  ZHcy: 'Ж',\n  Zacute: 'Ź',\n  Zcaron: 'Ž',\n  Zcy: 'З',\n  Zdot: 'Ż',\n  ZeroWidthSpace: '​',\n  Zeta: 'Ζ',\n  Zfr: 'ℨ',\n  Zopf: 'ℤ',\n  Zscr: '𝒵',\n  aacute: 'á',\n  abreve: 'ă',\n  ac: '∾',\n  acE: '∾̳',\n  acd: '∿',\n  acirc: 'â',\n  acute: '´',\n  acy: 'а',\n  aelig: 'æ',\n  af: '⁡',\n  afr: '𝔞',\n  agrave: 'à',\n  alefsym: 'ℵ',\n  aleph: 'ℵ',\n  alpha: 'α',\n  amacr: 'ā',\n  amalg: '⨿',\n  amp: '&',\n  and: '∧',\n  andand: '⩕',\n  andd: '⩜',\n  andslope: '⩘',\n  andv: '⩚',\n  ang: '∠',\n  ange: '⦤',\n  angle: '∠',\n  angmsd: '∡',\n  angmsdaa: '⦨',\n  angmsdab: '⦩',\n  angmsdac: '⦪',\n  angmsdad: '⦫',\n  angmsdae: '⦬',\n  angmsdaf: '⦭',\n  angmsdag: '⦮',\n  angmsdah: '⦯',\n  angrt: '∟',\n  angrtvb: '⊾',\n  angrtvbd: '⦝',\n  angsph: '∢',\n  angst: 'Å',\n  angzarr: '⍼',\n  aogon: 'ą',\n  aopf: '𝕒',\n  ap: '≈',\n  apE: '⩰',\n  apacir: '⩯',\n  ape: '≊',\n  apid: '≋',\n  apos: \"'\",\n  approx: '≈',\n  approxeq: '≊',\n  aring: 'å',\n  ascr: '𝒶',\n  ast: '*',\n  asymp: '≈',\n  asympeq: '≍',\n  atilde: 'ã',\n  auml: 'ä',\n  awconint: '∳',\n  awint: '⨑',\n  bNot: '⫭',\n  backcong: '≌',\n  backepsilon: '϶',\n  backprime: '‵',\n  backsim: '∽',\n  backsimeq: '⋍',\n  barvee: '⊽',\n  barwed: '⌅',\n  barwedge: '⌅',\n  bbrk: '⎵',\n  bbrktbrk: '⎶',\n  bcong: '≌',\n  bcy: 'б',\n  bdquo: '„',\n  becaus: '∵',\n  because: '∵',\n  bemptyv: '⦰',\n  bepsi: '϶',\n  bernou: 'ℬ',\n  beta: 'β',\n  beth: 'ℶ',\n  between: '≬',\n  bfr: '𝔟',\n  bigcap: '⋂',\n  bigcirc: '◯',\n  bigcup: '⋃',\n  bigodot: '⨀',\n  bigoplus: '⨁',\n  bigotimes: '⨂',\n  bigsqcup: '⨆',\n  bigstar: '★',\n  bigtriangledown: '▽',\n  bigtriangleup: '△',\n  biguplus: '⨄',\n  bigvee: '⋁',\n  bigwedge: '⋀',\n  bkarow: '⤍',\n  blacklozenge: '⧫',\n  blacksquare: '▪',\n  blacktriangle: '▴',\n  blacktriangledown: '▾',\n  blacktriangleleft: '◂',\n  blacktriangleright: '▸',\n  blank: '␣',\n  blk12: '▒',\n  blk14: '░',\n  blk34: '▓',\n  block: '█',\n  bne: '=⃥',\n  bnequiv: '≡⃥',\n  bnot: '⌐',\n  bopf: '𝕓',\n  bot: '⊥',\n  bottom: '⊥',\n  bowtie: '⋈',\n  boxDL: '╗',\n  boxDR: '╔',\n  boxDl: '╖',\n  boxDr: '╓',\n  boxH: '═',\n  boxHD: '╦',\n  boxHU: '╩',\n  boxHd: '╤',\n  boxHu: '╧',\n  boxUL: '╝',\n  boxUR: '╚',\n  boxUl: '╜',\n  boxUr: '╙',\n  boxV: '║',\n  boxVH: '╬',\n  boxVL: '╣',\n  boxVR: '╠',\n  boxVh: '╫',\n  boxVl: '╢',\n  boxVr: '╟',\n  boxbox: '⧉',\n  boxdL: '╕',\n  boxdR: '╒',\n  boxdl: '┐',\n  boxdr: '┌',\n  boxh: '─',\n  boxhD: '╥',\n  boxhU: '╨',\n  boxhd: '┬',\n  boxhu: '┴',\n  boxminus: '⊟',\n  boxplus: '⊞',\n  boxtimes: '⊠',\n  boxuL: '╛',\n  boxuR: '╘',\n  boxul: '┘',\n  boxur: '└',\n  boxv: '│',\n  boxvH: '╪',\n  boxvL: '╡',\n  boxvR: '╞',\n  boxvh: '┼',\n  boxvl: '┤',\n  boxvr: '├',\n  bprime: '‵',\n  breve: '˘',\n  brvbar: '¦',\n  bscr: '𝒷',\n  bsemi: '⁏',\n  bsim: '∽',\n  bsime: '⋍',\n  bsol: '\\\\',\n  bsolb: '⧅',\n  bsolhsub: '⟈',\n  bull: '•',\n  bullet: '•',\n  bump: '≎',\n  bumpE: '⪮',\n  bumpe: '≏',\n  bumpeq: '≏',\n  cacute: 'ć',\n  cap: '∩',\n  capand: '⩄',\n  capbrcup: '⩉',\n  capcap: '⩋',\n  capcup: '⩇',\n  capdot: '⩀',\n  caps: '∩︀',\n  caret: '⁁',\n  caron: 'ˇ',\n  ccaps: '⩍',\n  ccaron: 'č',\n  ccedil: 'ç',\n  ccirc: 'ĉ',\n  ccups: '⩌',\n  ccupssm: '⩐',\n  cdot: 'ċ',\n  cedil: '¸',\n  cemptyv: '⦲',\n  cent: '¢',\n  centerdot: '·',\n  cfr: '𝔠',\n  chcy: 'ч',\n  check: '✓',\n  checkmark: '✓',\n  chi: 'χ',\n  cir: '○',\n  cirE: '⧃',\n  circ: 'ˆ',\n  circeq: '≗',\n  circlearrowleft: '↺',\n  circlearrowright: '↻',\n  circledR: '®',\n  circledS: 'Ⓢ',\n  circledast: '⊛',\n  circledcirc: '⊚',\n  circleddash: '⊝',\n  cire: '≗',\n  cirfnint: '⨐',\n  cirmid: '⫯',\n  cirscir: '⧂',\n  clubs: '♣',\n  clubsuit: '♣',\n  colon: ':',\n  colone: '≔',\n  coloneq: '≔',\n  comma: ',',\n  commat: '@',\n  comp: '∁',\n  compfn: '∘',\n  complement: '∁',\n  complexes: 'ℂ',\n  cong: '≅',\n  congdot: '⩭',\n  conint: '∮',\n  copf: '𝕔',\n  coprod: '∐',\n  copy: '©',\n  copysr: '℗',\n  crarr: '↵',\n  cross: '✗',\n  cscr: '𝒸',\n  csub: '⫏',\n  csube: '⫑',\n  csup: '⫐',\n  csupe: '⫒',\n  ctdot: '⋯',\n  cudarrl: '⤸',\n  cudarrr: '⤵',\n  cuepr: '⋞',\n  cuesc: '⋟',\n  cularr: '↶',\n  cularrp: '⤽',\n  cup: '∪',\n  cupbrcap: '⩈',\n  cupcap: '⩆',\n  cupcup: '⩊',\n  cupdot: '⊍',\n  cupor: '⩅',\n  cups: '∪︀',\n  curarr: '↷',\n  curarrm: '⤼',\n  curlyeqprec: '⋞',\n  curlyeqsucc: '⋟',\n  curlyvee: '⋎',\n  curlywedge: '⋏',\n  curren: '¤',\n  curvearrowleft: '↶',\n  curvearrowright: '↷',\n  cuvee: '⋎',\n  cuwed: '⋏',\n  cwconint: '∲',\n  cwint: '∱',\n  cylcty: '⌭',\n  dArr: '⇓',\n  dHar: '⥥',\n  dagger: '†',\n  daleth: 'ℸ',\n  darr: '↓',\n  dash: '‐',\n  dashv: '⊣',\n  dbkarow: '⤏',\n  dblac: '˝',\n  dcaron: 'ď',\n  dcy: 'д',\n  dd: 'ⅆ',\n  ddagger: '‡',\n  ddarr: '⇊',\n  ddotseq: '⩷',\n  deg: '°',\n  delta: 'δ',\n  demptyv: '⦱',\n  dfisht: '⥿',\n  dfr: '𝔡',\n  dharl: '⇃',\n  dharr: '⇂',\n  diam: '⋄',\n  diamond: '⋄',\n  diamondsuit: '♦',\n  diams: '♦',\n  die: '¨',\n  digamma: 'ϝ',\n  disin: '⋲',\n  div: '÷',\n  divide: '÷',\n  divideontimes: '⋇',\n  divonx: '⋇',\n  djcy: 'ђ',\n  dlcorn: '⌞',\n  dlcrop: '⌍',\n  dollar: '$',\n  dopf: '𝕕',\n  dot: '˙',\n  doteq: '≐',\n  doteqdot: '≑',\n  dotminus: '∸',\n  dotplus: '∔',\n  dotsquare: '⊡',\n  doublebarwedge: '⌆',\n  downarrow: '↓',\n  downdownarrows: '⇊',\n  downharpoonleft: '⇃',\n  downharpoonright: '⇂',\n  drbkarow: '⤐',\n  drcorn: '⌟',\n  drcrop: '⌌',\n  dscr: '𝒹',\n  dscy: 'ѕ',\n  dsol: '⧶',\n  dstrok: 'đ',\n  dtdot: '⋱',\n  dtri: '▿',\n  dtrif: '▾',\n  duarr: '⇵',\n  duhar: '⥯',\n  dwangle: '⦦',\n  dzcy: 'џ',\n  dzigrarr: '⟿',\n  eDDot: '⩷',\n  eDot: '≑',\n  eacute: 'é',\n  easter: '⩮',\n  ecaron: 'ě',\n  ecir: '≖',\n  ecirc: 'ê',\n  ecolon: '≕',\n  ecy: 'э',\n  edot: 'ė',\n  ee: 'ⅇ',\n  efDot: '≒',\n  efr: '𝔢',\n  eg: '⪚',\n  egrave: 'è',\n  egs: '⪖',\n  egsdot: '⪘',\n  el: '⪙',\n  elinters: '⏧',\n  ell: 'ℓ',\n  els: '⪕',\n  elsdot: '⪗',\n  emacr: 'ē',\n  empty: '∅',\n  emptyset: '∅',\n  emptyv: '∅',\n  emsp13: ' ',\n  emsp14: ' ',\n  emsp: ' ',\n  eng: 'ŋ',\n  ensp: ' ',\n  eogon: 'ę',\n  eopf: '𝕖',\n  epar: '⋕',\n  eparsl: '⧣',\n  eplus: '⩱',\n  epsi: 'ε',\n  epsilon: 'ε',\n  epsiv: 'ϵ',\n  eqcirc: '≖',\n  eqcolon: '≕',\n  eqsim: '≂',\n  eqslantgtr: '⪖',\n  eqslantless: '⪕',\n  equals: '=',\n  equest: '≟',\n  equiv: '≡',\n  equivDD: '⩸',\n  eqvparsl: '⧥',\n  erDot: '≓',\n  erarr: '⥱',\n  escr: 'ℯ',\n  esdot: '≐',\n  esim: '≂',\n  eta: 'η',\n  eth: 'ð',\n  euml: 'ë',\n  euro: '€',\n  excl: '!',\n  exist: '∃',\n  expectation: 'ℰ',\n  exponentiale: 'ⅇ',\n  fallingdotseq: '≒',\n  fcy: 'ф',\n  female: '♀',\n  ffilig: 'ﬃ',\n  fflig: 'ﬀ',\n  ffllig: 'ﬄ',\n  ffr: '𝔣',\n  filig: 'ﬁ',\n  fjlig: 'fj',\n  flat: '♭',\n  fllig: 'ﬂ',\n  fltns: '▱',\n  fnof: 'ƒ',\n  fopf: '𝕗',\n  forall: '∀',\n  fork: '⋔',\n  forkv: '⫙',\n  fpartint: '⨍',\n  frac12: '½',\n  frac13: '⅓',\n  frac14: '¼',\n  frac15: '⅕',\n  frac16: '⅙',\n  frac18: '⅛',\n  frac23: '⅔',\n  frac25: '⅖',\n  frac34: '¾',\n  frac35: '⅗',\n  frac38: '⅜',\n  frac45: '⅘',\n  frac56: '⅚',\n  frac58: '⅝',\n  frac78: '⅞',\n  frasl: '⁄',\n  frown: '⌢',\n  fscr: '𝒻',\n  gE: '≧',\n  gEl: '⪌',\n  gacute: 'ǵ',\n  gamma: 'γ',\n  gammad: 'ϝ',\n  gap: '⪆',\n  gbreve: 'ğ',\n  gcirc: 'ĝ',\n  gcy: 'г',\n  gdot: 'ġ',\n  ge: '≥',\n  gel: '⋛',\n  geq: '≥',\n  geqq: '≧',\n  geqslant: '⩾',\n  ges: '⩾',\n  gescc: '⪩',\n  gesdot: '⪀',\n  gesdoto: '⪂',\n  gesdotol: '⪄',\n  gesl: '⋛︀',\n  gesles: '⪔',\n  gfr: '𝔤',\n  gg: '≫',\n  ggg: '⋙',\n  gimel: 'ℷ',\n  gjcy: 'ѓ',\n  gl: '≷',\n  glE: '⪒',\n  gla: '⪥',\n  glj: '⪤',\n  gnE: '≩',\n  gnap: '⪊',\n  gnapprox: '⪊',\n  gne: '⪈',\n  gneq: '⪈',\n  gneqq: '≩',\n  gnsim: '⋧',\n  gopf: '𝕘',\n  grave: '`',\n  gscr: 'ℊ',\n  gsim: '≳',\n  gsime: '⪎',\n  gsiml: '⪐',\n  gt: '>',\n  gtcc: '⪧',\n  gtcir: '⩺',\n  gtdot: '⋗',\n  gtlPar: '⦕',\n  gtquest: '⩼',\n  gtrapprox: '⪆',\n  gtrarr: '⥸',\n  gtrdot: '⋗',\n  gtreqless: '⋛',\n  gtreqqless: '⪌',\n  gtrless: '≷',\n  gtrsim: '≳',\n  gvertneqq: '≩︀',\n  gvnE: '≩︀',\n  hArr: '⇔',\n  hairsp: ' ',\n  half: '½',\n  hamilt: 'ℋ',\n  hardcy: 'ъ',\n  harr: '↔',\n  harrcir: '⥈',\n  harrw: '↭',\n  hbar: 'ℏ',\n  hcirc: 'ĥ',\n  hearts: '♥',\n  heartsuit: '♥',\n  hellip: '…',\n  hercon: '⊹',\n  hfr: '𝔥',\n  hksearow: '⤥',\n  hkswarow: '⤦',\n  hoarr: '⇿',\n  homtht: '∻',\n  hookleftarrow: '↩',\n  hookrightarrow: '↪',\n  hopf: '𝕙',\n  horbar: '―',\n  hscr: '𝒽',\n  hslash: 'ℏ',\n  hstrok: 'ħ',\n  hybull: '⁃',\n  hyphen: '‐',\n  iacute: 'í',\n  ic: '⁣',\n  icirc: 'î',\n  icy: 'и',\n  iecy: 'е',\n  iexcl: '¡',\n  iff: '⇔',\n  ifr: '𝔦',\n  igrave: 'ì',\n  ii: 'ⅈ',\n  iiiint: '⨌',\n  iiint: '∭',\n  iinfin: '⧜',\n  iiota: '℩',\n  ijlig: 'ĳ',\n  imacr: 'ī',\n  image: 'ℑ',\n  imagline: 'ℐ',\n  imagpart: 'ℑ',\n  imath: 'ı',\n  imof: '⊷',\n  imped: 'Ƶ',\n  in: '∈',\n  incare: '℅',\n  infin: '∞',\n  infintie: '⧝',\n  inodot: 'ı',\n  int: '∫',\n  intcal: '⊺',\n  integers: 'ℤ',\n  intercal: '⊺',\n  intlarhk: '⨗',\n  intprod: '⨼',\n  iocy: 'ё',\n  iogon: 'į',\n  iopf: '𝕚',\n  iota: 'ι',\n  iprod: '⨼',\n  iquest: '¿',\n  iscr: '𝒾',\n  isin: '∈',\n  isinE: '⋹',\n  isindot: '⋵',\n  isins: '⋴',\n  isinsv: '⋳',\n  isinv: '∈',\n  it: '⁢',\n  itilde: 'ĩ',\n  iukcy: 'і',\n  iuml: 'ï',\n  jcirc: 'ĵ',\n  jcy: 'й',\n  jfr: '𝔧',\n  jmath: 'ȷ',\n  jopf: '𝕛',\n  jscr: '𝒿',\n  jsercy: 'ј',\n  jukcy: 'є',\n  kappa: 'κ',\n  kappav: 'ϰ',\n  kcedil: 'ķ',\n  kcy: 'к',\n  kfr: '𝔨',\n  kgreen: 'ĸ',\n  khcy: 'х',\n  kjcy: 'ќ',\n  kopf: '𝕜',\n  kscr: '𝓀',\n  lAarr: '⇚',\n  lArr: '⇐',\n  lAtail: '⤛',\n  lBarr: '⤎',\n  lE: '≦',\n  lEg: '⪋',\n  lHar: '⥢',\n  lacute: 'ĺ',\n  laemptyv: '⦴',\n  lagran: 'ℒ',\n  lambda: 'λ',\n  lang: '⟨',\n  langd: '⦑',\n  langle: '⟨',\n  lap: '⪅',\n  laquo: '«',\n  larr: '←',\n  larrb: '⇤',\n  larrbfs: '⤟',\n  larrfs: '⤝',\n  larrhk: '↩',\n  larrlp: '↫',\n  larrpl: '⤹',\n  larrsim: '⥳',\n  larrtl: '↢',\n  lat: '⪫',\n  latail: '⤙',\n  late: '⪭',\n  lates: '⪭︀',\n  lbarr: '⤌',\n  lbbrk: '❲',\n  lbrace: '{',\n  lbrack: '[',\n  lbrke: '⦋',\n  lbrksld: '⦏',\n  lbrkslu: '⦍',\n  lcaron: 'ľ',\n  lcedil: 'ļ',\n  lceil: '⌈',\n  lcub: '{',\n  lcy: 'л',\n  ldca: '⤶',\n  ldquo: '“',\n  ldquor: '„',\n  ldrdhar: '⥧',\n  ldrushar: '⥋',\n  ldsh: '↲',\n  le: '≤',\n  leftarrow: '←',\n  leftarrowtail: '↢',\n  leftharpoondown: '↽',\n  leftharpoonup: '↼',\n  leftleftarrows: '⇇',\n  leftrightarrow: '↔',\n  leftrightarrows: '⇆',\n  leftrightharpoons: '⇋',\n  leftrightsquigarrow: '↭',\n  leftthreetimes: '⋋',\n  leg: '⋚',\n  leq: '≤',\n  leqq: '≦',\n  leqslant: '⩽',\n  les: '⩽',\n  lescc: '⪨',\n  lesdot: '⩿',\n  lesdoto: '⪁',\n  lesdotor: '⪃',\n  lesg: '⋚︀',\n  lesges: '⪓',\n  lessapprox: '⪅',\n  lessdot: '⋖',\n  lesseqgtr: '⋚',\n  lesseqqgtr: '⪋',\n  lessgtr: '≶',\n  lesssim: '≲',\n  lfisht: '⥼',\n  lfloor: '⌊',\n  lfr: '𝔩',\n  lg: '≶',\n  lgE: '⪑',\n  lhard: '↽',\n  lharu: '↼',\n  lharul: '⥪',\n  lhblk: '▄',\n  ljcy: 'љ',\n  ll: '≪',\n  llarr: '⇇',\n  llcorner: '⌞',\n  llhard: '⥫',\n  lltri: '◺',\n  lmidot: 'ŀ',\n  lmoust: '⎰',\n  lmoustache: '⎰',\n  lnE: '≨',\n  lnap: '⪉',\n  lnapprox: '⪉',\n  lne: '⪇',\n  lneq: '⪇',\n  lneqq: '≨',\n  lnsim: '⋦',\n  loang: '⟬',\n  loarr: '⇽',\n  lobrk: '⟦',\n  longleftarrow: '⟵',\n  longleftrightarrow: '⟷',\n  longmapsto: '⟼',\n  longrightarrow: '⟶',\n  looparrowleft: '↫',\n  looparrowright: '↬',\n  lopar: '⦅',\n  lopf: '𝕝',\n  loplus: '⨭',\n  lotimes: '⨴',\n  lowast: '∗',\n  lowbar: '_',\n  loz: '◊',\n  lozenge: '◊',\n  lozf: '⧫',\n  lpar: '(',\n  lparlt: '⦓',\n  lrarr: '⇆',\n  lrcorner: '⌟',\n  lrhar: '⇋',\n  lrhard: '⥭',\n  lrm: '‎',\n  lrtri: '⊿',\n  lsaquo: '‹',\n  lscr: '𝓁',\n  lsh: '↰',\n  lsim: '≲',\n  lsime: '⪍',\n  lsimg: '⪏',\n  lsqb: '[',\n  lsquo: '‘',\n  lsquor: '‚',\n  lstrok: 'ł',\n  lt: '<',\n  ltcc: '⪦',\n  ltcir: '⩹',\n  ltdot: '⋖',\n  lthree: '⋋',\n  ltimes: '⋉',\n  ltlarr: '⥶',\n  ltquest: '⩻',\n  ltrPar: '⦖',\n  ltri: '◃',\n  ltrie: '⊴',\n  ltrif: '◂',\n  lurdshar: '⥊',\n  luruhar: '⥦',\n  lvertneqq: '≨︀',\n  lvnE: '≨︀',\n  mDDot: '∺',\n  macr: '¯',\n  male: '♂',\n  malt: '✠',\n  maltese: '✠',\n  map: '↦',\n  mapsto: '↦',\n  mapstodown: '↧',\n  mapstoleft: '↤',\n  mapstoup: '↥',\n  marker: '▮',\n  mcomma: '⨩',\n  mcy: 'м',\n  mdash: '—',\n  measuredangle: '∡',\n  mfr: '𝔪',\n  mho: '℧',\n  micro: 'µ',\n  mid: '∣',\n  midast: '*',\n  midcir: '⫰',\n  middot: '·',\n  minus: '−',\n  minusb: '⊟',\n  minusd: '∸',\n  minusdu: '⨪',\n  mlcp: '⫛',\n  mldr: '…',\n  mnplus: '∓',\n  models: '⊧',\n  mopf: '𝕞',\n  mp: '∓',\n  mscr: '𝓂',\n  mstpos: '∾',\n  mu: 'μ',\n  multimap: '⊸',\n  mumap: '⊸',\n  nGg: '⋙̸',\n  nGt: '≫⃒',\n  nGtv: '≫̸',\n  nLeftarrow: '⇍',\n  nLeftrightarrow: '⇎',\n  nLl: '⋘̸',\n  nLt: '≪⃒',\n  nLtv: '≪̸',\n  nRightarrow: '⇏',\n  nVDash: '⊯',\n  nVdash: '⊮',\n  nabla: '∇',\n  nacute: 'ń',\n  nang: '∠⃒',\n  nap: '≉',\n  napE: '⩰̸',\n  napid: '≋̸',\n  napos: 'ŉ',\n  napprox: '≉',\n  natur: '♮',\n  natural: '♮',\n  naturals: 'ℕ',\n  nbsp: ' ',\n  nbump: '≎̸',\n  nbumpe: '≏̸',\n  ncap: '⩃',\n  ncaron: 'ň',\n  ncedil: 'ņ',\n  ncong: '≇',\n  ncongdot: '⩭̸',\n  ncup: '⩂',\n  ncy: 'н',\n  ndash: '–',\n  ne: '≠',\n  neArr: '⇗',\n  nearhk: '⤤',\n  nearr: '↗',\n  nearrow: '↗',\n  nedot: '≐̸',\n  nequiv: '≢',\n  nesear: '⤨',\n  nesim: '≂̸',\n  nexist: '∄',\n  nexists: '∄',\n  nfr: '𝔫',\n  ngE: '≧̸',\n  nge: '≱',\n  ngeq: '≱',\n  ngeqq: '≧̸',\n  ngeqslant: '⩾̸',\n  nges: '⩾̸',\n  ngsim: '≵',\n  ngt: '≯',\n  ngtr: '≯',\n  nhArr: '⇎',\n  nharr: '↮',\n  nhpar: '⫲',\n  ni: '∋',\n  nis: '⋼',\n  nisd: '⋺',\n  niv: '∋',\n  njcy: 'њ',\n  nlArr: '⇍',\n  nlE: '≦̸',\n  nlarr: '↚',\n  nldr: '‥',\n  nle: '≰',\n  nleftarrow: '↚',\n  nleftrightarrow: '↮',\n  nleq: '≰',\n  nleqq: '≦̸',\n  nleqslant: '⩽̸',\n  nles: '⩽̸',\n  nless: '≮',\n  nlsim: '≴',\n  nlt: '≮',\n  nltri: '⋪',\n  nltrie: '⋬',\n  nmid: '∤',\n  nopf: '𝕟',\n  not: '¬',\n  notin: '∉',\n  notinE: '⋹̸',\n  notindot: '⋵̸',\n  notinva: '∉',\n  notinvb: '⋷',\n  notinvc: '⋶',\n  notni: '∌',\n  notniva: '∌',\n  notnivb: '⋾',\n  notnivc: '⋽',\n  npar: '∦',\n  nparallel: '∦',\n  nparsl: '⫽⃥',\n  npart: '∂̸',\n  npolint: '⨔',\n  npr: '⊀',\n  nprcue: '⋠',\n  npre: '⪯̸',\n  nprec: '⊀',\n  npreceq: '⪯̸',\n  nrArr: '⇏',\n  nrarr: '↛',\n  nrarrc: '⤳̸',\n  nrarrw: '↝̸',\n  nrightarrow: '↛',\n  nrtri: '⋫',\n  nrtrie: '⋭',\n  nsc: '⊁',\n  nsccue: '⋡',\n  nsce: '⪰̸',\n  nscr: '𝓃',\n  nshortmid: '∤',\n  nshortparallel: '∦',\n  nsim: '≁',\n  nsime: '≄',\n  nsimeq: '≄',\n  nsmid: '∤',\n  nspar: '∦',\n  nsqsube: '⋢',\n  nsqsupe: '⋣',\n  nsub: '⊄',\n  nsubE: '⫅̸',\n  nsube: '⊈',\n  nsubset: '⊂⃒',\n  nsubseteq: '⊈',\n  nsubseteqq: '⫅̸',\n  nsucc: '⊁',\n  nsucceq: '⪰̸',\n  nsup: '⊅',\n  nsupE: '⫆̸',\n  nsupe: '⊉',\n  nsupset: '⊃⃒',\n  nsupseteq: '⊉',\n  nsupseteqq: '⫆̸',\n  ntgl: '≹',\n  ntilde: 'ñ',\n  ntlg: '≸',\n  ntriangleleft: '⋪',\n  ntrianglelefteq: '⋬',\n  ntriangleright: '⋫',\n  ntrianglerighteq: '⋭',\n  nu: 'ν',\n  num: '#',\n  numero: '№',\n  numsp: ' ',\n  nvDash: '⊭',\n  nvHarr: '⤄',\n  nvap: '≍⃒',\n  nvdash: '⊬',\n  nvge: '≥⃒',\n  nvgt: '>⃒',\n  nvinfin: '⧞',\n  nvlArr: '⤂',\n  nvle: '≤⃒',\n  nvlt: '<⃒',\n  nvltrie: '⊴⃒',\n  nvrArr: '⤃',\n  nvrtrie: '⊵⃒',\n  nvsim: '∼⃒',\n  nwArr: '⇖',\n  nwarhk: '⤣',\n  nwarr: '↖',\n  nwarrow: '↖',\n  nwnear: '⤧',\n  oS: 'Ⓢ',\n  oacute: 'ó',\n  oast: '⊛',\n  ocir: '⊚',\n  ocirc: 'ô',\n  ocy: 'о',\n  odash: '⊝',\n  odblac: 'ő',\n  odiv: '⨸',\n  odot: '⊙',\n  odsold: '⦼',\n  oelig: 'œ',\n  ofcir: '⦿',\n  ofr: '𝔬',\n  ogon: '˛',\n  ograve: 'ò',\n  ogt: '⧁',\n  ohbar: '⦵',\n  ohm: 'Ω',\n  oint: '∮',\n  olarr: '↺',\n  olcir: '⦾',\n  olcross: '⦻',\n  oline: '‾',\n  olt: '⧀',\n  omacr: 'ō',\n  omega: 'ω',\n  omicron: 'ο',\n  omid: '⦶',\n  ominus: '⊖',\n  oopf: '𝕠',\n  opar: '⦷',\n  operp: '⦹',\n  oplus: '⊕',\n  or: '∨',\n  orarr: '↻',\n  ord: '⩝',\n  order: 'ℴ',\n  orderof: 'ℴ',\n  ordf: 'ª',\n  ordm: 'º',\n  origof: '⊶',\n  oror: '⩖',\n  orslope: '⩗',\n  orv: '⩛',\n  oscr: 'ℴ',\n  oslash: 'ø',\n  osol: '⊘',\n  otilde: 'õ',\n  otimes: '⊗',\n  otimesas: '⨶',\n  ouml: 'ö',\n  ovbar: '⌽',\n  par: '∥',\n  para: '¶',\n  parallel: '∥',\n  parsim: '⫳',\n  parsl: '⫽',\n  part: '∂',\n  pcy: 'п',\n  percnt: '%',\n  period: '.',\n  permil: '‰',\n  perp: '⊥',\n  pertenk: '‱',\n  pfr: '𝔭',\n  phi: 'φ',\n  phiv: 'ϕ',\n  phmmat: 'ℳ',\n  phone: '☎',\n  pi: 'π',\n  pitchfork: '⋔',\n  piv: 'ϖ',\n  planck: 'ℏ',\n  planckh: 'ℎ',\n  plankv: 'ℏ',\n  plus: '+',\n  plusacir: '⨣',\n  plusb: '⊞',\n  pluscir: '⨢',\n  plusdo: '∔',\n  plusdu: '⨥',\n  pluse: '⩲',\n  plusmn: '±',\n  plussim: '⨦',\n  plustwo: '⨧',\n  pm: '±',\n  pointint: '⨕',\n  popf: '𝕡',\n  pound: '£',\n  pr: '≺',\n  prE: '⪳',\n  prap: '⪷',\n  prcue: '≼',\n  pre: '⪯',\n  prec: '≺',\n  precapprox: '⪷',\n  preccurlyeq: '≼',\n  preceq: '⪯',\n  precnapprox: '⪹',\n  precneqq: '⪵',\n  precnsim: '⋨',\n  precsim: '≾',\n  prime: '′',\n  primes: 'ℙ',\n  prnE: '⪵',\n  prnap: '⪹',\n  prnsim: '⋨',\n  prod: '∏',\n  profalar: '⌮',\n  profline: '⌒',\n  profsurf: '⌓',\n  prop: '∝',\n  propto: '∝',\n  prsim: '≾',\n  prurel: '⊰',\n  pscr: '𝓅',\n  psi: 'ψ',\n  puncsp: ' ',\n  qfr: '𝔮',\n  qint: '⨌',\n  qopf: '𝕢',\n  qprime: '⁗',\n  qscr: '𝓆',\n  quaternions: 'ℍ',\n  quatint: '⨖',\n  quest: '?',\n  questeq: '≟',\n  quot: '\"',\n  rAarr: '⇛',\n  rArr: '⇒',\n  rAtail: '⤜',\n  rBarr: '⤏',\n  rHar: '⥤',\n  race: '∽̱',\n  racute: 'ŕ',\n  radic: '√',\n  raemptyv: '⦳',\n  rang: '⟩',\n  rangd: '⦒',\n  range: '⦥',\n  rangle: '⟩',\n  raquo: '»',\n  rarr: '→',\n  rarrap: '⥵',\n  rarrb: '⇥',\n  rarrbfs: '⤠',\n  rarrc: '⤳',\n  rarrfs: '⤞',\n  rarrhk: '↪',\n  rarrlp: '↬',\n  rarrpl: '⥅',\n  rarrsim: '⥴',\n  rarrtl: '↣',\n  rarrw: '↝',\n  ratail: '⤚',\n  ratio: '∶',\n  rationals: 'ℚ',\n  rbarr: '⤍',\n  rbbrk: '❳',\n  rbrace: '}',\n  rbrack: ']',\n  rbrke: '⦌',\n  rbrksld: '⦎',\n  rbrkslu: '⦐',\n  rcaron: 'ř',\n  rcedil: 'ŗ',\n  rceil: '⌉',\n  rcub: '}',\n  rcy: 'р',\n  rdca: '⤷',\n  rdldhar: '⥩',\n  rdquo: '”',\n  rdquor: '”',\n  rdsh: '↳',\n  real: 'ℜ',\n  realine: 'ℛ',\n  realpart: 'ℜ',\n  reals: 'ℝ',\n  rect: '▭',\n  reg: '®',\n  rfisht: '⥽',\n  rfloor: '⌋',\n  rfr: '𝔯',\n  rhard: '⇁',\n  rharu: '⇀',\n  rharul: '⥬',\n  rho: 'ρ',\n  rhov: 'ϱ',\n  rightarrow: '→',\n  rightarrowtail: '↣',\n  rightharpoondown: '⇁',\n  rightharpoonup: '⇀',\n  rightleftarrows: '⇄',\n  rightleftharpoons: '⇌',\n  rightrightarrows: '⇉',\n  rightsquigarrow: '↝',\n  rightthreetimes: '⋌',\n  ring: '˚',\n  risingdotseq: '≓',\n  rlarr: '⇄',\n  rlhar: '⇌',\n  rlm: '‏',\n  rmoust: '⎱',\n  rmoustache: '⎱',\n  rnmid: '⫮',\n  roang: '⟭',\n  roarr: '⇾',\n  robrk: '⟧',\n  ropar: '⦆',\n  ropf: '𝕣',\n  roplus: '⨮',\n  rotimes: '⨵',\n  rpar: ')',\n  rpargt: '⦔',\n  rppolint: '⨒',\n  rrarr: '⇉',\n  rsaquo: '›',\n  rscr: '𝓇',\n  rsh: '↱',\n  rsqb: ']',\n  rsquo: '’',\n  rsquor: '’',\n  rthree: '⋌',\n  rtimes: '⋊',\n  rtri: '▹',\n  rtrie: '⊵',\n  rtrif: '▸',\n  rtriltri: '⧎',\n  ruluhar: '⥨',\n  rx: '℞',\n  sacute: 'ś',\n  sbquo: '‚',\n  sc: '≻',\n  scE: '⪴',\n  scap: '⪸',\n  scaron: 'š',\n  sccue: '≽',\n  sce: '⪰',\n  scedil: 'ş',\n  scirc: 'ŝ',\n  scnE: '⪶',\n  scnap: '⪺',\n  scnsim: '⋩',\n  scpolint: '⨓',\n  scsim: '≿',\n  scy: 'с',\n  sdot: '⋅',\n  sdotb: '⊡',\n  sdote: '⩦',\n  seArr: '⇘',\n  searhk: '⤥',\n  searr: '↘',\n  searrow: '↘',\n  sect: '§',\n  semi: ';',\n  seswar: '⤩',\n  setminus: '∖',\n  setmn: '∖',\n  sext: '✶',\n  sfr: '𝔰',\n  sfrown: '⌢',\n  sharp: '♯',\n  shchcy: 'щ',\n  shcy: 'ш',\n  shortmid: '∣',\n  shortparallel: '∥',\n  shy: '­',\n  sigma: 'σ',\n  sigmaf: 'ς',\n  sigmav: 'ς',\n  sim: '∼',\n  simdot: '⩪',\n  sime: '≃',\n  simeq: '≃',\n  simg: '⪞',\n  simgE: '⪠',\n  siml: '⪝',\n  simlE: '⪟',\n  simne: '≆',\n  simplus: '⨤',\n  simrarr: '⥲',\n  slarr: '←',\n  smallsetminus: '∖',\n  smashp: '⨳',\n  smeparsl: '⧤',\n  smid: '∣',\n  smile: '⌣',\n  smt: '⪪',\n  smte: '⪬',\n  smtes: '⪬︀',\n  softcy: 'ь',\n  sol: '/',\n  solb: '⧄',\n  solbar: '⌿',\n  sopf: '𝕤',\n  spades: '♠',\n  spadesuit: '♠',\n  spar: '∥',\n  sqcap: '⊓',\n  sqcaps: '⊓︀',\n  sqcup: '⊔',\n  sqcups: '⊔︀',\n  sqsub: '⊏',\n  sqsube: '⊑',\n  sqsubset: '⊏',\n  sqsubseteq: '⊑',\n  sqsup: '⊐',\n  sqsupe: '⊒',\n  sqsupset: '⊐',\n  sqsupseteq: '⊒',\n  squ: '□',\n  square: '□',\n  squarf: '▪',\n  squf: '▪',\n  srarr: '→',\n  sscr: '𝓈',\n  ssetmn: '∖',\n  ssmile: '⌣',\n  sstarf: '⋆',\n  star: '☆',\n  starf: '★',\n  straightepsilon: 'ϵ',\n  straightphi: 'ϕ',\n  strns: '¯',\n  sub: '⊂',\n  subE: '⫅',\n  subdot: '⪽',\n  sube: '⊆',\n  subedot: '⫃',\n  submult: '⫁',\n  subnE: '⫋',\n  subne: '⊊',\n  subplus: '⪿',\n  subrarr: '⥹',\n  subset: '⊂',\n  subseteq: '⊆',\n  subseteqq: '⫅',\n  subsetneq: '⊊',\n  subsetneqq: '⫋',\n  subsim: '⫇',\n  subsub: '⫕',\n  subsup: '⫓',\n  succ: '≻',\n  succapprox: '⪸',\n  succcurlyeq: '≽',\n  succeq: '⪰',\n  succnapprox: '⪺',\n  succneqq: '⪶',\n  succnsim: '⋩',\n  succsim: '≿',\n  sum: '∑',\n  sung: '♪',\n  sup1: '¹',\n  sup2: '²',\n  sup3: '³',\n  sup: '⊃',\n  supE: '⫆',\n  supdot: '⪾',\n  supdsub: '⫘',\n  supe: '⊇',\n  supedot: '⫄',\n  suphsol: '⟉',\n  suphsub: '⫗',\n  suplarr: '⥻',\n  supmult: '⫂',\n  supnE: '⫌',\n  supne: '⊋',\n  supplus: '⫀',\n  supset: '⊃',\n  supseteq: '⊇',\n  supseteqq: '⫆',\n  supsetneq: '⊋',\n  supsetneqq: '⫌',\n  supsim: '⫈',\n  supsub: '⫔',\n  supsup: '⫖',\n  swArr: '⇙',\n  swarhk: '⤦',\n  swarr: '↙',\n  swarrow: '↙',\n  swnwar: '⤪',\n  szlig: 'ß',\n  target: '⌖',\n  tau: 'τ',\n  tbrk: '⎴',\n  tcaron: 'ť',\n  tcedil: 'ţ',\n  tcy: 'т',\n  tdot: '⃛',\n  telrec: '⌕',\n  tfr: '𝔱',\n  there4: '∴',\n  therefore: '∴',\n  theta: 'θ',\n  thetasym: 'ϑ',\n  thetav: 'ϑ',\n  thickapprox: '≈',\n  thicksim: '∼',\n  thinsp: ' ',\n  thkap: '≈',\n  thksim: '∼',\n  thorn: 'þ',\n  tilde: '˜',\n  times: '×',\n  timesb: '⊠',\n  timesbar: '⨱',\n  timesd: '⨰',\n  tint: '∭',\n  toea: '⤨',\n  top: '⊤',\n  topbot: '⌶',\n  topcir: '⫱',\n  topf: '𝕥',\n  topfork: '⫚',\n  tosa: '⤩',\n  tprime: '‴',\n  trade: '™',\n  triangle: '▵',\n  triangledown: '▿',\n  triangleleft: '◃',\n  trianglelefteq: '⊴',\n  triangleq: '≜',\n  triangleright: '▹',\n  trianglerighteq: '⊵',\n  tridot: '◬',\n  trie: '≜',\n  triminus: '⨺',\n  triplus: '⨹',\n  trisb: '⧍',\n  tritime: '⨻',\n  trpezium: '⏢',\n  tscr: '𝓉',\n  tscy: 'ц',\n  tshcy: 'ћ',\n  tstrok: 'ŧ',\n  twixt: '≬',\n  twoheadleftarrow: '↞',\n  twoheadrightarrow: '↠',\n  uArr: '⇑',\n  uHar: '⥣',\n  uacute: 'ú',\n  uarr: '↑',\n  ubrcy: 'ў',\n  ubreve: 'ŭ',\n  ucirc: 'û',\n  ucy: 'у',\n  udarr: '⇅',\n  udblac: 'ű',\n  udhar: '⥮',\n  ufisht: '⥾',\n  ufr: '𝔲',\n  ugrave: 'ù',\n  uharl: '↿',\n  uharr: '↾',\n  uhblk: '▀',\n  ulcorn: '⌜',\n  ulcorner: '⌜',\n  ulcrop: '⌏',\n  ultri: '◸',\n  umacr: 'ū',\n  uml: '¨',\n  uogon: 'ų',\n  uopf: '𝕦',\n  uparrow: '↑',\n  updownarrow: '↕',\n  upharpoonleft: '↿',\n  upharpoonright: '↾',\n  uplus: '⊎',\n  upsi: 'υ',\n  upsih: 'ϒ',\n  upsilon: 'υ',\n  upuparrows: '⇈',\n  urcorn: '⌝',\n  urcorner: '⌝',\n  urcrop: '⌎',\n  uring: 'ů',\n  urtri: '◹',\n  uscr: '𝓊',\n  utdot: '⋰',\n  utilde: 'ũ',\n  utri: '▵',\n  utrif: '▴',\n  uuarr: '⇈',\n  uuml: 'ü',\n  uwangle: '⦧',\n  vArr: '⇕',\n  vBar: '⫨',\n  vBarv: '⫩',\n  vDash: '⊨',\n  vangrt: '⦜',\n  varepsilon: 'ϵ',\n  varkappa: 'ϰ',\n  varnothing: '∅',\n  varphi: 'ϕ',\n  varpi: 'ϖ',\n  varpropto: '∝',\n  varr: '↕',\n  varrho: 'ϱ',\n  varsigma: 'ς',\n  varsubsetneq: '⊊︀',\n  varsubsetneqq: '⫋︀',\n  varsupsetneq: '⊋︀',\n  varsupsetneqq: '⫌︀',\n  vartheta: 'ϑ',\n  vartriangleleft: '⊲',\n  vartriangleright: '⊳',\n  vcy: 'в',\n  vdash: '⊢',\n  vee: '∨',\n  veebar: '⊻',\n  veeeq: '≚',\n  vellip: '⋮',\n  verbar: '|',\n  vert: '|',\n  vfr: '𝔳',\n  vltri: '⊲',\n  vnsub: '⊂⃒',\n  vnsup: '⊃⃒',\n  vopf: '𝕧',\n  vprop: '∝',\n  vrtri: '⊳',\n  vscr: '𝓋',\n  vsubnE: '⫋︀',\n  vsubne: '⊊︀',\n  vsupnE: '⫌︀',\n  vsupne: '⊋︀',\n  vzigzag: '⦚',\n  wcirc: 'ŵ',\n  wedbar: '⩟',\n  wedge: '∧',\n  wedgeq: '≙',\n  weierp: '℘',\n  wfr: '𝔴',\n  wopf: '𝕨',\n  wp: '℘',\n  wr: '≀',\n  wreath: '≀',\n  wscr: '𝓌',\n  xcap: '⋂',\n  xcirc: '◯',\n  xcup: '⋃',\n  xdtri: '▽',\n  xfr: '𝔵',\n  xhArr: '⟺',\n  xharr: '⟷',\n  xi: 'ξ',\n  xlArr: '⟸',\n  xlarr: '⟵',\n  xmap: '⟼',\n  xnis: '⋻',\n  xodot: '⨀',\n  xopf: '𝕩',\n  xoplus: '⨁',\n  xotime: '⨂',\n  xrArr: '⟹',\n  xrarr: '⟶',\n  xscr: '𝓍',\n  xsqcup: '⨆',\n  xuplus: '⨄',\n  xutri: '△',\n  xvee: '⋁',\n  xwedge: '⋀',\n  yacute: 'ý',\n  yacy: 'я',\n  ycirc: 'ŷ',\n  ycy: 'ы',\n  yen: '¥',\n  yfr: '𝔶',\n  yicy: 'ї',\n  yopf: '𝕪',\n  yscr: '𝓎',\n  yucy: 'ю',\n  yuml: 'ÿ',\n  zacute: 'ź',\n  zcaron: 'ž',\n  zcy: 'з',\n  zdot: 'ż',\n  zeetrf: 'ℨ',\n  zeta: 'ζ',\n  zfr: '𝔷',\n  zhcy: 'ж',\n  zigrarr: '⇝',\n  zopf: '𝕫',\n  zscr: '𝓏',\n  zwj: '‍',\n  zwnj: '‌'\n}\n","import {characterEntities} from 'character-entities'\n\n// To do: next major: use `Object.hasOwn`.\nconst own = {}.hasOwnProperty\n\n/**\n * Decode a single character reference (without the `&` or `;`).\n * You probably only need this when you’re building parsers yourself that follow\n * different rules compared to HTML.\n * This is optimized to be tiny in browsers.\n *\n * @param {string} value\n *   `notin` (named), `#123` (deci), `#x123` (hexa).\n * @returns {string|false}\n *   Decoded reference.\n */\nexport function decodeNamedCharacterReference(value) {\n  return own.call(characterEntities, value) ? characterEntities[value] : false\n}\n","/**\n * @import {\n *   Code,\n *   Construct,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { decodeNamedCharacterReference } from 'decode-named-character-reference';\nimport { asciiAlphanumeric, asciiDigit, asciiHexDigit } from 'micromark-util-character';\n/** @type {Construct} */\nexport const characterReference = {\n  name: 'characterReference',\n  tokenize: tokenizeCharacterReference\n};\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeCharacterReference(effects, ok, nok) {\n  const self = this;\n  let size = 0;\n  /** @type {number} */\n  let max;\n  /** @type {(code: Code) => boolean} */\n  let test;\n  return start;\n\n  /**\n   * Start of character reference.\n   *\n   * ```markdown\n   * > | a&amp;b\n   *      ^\n   * > | a&#123;b\n   *      ^\n   * > | a&#x9;b\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(\"characterReference\");\n    effects.enter(\"characterReferenceMarker\");\n    effects.consume(code);\n    effects.exit(\"characterReferenceMarker\");\n    return open;\n  }\n\n  /**\n   * After `&`, at `#` for numeric references or alphanumeric for named\n   * references.\n   *\n   * ```markdown\n   * > | a&amp;b\n   *       ^\n   * > | a&#123;b\n   *       ^\n   * > | a&#x9;b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (code === 35) {\n      effects.enter(\"characterReferenceMarkerNumeric\");\n      effects.consume(code);\n      effects.exit(\"characterReferenceMarkerNumeric\");\n      return numeric;\n    }\n    effects.enter(\"characterReferenceValue\");\n    max = 31;\n    test = asciiAlphanumeric;\n    return value(code);\n  }\n\n  /**\n   * After `#`, at `x` for hexadecimals or digit for decimals.\n   *\n   * ```markdown\n   * > | a&#123;b\n   *        ^\n   * > | a&#x9;b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function numeric(code) {\n    if (code === 88 || code === 120) {\n      effects.enter(\"characterReferenceMarkerHexadecimal\");\n      effects.consume(code);\n      effects.exit(\"characterReferenceMarkerHexadecimal\");\n      effects.enter(\"characterReferenceValue\");\n      max = 6;\n      test = asciiHexDigit;\n      return value;\n    }\n    effects.enter(\"characterReferenceValue\");\n    max = 7;\n    test = asciiDigit;\n    return value(code);\n  }\n\n  /**\n   * After markers (`&#x`, `&#`, or `&`), in value, before `;`.\n   *\n   * The character reference kind defines what and how many characters are\n   * allowed.\n   *\n   * ```markdown\n   * > | a&amp;b\n   *       ^^^\n   * > | a&#123;b\n   *        ^^^\n   * > | a&#x9;b\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function value(code) {\n    if (code === 59 && size) {\n      const token = effects.exit(\"characterReferenceValue\");\n      if (test === asciiAlphanumeric && !decodeNamedCharacterReference(self.sliceSerialize(token))) {\n        return nok(code);\n      }\n\n      // To do: `markdown-rs` uses a different name:\n      // `CharacterReferenceMarkerSemi`.\n      effects.enter(\"characterReferenceMarker\");\n      effects.consume(code);\n      effects.exit(\"characterReferenceMarker\");\n      effects.exit(\"characterReference\");\n      return ok;\n    }\n    if (test(code) && size++ < max) {\n      effects.consume(code);\n      return value;\n    }\n    return nok(code);\n  }\n}","/**\n * @import {\n *   Code,\n *   Construct,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding, markdownSpace } from 'micromark-util-character';\n/** @type {Construct} */\nconst nonLazyContinuation = {\n  partial: true,\n  tokenize: tokenizeNonLazyContinuation\n};\n\n/** @type {Construct} */\nexport const codeFenced = {\n  concrete: true,\n  name: 'codeFenced',\n  tokenize: tokenizeCodeFenced\n};\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeCodeFenced(effects, ok, nok) {\n  const self = this;\n  /** @type {Construct} */\n  const closeStart = {\n    partial: true,\n    tokenize: tokenizeCloseStart\n  };\n  let initialPrefix = 0;\n  let sizeOpen = 0;\n  /** @type {NonNullable<Code>} */\n  let marker;\n  return start;\n\n  /**\n   * Start of code.\n   *\n   * ```markdown\n   * > | ~~~js\n   *     ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // To do: parse whitespace like `markdown-rs`.\n    return beforeSequenceOpen(code);\n  }\n\n  /**\n   * In opening fence, after prefix, at sequence.\n   *\n   * ```markdown\n   * > | ~~~js\n   *     ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function beforeSequenceOpen(code) {\n    const tail = self.events[self.events.length - 1];\n    initialPrefix = tail && tail[1].type === \"linePrefix\" ? tail[2].sliceSerialize(tail[1], true).length : 0;\n    marker = code;\n    effects.enter(\"codeFenced\");\n    effects.enter(\"codeFencedFence\");\n    effects.enter(\"codeFencedFenceSequence\");\n    return sequenceOpen(code);\n  }\n\n  /**\n   * In opening fence sequence.\n   *\n   * ```markdown\n   * > | ~~~js\n   *      ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceOpen(code) {\n    if (code === marker) {\n      sizeOpen++;\n      effects.consume(code);\n      return sequenceOpen;\n    }\n    if (sizeOpen < 3) {\n      return nok(code);\n    }\n    effects.exit(\"codeFencedFenceSequence\");\n    return markdownSpace(code) ? factorySpace(effects, infoBefore, \"whitespace\")(code) : infoBefore(code);\n  }\n\n  /**\n   * In opening fence, after the sequence (and optional whitespace), before info.\n   *\n   * ```markdown\n   * > | ~~~js\n   *        ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function infoBefore(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit(\"codeFencedFence\");\n      return self.interrupt ? ok(code) : effects.check(nonLazyContinuation, atNonLazyBreak, after)(code);\n    }\n    effects.enter(\"codeFencedFenceInfo\");\n    effects.enter(\"chunkString\", {\n      contentType: \"string\"\n    });\n    return info(code);\n  }\n\n  /**\n   * In info.\n   *\n   * ```markdown\n   * > | ~~~js\n   *        ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function info(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit(\"chunkString\");\n      effects.exit(\"codeFencedFenceInfo\");\n      return infoBefore(code);\n    }\n    if (markdownSpace(code)) {\n      effects.exit(\"chunkString\");\n      effects.exit(\"codeFencedFenceInfo\");\n      return factorySpace(effects, metaBefore, \"whitespace\")(code);\n    }\n    if (code === 96 && code === marker) {\n      return nok(code);\n    }\n    effects.consume(code);\n    return info;\n  }\n\n  /**\n   * In opening fence, after info and whitespace, before meta.\n   *\n   * ```markdown\n   * > | ~~~js eval\n   *           ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function metaBefore(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return infoBefore(code);\n    }\n    effects.enter(\"codeFencedFenceMeta\");\n    effects.enter(\"chunkString\", {\n      contentType: \"string\"\n    });\n    return meta(code);\n  }\n\n  /**\n   * In meta.\n   *\n   * ```markdown\n   * > | ~~~js eval\n   *           ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function meta(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit(\"chunkString\");\n      effects.exit(\"codeFencedFenceMeta\");\n      return infoBefore(code);\n    }\n    if (code === 96 && code === marker) {\n      return nok(code);\n    }\n    effects.consume(code);\n    return meta;\n  }\n\n  /**\n   * At eol/eof in code, before a non-lazy closing fence or content.\n   *\n   * ```markdown\n   * > | ~~~js\n   *          ^\n   * > | alert(1)\n   *             ^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function atNonLazyBreak(code) {\n    return effects.attempt(closeStart, after, contentBefore)(code);\n  }\n\n  /**\n   * Before code content, not a closing fence, at eol.\n   *\n   * ```markdown\n   *   | ~~~js\n   * > | alert(1)\n   *             ^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function contentBefore(code) {\n    effects.enter(\"lineEnding\");\n    effects.consume(code);\n    effects.exit(\"lineEnding\");\n    return contentStart;\n  }\n\n  /**\n   * Before code content, not a closing fence.\n   *\n   * ```markdown\n   *   | ~~~js\n   * > | alert(1)\n   *     ^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function contentStart(code) {\n    return initialPrefix > 0 && markdownSpace(code) ? factorySpace(effects, beforeContentChunk, \"linePrefix\", initialPrefix + 1)(code) : beforeContentChunk(code);\n  }\n\n  /**\n   * Before code content, after optional prefix.\n   *\n   * ```markdown\n   *   | ~~~js\n   * > | alert(1)\n   *     ^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function beforeContentChunk(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return effects.check(nonLazyContinuation, atNonLazyBreak, after)(code);\n    }\n    effects.enter(\"codeFlowValue\");\n    return contentChunk(code);\n  }\n\n  /**\n   * In code content.\n   *\n   * ```markdown\n   *   | ~~~js\n   * > | alert(1)\n   *     ^^^^^^^^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function contentChunk(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit(\"codeFlowValue\");\n      return beforeContentChunk(code);\n    }\n    effects.consume(code);\n    return contentChunk;\n  }\n\n  /**\n   * After code.\n   *\n   * ```markdown\n   *   | ~~~js\n   *   | alert(1)\n   * > | ~~~\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    effects.exit(\"codeFenced\");\n    return ok(code);\n  }\n\n  /**\n   * @this {TokenizeContext}\n   *   Context.\n   * @type {Tokenizer}\n   */\n  function tokenizeCloseStart(effects, ok, nok) {\n    let size = 0;\n    return startBefore;\n\n    /**\n     *\n     *\n     * @type {State}\n     */\n    function startBefore(code) {\n      effects.enter(\"lineEnding\");\n      effects.consume(code);\n      effects.exit(\"lineEnding\");\n      return start;\n    }\n\n    /**\n     * Before closing fence, at optional whitespace.\n     *\n     * ```markdown\n     *   | ~~~js\n     *   | alert(1)\n     * > | ~~~\n     *     ^\n     * ```\n     *\n     * @type {State}\n     */\n    function start(code) {\n      // Always populated by defaults.\n\n      // To do: `enter` here or in next state?\n      effects.enter(\"codeFencedFence\");\n      return markdownSpace(code) ? factorySpace(effects, beforeSequenceClose, \"linePrefix\", self.parser.constructs.disable.null.includes('codeIndented') ? undefined : 4)(code) : beforeSequenceClose(code);\n    }\n\n    /**\n     * In closing fence, after optional whitespace, at sequence.\n     *\n     * ```markdown\n     *   | ~~~js\n     *   | alert(1)\n     * > | ~~~\n     *     ^\n     * ```\n     *\n     * @type {State}\n     */\n    function beforeSequenceClose(code) {\n      if (code === marker) {\n        effects.enter(\"codeFencedFenceSequence\");\n        return sequenceClose(code);\n      }\n      return nok(code);\n    }\n\n    /**\n     * In closing fence sequence.\n     *\n     * ```markdown\n     *   | ~~~js\n     *   | alert(1)\n     * > | ~~~\n     *     ^\n     * ```\n     *\n     * @type {State}\n     */\n    function sequenceClose(code) {\n      if (code === marker) {\n        size++;\n        effects.consume(code);\n        return sequenceClose;\n      }\n      if (size >= sizeOpen) {\n        effects.exit(\"codeFencedFenceSequence\");\n        return markdownSpace(code) ? factorySpace(effects, sequenceCloseAfter, \"whitespace\")(code) : sequenceCloseAfter(code);\n      }\n      return nok(code);\n    }\n\n    /**\n     * After closing fence sequence, after optional whitespace.\n     *\n     * ```markdown\n     *   | ~~~js\n     *   | alert(1)\n     * > | ~~~\n     *        ^\n     * ```\n     *\n     * @type {State}\n     */\n    function sequenceCloseAfter(code) {\n      if (code === null || markdownLineEnding(code)) {\n        effects.exit(\"codeFencedFence\");\n        return ok(code);\n      }\n      return nok(code);\n    }\n  }\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeNonLazyContinuation(effects, ok, nok) {\n  const self = this;\n  return start;\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (code === null) {\n      return nok(code);\n    }\n    effects.enter(\"lineEnding\");\n    effects.consume(code);\n    effects.exit(\"lineEnding\");\n    return lineStart;\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function lineStart(code) {\n    return self.parser.lazy[self.now().line] ? nok(code) : ok(code);\n  }\n}","/**\n * @import {\n *   Construct,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding, markdownSpace } from 'micromark-util-character';\n/** @type {Construct} */\nexport const codeIndented = {\n  name: 'codeIndented',\n  tokenize: tokenizeCodeIndented\n};\n\n/** @type {Construct} */\nconst furtherStart = {\n  partial: true,\n  tokenize: tokenizeFurtherStart\n};\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeCodeIndented(effects, ok, nok) {\n  const self = this;\n  return start;\n\n  /**\n   * Start of code (indented).\n   *\n   * > **Parsing note**: it is not needed to check if this first line is a\n   * > filled line (that it has a non-whitespace character), because blank lines\n   * > are parsed already, so we never run into that.\n   *\n   * ```markdown\n   * > |     aaa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // To do: manually check if interrupting like `markdown-rs`.\n\n    effects.enter(\"codeIndented\");\n    // To do: use an improved `space_or_tab` function like `markdown-rs`,\n    // so that we can drop the next state.\n    return factorySpace(effects, afterPrefix, \"linePrefix\", 4 + 1)(code);\n  }\n\n  /**\n   * At start, after 1 or 4 spaces.\n   *\n   * ```markdown\n   * > |     aaa\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1];\n    return tail && tail[1].type === \"linePrefix\" && tail[2].sliceSerialize(tail[1], true).length >= 4 ? atBreak(code) : nok(code);\n  }\n\n  /**\n   * At a break.\n   *\n   * ```markdown\n   * > |     aaa\n   *         ^  ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (code === null) {\n      return after(code);\n    }\n    if (markdownLineEnding(code)) {\n      return effects.attempt(furtherStart, atBreak, after)(code);\n    }\n    effects.enter(\"codeFlowValue\");\n    return inside(code);\n  }\n\n  /**\n   * In code content.\n   *\n   * ```markdown\n   * > |     aaa\n   *         ^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit(\"codeFlowValue\");\n      return atBreak(code);\n    }\n    effects.consume(code);\n    return inside;\n  }\n\n  /** @type {State} */\n  function after(code) {\n    effects.exit(\"codeIndented\");\n    // To do: allow interrupting like `markdown-rs`.\n    // Feel free to interrupt.\n    // tokenizer.interrupt = false\n    return ok(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeFurtherStart(effects, ok, nok) {\n  const self = this;\n  return furtherStart;\n\n  /**\n   * At eol, trying to parse another indent.\n   *\n   * ```markdown\n   * > |     aaa\n   *            ^\n   *   |     bbb\n   * ```\n   *\n   * @type {State}\n   */\n  function furtherStart(code) {\n    // To do: improve `lazy` / `pierce` handling.\n    // If this is a lazy line, it can’t be code.\n    if (self.parser.lazy[self.now().line]) {\n      return nok(code);\n    }\n    if (markdownLineEnding(code)) {\n      effects.enter(\"lineEnding\");\n      effects.consume(code);\n      effects.exit(\"lineEnding\");\n      return furtherStart;\n    }\n\n    // To do: the code here in `micromark-js` is a bit different from\n    // `markdown-rs` because there it can attempt spaces.\n    // We can’t yet.\n    //\n    // To do: use an improved `space_or_tab` function like `markdown-rs`,\n    // so that we can drop the next state.\n    return factorySpace(effects, afterPrefix, \"linePrefix\", 4 + 1)(code);\n  }\n\n  /**\n   * At start, after 1 or 4 spaces.\n   *\n   * ```markdown\n   * > |     aaa\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1];\n    return tail && tail[1].type === \"linePrefix\" && tail[2].sliceSerialize(tail[1], true).length >= 4 ? ok(code) : markdownLineEnding(code) ? furtherStart(code) : nok(code);\n  }\n}","/**\n * @import {\n *   Construct,\n *   Previous,\n *   Resolver,\n *   State,\n *   TokenizeContext,\n *   Tokenizer,\n *   Token\n * } from 'micromark-util-types'\n */\n\nimport { markdownLineEnding } from 'micromark-util-character';\n/** @type {Construct} */\nexport const codeText = {\n  name: 'codeText',\n  previous,\n  resolve: resolveCodeText,\n  tokenize: tokenizeCodeText\n};\n\n// To do: next major: don’t resolve, like `markdown-rs`.\n/** @type {Resolver} */\nfunction resolveCodeText(events) {\n  let tailExitIndex = events.length - 4;\n  let headEnterIndex = 3;\n  /** @type {number} */\n  let index;\n  /** @type {number | undefined} */\n  let enter;\n\n  // If we start and end with an EOL or a space.\n  if ((events[headEnterIndex][1].type === \"lineEnding\" || events[headEnterIndex][1].type === 'space') && (events[tailExitIndex][1].type === \"lineEnding\" || events[tailExitIndex][1].type === 'space')) {\n    index = headEnterIndex;\n\n    // And we have data.\n    while (++index < tailExitIndex) {\n      if (events[index][1].type === \"codeTextData\") {\n        // Then we have padding.\n        events[headEnterIndex][1].type = \"codeTextPadding\";\n        events[tailExitIndex][1].type = \"codeTextPadding\";\n        headEnterIndex += 2;\n        tailExitIndex -= 2;\n        break;\n      }\n    }\n  }\n\n  // Merge adjacent spaces and data.\n  index = headEnterIndex - 1;\n  tailExitIndex++;\n  while (++index <= tailExitIndex) {\n    if (enter === undefined) {\n      if (index !== tailExitIndex && events[index][1].type !== \"lineEnding\") {\n        enter = index;\n      }\n    } else if (index === tailExitIndex || events[index][1].type === \"lineEnding\") {\n      events[enter][1].type = \"codeTextData\";\n      if (index !== enter + 2) {\n        events[enter][1].end = events[index - 1][1].end;\n        events.splice(enter + 2, index - enter - 2);\n        tailExitIndex -= index - enter - 2;\n        index = enter + 2;\n      }\n      enter = undefined;\n    }\n  }\n  return events;\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Previous}\n */\nfunction previous(code) {\n  // If there is a previous code, there will always be a tail.\n  return code !== 96 || this.events[this.events.length - 1][1].type === \"characterEscape\";\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeCodeText(effects, ok, nok) {\n  const self = this;\n  let sizeOpen = 0;\n  /** @type {number} */\n  let size;\n  /** @type {Token} */\n  let token;\n  return start;\n\n  /**\n   * Start of code (text).\n   *\n   * ```markdown\n   * > | `a`\n   *     ^\n   * > | \\`a`\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(\"codeText\");\n    effects.enter(\"codeTextSequence\");\n    return sequenceOpen(code);\n  }\n\n  /**\n   * In opening sequence.\n   *\n   * ```markdown\n   * > | `a`\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceOpen(code) {\n    if (code === 96) {\n      effects.consume(code);\n      sizeOpen++;\n      return sequenceOpen;\n    }\n    effects.exit(\"codeTextSequence\");\n    return between(code);\n  }\n\n  /**\n   * Between something and something else.\n   *\n   * ```markdown\n   * > | `a`\n   *      ^^\n   * ```\n   *\n   * @type {State}\n   */\n  function between(code) {\n    // EOF.\n    if (code === null) {\n      return nok(code);\n    }\n\n    // To do: next major: don’t do spaces in resolve, but when compiling,\n    // like `markdown-rs`.\n    // Tabs don’t work, and virtual spaces don’t make sense.\n    if (code === 32) {\n      effects.enter('space');\n      effects.consume(code);\n      effects.exit('space');\n      return between;\n    }\n\n    // Closing fence? Could also be data.\n    if (code === 96) {\n      token = effects.enter(\"codeTextSequence\");\n      size = 0;\n      return sequenceClose(code);\n    }\n    if (markdownLineEnding(code)) {\n      effects.enter(\"lineEnding\");\n      effects.consume(code);\n      effects.exit(\"lineEnding\");\n      return between;\n    }\n\n    // Data.\n    effects.enter(\"codeTextData\");\n    return data(code);\n  }\n\n  /**\n   * In data.\n   *\n   * ```markdown\n   * > | `a`\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function data(code) {\n    if (code === null || code === 32 || code === 96 || markdownLineEnding(code)) {\n      effects.exit(\"codeTextData\");\n      return between(code);\n    }\n    effects.consume(code);\n    return data;\n  }\n\n  /**\n   * In closing sequence.\n   *\n   * ```markdown\n   * > | `a`\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceClose(code) {\n    // More.\n    if (code === 96) {\n      effects.consume(code);\n      size++;\n      return sequenceClose;\n    }\n\n    // Done!\n    if (size === sizeOpen) {\n      effects.exit(\"codeTextSequence\");\n      effects.exit(\"codeText\");\n      return ok(code);\n    }\n\n    // More or less accents: mark as data.\n    token.type = \"codeTextData\";\n    return data(code);\n  }\n}","/**\n * @import {Effects, State, TokenType} from 'micromark-util-types'\n */\n\nimport { asciiControl, markdownLineEndingOrSpace, markdownLineEnding } from 'micromark-util-character';\n/**\n * Parse destinations.\n *\n * ###### Examples\n *\n * ```markdown\n * <a>\n * <a\\>b>\n * <a b>\n * <a)>\n * a\n * a\\)b\n * a(b)c\n * a(b)\n * ```\n *\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @param {State} nok\n *   State switched to when unsuccessful.\n * @param {TokenType} type\n *   Type for whole (`<a>` or `b`).\n * @param {TokenType} literalType\n *   Type when enclosed (`<a>`).\n * @param {TokenType} literalMarkerType\n *   Type for enclosing (`<` and `>`).\n * @param {TokenType} rawType\n *   Type when not enclosed (`b`).\n * @param {TokenType} stringType\n *   Type for the value (`a` or `b`).\n * @param {number | undefined} [max=Infinity]\n *   Depth of nested parens (inclusive).\n * @returns {State}\n *   Start state.\n */\nexport function factoryDestination(effects, ok, nok, type, literalType, literalMarkerType, rawType, stringType, max) {\n  const limit = max || Number.POSITIVE_INFINITY;\n  let balance = 0;\n  return start;\n\n  /**\n   * Start of destination.\n   *\n   * ```markdown\n   * > | <aa>\n   *     ^\n   * > | aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (code === 60) {\n      effects.enter(type);\n      effects.enter(literalType);\n      effects.enter(literalMarkerType);\n      effects.consume(code);\n      effects.exit(literalMarkerType);\n      return enclosedBefore;\n    }\n\n    // ASCII control, space, closing paren.\n    if (code === null || code === 32 || code === 41 || asciiControl(code)) {\n      return nok(code);\n    }\n    effects.enter(type);\n    effects.enter(rawType);\n    effects.enter(stringType);\n    effects.enter(\"chunkString\", {\n      contentType: \"string\"\n    });\n    return raw(code);\n  }\n\n  /**\n   * After `<`, at an enclosed destination.\n   *\n   * ```markdown\n   * > | <aa>\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function enclosedBefore(code) {\n    if (code === 62) {\n      effects.enter(literalMarkerType);\n      effects.consume(code);\n      effects.exit(literalMarkerType);\n      effects.exit(literalType);\n      effects.exit(type);\n      return ok;\n    }\n    effects.enter(stringType);\n    effects.enter(\"chunkString\", {\n      contentType: \"string\"\n    });\n    return enclosed(code);\n  }\n\n  /**\n   * In enclosed destination.\n   *\n   * ```markdown\n   * > | <aa>\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function enclosed(code) {\n    if (code === 62) {\n      effects.exit(\"chunkString\");\n      effects.exit(stringType);\n      return enclosedBefore(code);\n    }\n    if (code === null || code === 60 || markdownLineEnding(code)) {\n      return nok(code);\n    }\n    effects.consume(code);\n    return code === 92 ? enclosedEscape : enclosed;\n  }\n\n  /**\n   * After `\\`, at a special character.\n   *\n   * ```markdown\n   * > | <a\\*a>\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function enclosedEscape(code) {\n    if (code === 60 || code === 62 || code === 92) {\n      effects.consume(code);\n      return enclosed;\n    }\n    return enclosed(code);\n  }\n\n  /**\n   * In raw destination.\n   *\n   * ```markdown\n   * > | aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function raw(code) {\n    if (!balance && (code === null || code === 41 || markdownLineEndingOrSpace(code))) {\n      effects.exit(\"chunkString\");\n      effects.exit(stringType);\n      effects.exit(rawType);\n      effects.exit(type);\n      return ok(code);\n    }\n    if (balance < limit && code === 40) {\n      effects.consume(code);\n      balance++;\n      return raw;\n    }\n    if (code === 41) {\n      effects.consume(code);\n      balance--;\n      return raw;\n    }\n\n    // ASCII control (but *not* `\\0`) and space and `(`.\n    // Note: in `markdown-rs`, `\\0` exists in codes, in `micromark-js` it\n    // doesn’t.\n    if (code === null || code === 32 || code === 40 || asciiControl(code)) {\n      return nok(code);\n    }\n    effects.consume(code);\n    return code === 92 ? rawEscape : raw;\n  }\n\n  /**\n   * After `\\`, at special character.\n   *\n   * ```markdown\n   * > | a\\*a\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function rawEscape(code) {\n    if (code === 40 || code === 41 || code === 92) {\n      effects.consume(code);\n      return raw;\n    }\n    return raw(code);\n  }\n}","/**\n * @import {\n *   Effects,\n *   State,\n *   TokenizeContext,\n *   TokenType\n * } from 'micromark-util-types'\n */\n\nimport { markdownLineEnding, markdownSpace } from 'micromark-util-character';\n/**\n * Parse labels.\n *\n * > 👉 **Note**: labels in markdown are capped at 999 characters in the string.\n *\n * ###### Examples\n *\n * ```markdown\n * [a]\n * [a\n * b]\n * [a\\]b]\n * ```\n *\n * @this {TokenizeContext}\n *   Tokenize context.\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @param {State} nok\n *   State switched to when unsuccessful.\n * @param {TokenType} type\n *   Type of the whole label (`[a]`).\n * @param {TokenType} markerType\n *   Type for the markers (`[` and `]`).\n * @param {TokenType} stringType\n *   Type for the identifier (`a`).\n * @returns {State}\n *   Start state.\n */\nexport function factoryLabel(effects, ok, nok, type, markerType, stringType) {\n  const self = this;\n  let size = 0;\n  /** @type {boolean} */\n  let seen;\n  return start;\n\n  /**\n   * Start of label.\n   *\n   * ```markdown\n   * > | [a]\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(type);\n    effects.enter(markerType);\n    effects.consume(code);\n    effects.exit(markerType);\n    effects.enter(stringType);\n    return atBreak;\n  }\n\n  /**\n   * In label, at something, before something else.\n   *\n   * ```markdown\n   * > | [a]\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (size > 999 || code === null || code === 91 || code === 93 && !seen ||\n    // To do: remove in the future once we’ve switched from\n    // `micromark-extension-footnote` to `micromark-extension-gfm-footnote`,\n    // which doesn’t need this.\n    // Hidden footnotes hook.\n    /* c8 ignore next 3 */\n    code === 94 && !size && '_hiddenFootnoteSupport' in self.parser.constructs) {\n      return nok(code);\n    }\n    if (code === 93) {\n      effects.exit(stringType);\n      effects.enter(markerType);\n      effects.consume(code);\n      effects.exit(markerType);\n      effects.exit(type);\n      return ok;\n    }\n\n    // To do: indent? Link chunks and EOLs together?\n    if (markdownLineEnding(code)) {\n      effects.enter(\"lineEnding\");\n      effects.consume(code);\n      effects.exit(\"lineEnding\");\n      return atBreak;\n    }\n    effects.enter(\"chunkString\", {\n      contentType: \"string\"\n    });\n    return labelInside(code);\n  }\n\n  /**\n   * In label, in text.\n   *\n   * ```markdown\n   * > | [a]\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelInside(code) {\n    if (code === null || code === 91 || code === 93 || markdownLineEnding(code) || size++ > 999) {\n      effects.exit(\"chunkString\");\n      return atBreak(code);\n    }\n    effects.consume(code);\n    if (!seen) seen = !markdownSpace(code);\n    return code === 92 ? labelEscape : labelInside;\n  }\n\n  /**\n   * After `\\`, at a special character.\n   *\n   * ```markdown\n   * > | [a\\*a]\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelEscape(code) {\n    if (code === 91 || code === 92 || code === 93) {\n      effects.consume(code);\n      size++;\n      return labelInside;\n    }\n    return labelInside(code);\n  }\n}","/**\n * @import {\n *   Code,\n *   Effects,\n *   State,\n *   TokenType\n * } from 'micromark-util-types'\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding } from 'micromark-util-character';\n/**\n * Parse titles.\n *\n * ###### Examples\n *\n * ```markdown\n * \"a\"\n * 'b'\n * (c)\n * \"a\n * b\"\n * 'a\n *     b'\n * (a\\)b)\n * ```\n *\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @param {State} nok\n *   State switched to when unsuccessful.\n * @param {TokenType} type\n *   Type of the whole title (`\"a\"`, `'b'`, `(c)`).\n * @param {TokenType} markerType\n *   Type for the markers (`\"`, `'`, `(`, and `)`).\n * @param {TokenType} stringType\n *   Type for the value (`a`).\n * @returns {State}\n *   Start state.\n */\nexport function factoryTitle(effects, ok, nok, type, markerType, stringType) {\n  /** @type {NonNullable<Code>} */\n  let marker;\n  return start;\n\n  /**\n   * Start of title.\n   *\n   * ```markdown\n   * > | \"a\"\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (code === 34 || code === 39 || code === 40) {\n      effects.enter(type);\n      effects.enter(markerType);\n      effects.consume(code);\n      effects.exit(markerType);\n      marker = code === 40 ? 41 : code;\n      return begin;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After opening marker.\n   *\n   * This is also used at the closing marker.\n   *\n   * ```markdown\n   * > | \"a\"\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function begin(code) {\n    if (code === marker) {\n      effects.enter(markerType);\n      effects.consume(code);\n      effects.exit(markerType);\n      effects.exit(type);\n      return ok;\n    }\n    effects.enter(stringType);\n    return atBreak(code);\n  }\n\n  /**\n   * At something, before something else.\n   *\n   * ```markdown\n   * > | \"a\"\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (code === marker) {\n      effects.exit(stringType);\n      return begin(marker);\n    }\n    if (code === null) {\n      return nok(code);\n    }\n\n    // Note: blank lines can’t exist in content.\n    if (markdownLineEnding(code)) {\n      // To do: use `space_or_tab_eol_with_options`, connect.\n      effects.enter(\"lineEnding\");\n      effects.consume(code);\n      effects.exit(\"lineEnding\");\n      return factorySpace(effects, atBreak, \"linePrefix\");\n    }\n    effects.enter(\"chunkString\", {\n      contentType: \"string\"\n    });\n    return inside(code);\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    if (code === marker || code === null || markdownLineEnding(code)) {\n      effects.exit(\"chunkString\");\n      return atBreak(code);\n    }\n    effects.consume(code);\n    return code === 92 ? escape : inside;\n  }\n\n  /**\n   * After `\\`, at a special character.\n   *\n   * ```markdown\n   * > | \"a\\*b\"\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function escape(code) {\n    if (code === marker || code === 92) {\n      effects.consume(code);\n      return inside;\n    }\n    return inside(code);\n  }\n}","/**\n * @import {Effects, State} from 'micromark-util-types'\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding, markdownSpace } from 'micromark-util-character';\n/**\n * Parse spaces and tabs.\n *\n * There is no `nok` parameter:\n *\n * *   line endings or spaces in markdown are often optional, in which case this\n *     factory can be used and `ok` will be switched to whether spaces were found\n *     or not\n * *   one line ending or space can be detected with\n *     `markdownLineEndingOrSpace(code)` right before using `factoryWhitespace`\n *\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @returns {State}\n *   Start state.\n */\nexport function factoryWhitespace(effects, ok) {\n  /** @type {boolean} */\n  let seen;\n  return start;\n\n  /** @type {State} */\n  function start(code) {\n    if (markdownLineEnding(code)) {\n      effects.enter(\"lineEnding\");\n      effects.consume(code);\n      effects.exit(\"lineEnding\");\n      seen = true;\n      return start;\n    }\n    if (markdownSpace(code)) {\n      return factorySpace(effects, start, seen ? \"linePrefix\" : \"lineSuffix\")(code);\n    }\n    return ok(code);\n  }\n}","/**\n * Normalize an identifier (as found in references, definitions).\n *\n * Collapses markdown whitespace, trim, and then lower- and uppercase.\n *\n * Some characters are considered “uppercase”, such as U+03F4 (`ϴ`), but if their\n * lowercase counterpart (U+03B8 (`θ`)) is uppercased will result in a different\n * uppercase character (U+0398 (`Θ`)).\n * So, to get a canonical form, we perform both lower- and uppercase.\n *\n * Using uppercase last makes sure keys will never interact with default\n * prototypal values (such as `constructor`): nothing in the prototype of\n * `Object` is uppercase.\n *\n * @param {string} value\n *   Identifier to normalize.\n * @returns {string}\n *   Normalized identifier.\n */\nexport function normalizeIdentifier(value) {\n  return value\n  // Collapse markdown whitespace.\n  .replace(/[\\t\\n\\r ]+/g, \" \")\n  // Trim.\n  .replace(/^ | $/g, '')\n  // Some characters are considered “uppercase”, but if their lowercase\n  // counterpart is uppercased will result in a different uppercase\n  // character.\n  // Hence, to get that form, we perform both lower- and uppercase.\n  // Upper case makes sure keys will not interact with default prototypal\n  // methods: no method is uppercase.\n  .toLowerCase().toUpperCase();\n}","/**\n * @import {\n *   Construct,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { factoryDestination } from 'micromark-factory-destination';\nimport { factoryLabel } from 'micromark-factory-label';\nimport { factorySpace } from 'micromark-factory-space';\nimport { factoryTitle } from 'micromark-factory-title';\nimport { factoryWhitespace } from 'micromark-factory-whitespace';\nimport { markdownLineEndingOrSpace, markdownLineEnding, markdownSpace } from 'micromark-util-character';\nimport { normalizeIdentifier } from 'micromark-util-normalize-identifier';\n/** @type {Construct} */\nexport const definition = {\n  name: 'definition',\n  tokenize: tokenizeDefinition\n};\n\n/** @type {Construct} */\nconst titleBefore = {\n  partial: true,\n  tokenize: tokenizeTitleBefore\n};\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeDefinition(effects, ok, nok) {\n  const self = this;\n  /** @type {string} */\n  let identifier;\n  return start;\n\n  /**\n   * At start of a definition.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // Do not interrupt paragraphs (but do follow definitions).\n    // To do: do `interrupt` the way `markdown-rs` does.\n    // To do: parse whitespace the way `markdown-rs` does.\n    effects.enter(\"definition\");\n    return before(code);\n  }\n\n  /**\n   * After optional whitespace, at `[`.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    // To do: parse whitespace the way `markdown-rs` does.\n\n    return factoryLabel.call(self, effects, labelAfter,\n    // Note: we don’t need to reset the way `markdown-rs` does.\n    nok, \"definitionLabel\", \"definitionLabelMarker\", \"definitionLabelString\")(code);\n  }\n\n  /**\n   * After label.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelAfter(code) {\n    identifier = normalizeIdentifier(self.sliceSerialize(self.events[self.events.length - 1][1]).slice(1, -1));\n    if (code === 58) {\n      effects.enter(\"definitionMarker\");\n      effects.consume(code);\n      effects.exit(\"definitionMarker\");\n      return markerAfter;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After marker.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function markerAfter(code) {\n    // Note: whitespace is optional.\n    return markdownLineEndingOrSpace(code) ? factoryWhitespace(effects, destinationBefore)(code) : destinationBefore(code);\n  }\n\n  /**\n   * Before destination.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function destinationBefore(code) {\n    return factoryDestination(effects, destinationAfter,\n    // Note: we don’t need to reset the way `markdown-rs` does.\n    nok, \"definitionDestination\", \"definitionDestinationLiteral\", \"definitionDestinationLiteralMarker\", \"definitionDestinationRaw\", \"definitionDestinationString\")(code);\n  }\n\n  /**\n   * After destination.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function destinationAfter(code) {\n    return effects.attempt(titleBefore, after, after)(code);\n  }\n\n  /**\n   * After definition.\n   *\n   * ```markdown\n   * > | [a]: b\n   *           ^\n   * > | [a]: b \"c\"\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    return markdownSpace(code) ? factorySpace(effects, afterWhitespace, \"whitespace\")(code) : afterWhitespace(code);\n  }\n\n  /**\n   * After definition, after optional whitespace.\n   *\n   * ```markdown\n   * > | [a]: b\n   *           ^\n   * > | [a]: b \"c\"\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function afterWhitespace(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit(\"definition\");\n\n      // Note: we don’t care about uniqueness.\n      // It’s likely that that doesn’t happen very frequently.\n      // It is more likely that it wastes precious time.\n      self.parser.defined.push(identifier);\n\n      // To do: `markdown-rs` interrupt.\n      // // You’d be interrupting.\n      // tokenizer.interrupt = true\n      return ok(code);\n    }\n    return nok(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeTitleBefore(effects, ok, nok) {\n  return titleBefore;\n\n  /**\n   * After destination, at whitespace.\n   *\n   * ```markdown\n   * > | [a]: b\n   *           ^\n   * > | [a]: b \"c\"\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function titleBefore(code) {\n    return markdownLineEndingOrSpace(code) ? factoryWhitespace(effects, beforeMarker)(code) : nok(code);\n  }\n\n  /**\n   * At title.\n   *\n   * ```markdown\n   *   | [a]: b\n   * > | \"c\"\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function beforeMarker(code) {\n    return factoryTitle(effects, titleAfter, nok, \"definitionTitle\", \"definitionTitleMarker\", \"definitionTitleString\")(code);\n  }\n\n  /**\n   * After title.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function titleAfter(code) {\n    return markdownSpace(code) ? factorySpace(effects, titleAfterOptionalWhitespace, \"whitespace\")(code) : titleAfterOptionalWhitespace(code);\n  }\n\n  /**\n   * After title, after optional whitespace.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function titleAfterOptionalWhitespace(code) {\n    return code === null || markdownLineEnding(code) ? ok(code) : nok(code);\n  }\n}","/**\n * @import {\n *   Construct,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { markdownLineEnding } from 'micromark-util-character';\n/** @type {Construct} */\nexport const hardBreakEscape = {\n  name: 'hardBreakEscape',\n  tokenize: tokenizeHardBreakEscape\n};\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeHardBreakEscape(effects, ok, nok) {\n  return start;\n\n  /**\n   * Start of a hard break (escape).\n   *\n   * ```markdown\n   * > | a\\\n   *      ^\n   *   | b\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(\"hardBreakEscape\");\n    effects.consume(code);\n    return after;\n  }\n\n  /**\n   * After `\\`, at eol.\n   *\n   * ```markdown\n   * > | a\\\n   *       ^\n   *   | b\n   * ```\n   *\n   *  @type {State}\n   */\n  function after(code) {\n    if (markdownLineEnding(code)) {\n      effects.exit(\"hardBreakEscape\");\n      return ok(code);\n    }\n    return nok(code);\n  }\n}","/**\n * @import {\n *   Construct,\n *   Resolver,\n *   State,\n *   TokenizeContext,\n *   Tokenizer,\n *   Token\n * } from 'micromark-util-types'\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEndingOrSpace, markdownLineEnding, markdownSpace } from 'micromark-util-character';\nimport { splice } from 'micromark-util-chunked';\n/** @type {Construct} */\nexport const headingAtx = {\n  name: 'headingAtx',\n  resolve: resolveHeadingAtx,\n  tokenize: tokenizeHeadingAtx\n};\n\n/** @type {Resolver} */\nfunction resolveHeadingAtx(events, context) {\n  let contentEnd = events.length - 2;\n  let contentStart = 3;\n  /** @type {Token} */\n  let content;\n  /** @type {Token} */\n  let text;\n\n  // Prefix whitespace, part of the opening.\n  if (events[contentStart][1].type === \"whitespace\") {\n    contentStart += 2;\n  }\n\n  // Suffix whitespace, part of the closing.\n  if (contentEnd - 2 > contentStart && events[contentEnd][1].type === \"whitespace\") {\n    contentEnd -= 2;\n  }\n  if (events[contentEnd][1].type === \"atxHeadingSequence\" && (contentStart === contentEnd - 1 || contentEnd - 4 > contentStart && events[contentEnd - 2][1].type === \"whitespace\")) {\n    contentEnd -= contentStart + 1 === contentEnd ? 2 : 4;\n  }\n  if (contentEnd > contentStart) {\n    content = {\n      type: \"atxHeadingText\",\n      start: events[contentStart][1].start,\n      end: events[contentEnd][1].end\n    };\n    text = {\n      type: \"chunkText\",\n      start: events[contentStart][1].start,\n      end: events[contentEnd][1].end,\n      contentType: \"text\"\n    };\n    splice(events, contentStart, contentEnd - contentStart + 1, [['enter', content, context], ['enter', text, context], ['exit', text, context], ['exit', content, context]]);\n  }\n  return events;\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeHeadingAtx(effects, ok, nok) {\n  let size = 0;\n  return start;\n\n  /**\n   * Start of a heading (atx).\n   *\n   * ```markdown\n   * > | ## aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // To do: parse indent like `markdown-rs`.\n    effects.enter(\"atxHeading\");\n    return before(code);\n  }\n\n  /**\n   * After optional whitespace, at `#`.\n   *\n   * ```markdown\n   * > | ## aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    effects.enter(\"atxHeadingSequence\");\n    return sequenceOpen(code);\n  }\n\n  /**\n   * In opening sequence.\n   *\n   * ```markdown\n   * > | ## aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceOpen(code) {\n    if (code === 35 && size++ < 6) {\n      effects.consume(code);\n      return sequenceOpen;\n    }\n\n    // Always at least one `#`.\n    if (code === null || markdownLineEndingOrSpace(code)) {\n      effects.exit(\"atxHeadingSequence\");\n      return atBreak(code);\n    }\n    return nok(code);\n  }\n\n  /**\n   * After something, before something else.\n   *\n   * ```markdown\n   * > | ## aa\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (code === 35) {\n      effects.enter(\"atxHeadingSequence\");\n      return sequenceFurther(code);\n    }\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit(\"atxHeading\");\n      // To do: interrupt like `markdown-rs`.\n      // // Feel free to interrupt.\n      // tokenizer.interrupt = false\n      return ok(code);\n    }\n    if (markdownSpace(code)) {\n      return factorySpace(effects, atBreak, \"whitespace\")(code);\n    }\n\n    // To do: generate `data` tokens, add the `text` token later.\n    // Needs edit map, see: `markdown.rs`.\n    effects.enter(\"atxHeadingText\");\n    return data(code);\n  }\n\n  /**\n   * In further sequence (after whitespace).\n   *\n   * Could be normal “visible” hashes in the heading or a final sequence.\n   *\n   * ```markdown\n   * > | ## aa ##\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceFurther(code) {\n    if (code === 35) {\n      effects.consume(code);\n      return sequenceFurther;\n    }\n    effects.exit(\"atxHeadingSequence\");\n    return atBreak(code);\n  }\n\n  /**\n   * In text.\n   *\n   * ```markdown\n   * > | ## aa\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function data(code) {\n    if (code === null || code === 35 || markdownLineEndingOrSpace(code)) {\n      effects.exit(\"atxHeadingText\");\n      return atBreak(code);\n    }\n    effects.consume(code);\n    return data;\n  }\n}","/**\n * List of lowercase HTML “block” tag names.\n *\n * The list, when parsing HTML (flow), results in more relaxed rules (condition\n * 6).\n * Because they are known blocks, the HTML-like syntax doesn’t have to be\n * strictly parsed.\n * For tag names not in this list, a more strict algorithm (condition 7) is used\n * to detect whether the HTML-like syntax is seen as HTML (flow) or not.\n *\n * This is copied from:\n * <https://spec.commonmark.org/0.30/#html-blocks>.\n *\n * > 👉 **Note**: `search` was added in `CommonMark@0.31`.\n */\nexport const htmlBlockNames = [\n  'address',\n  'article',\n  'aside',\n  'base',\n  'basefont',\n  'blockquote',\n  'body',\n  'caption',\n  'center',\n  'col',\n  'colgroup',\n  'dd',\n  'details',\n  'dialog',\n  'dir',\n  'div',\n  'dl',\n  'dt',\n  'fieldset',\n  'figcaption',\n  'figure',\n  'footer',\n  'form',\n  'frame',\n  'frameset',\n  'h1',\n  'h2',\n  'h3',\n  'h4',\n  'h5',\n  'h6',\n  'head',\n  'header',\n  'hr',\n  'html',\n  'iframe',\n  'legend',\n  'li',\n  'link',\n  'main',\n  'menu',\n  'menuitem',\n  'nav',\n  'noframes',\n  'ol',\n  'optgroup',\n  'option',\n  'p',\n  'param',\n  'search',\n  'section',\n  'summary',\n  'table',\n  'tbody',\n  'td',\n  'tfoot',\n  'th',\n  'thead',\n  'title',\n  'tr',\n  'track',\n  'ul'\n]\n\n/**\n * List of lowercase HTML “raw” tag names.\n *\n * The list, when parsing HTML (flow), results in HTML that can include lines\n * without exiting, until a closing tag also in this list is found (condition\n * 1).\n *\n * This module is copied from:\n * <https://spec.commonmark.org/0.30/#html-blocks>.\n *\n * > 👉 **Note**: `textarea` was added in `CommonMark@0.30`.\n */\nexport const htmlRawNames = ['pre', 'script', 'style', 'textarea']\n","/**\n * @import {\n *   Code,\n *   Construct,\n *   Resolver,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { asciiAlphanumeric, asciiAlpha, markdownLineEndingOrSpace, markdownLineEnding, markdownSpace } from 'micromark-util-character';\nimport { htmlBlockNames, htmlRawNames } from 'micromark-util-html-tag-name';\nimport { blankLine } from './blank-line.js';\n\n/** @type {Construct} */\nexport const htmlFlow = {\n  concrete: true,\n  name: 'htmlFlow',\n  resolveTo: resolveToHtmlFlow,\n  tokenize: tokenizeHtmlFlow\n};\n\n/** @type {Construct} */\nconst blankLineBefore = {\n  partial: true,\n  tokenize: tokenizeBlankLineBefore\n};\nconst nonLazyContinuationStart = {\n  partial: true,\n  tokenize: tokenizeNonLazyContinuationStart\n};\n\n/** @type {Resolver} */\nfunction resolveToHtmlFlow(events) {\n  let index = events.length;\n  while (index--) {\n    if (events[index][0] === 'enter' && events[index][1].type === \"htmlFlow\") {\n      break;\n    }\n  }\n  if (index > 1 && events[index - 2][1].type === \"linePrefix\") {\n    // Add the prefix start to the HTML token.\n    events[index][1].start = events[index - 2][1].start;\n    // Add the prefix start to the HTML line token.\n    events[index + 1][1].start = events[index - 2][1].start;\n    // Remove the line prefix.\n    events.splice(index - 2, 2);\n  }\n  return events;\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeHtmlFlow(effects, ok, nok) {\n  const self = this;\n  /** @type {number} */\n  let marker;\n  /** @type {boolean} */\n  let closingTag;\n  /** @type {string} */\n  let buffer;\n  /** @type {number} */\n  let index;\n  /** @type {Code} */\n  let markerB;\n  return start;\n\n  /**\n   * Start of HTML (flow).\n   *\n   * ```markdown\n   * > | <x />\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // To do: parse indent like `markdown-rs`.\n    return before(code);\n  }\n\n  /**\n   * At `<`, after optional whitespace.\n   *\n   * ```markdown\n   * > | <x />\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    effects.enter(\"htmlFlow\");\n    effects.enter(\"htmlFlowData\");\n    effects.consume(code);\n    return open;\n  }\n\n  /**\n   * After `<`, at tag name or other stuff.\n   *\n   * ```markdown\n   * > | <x />\n   *      ^\n   * > | <!doctype>\n   *      ^\n   * > | <!--xxx-->\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (code === 33) {\n      effects.consume(code);\n      return declarationOpen;\n    }\n    if (code === 47) {\n      effects.consume(code);\n      closingTag = true;\n      return tagCloseStart;\n    }\n    if (code === 63) {\n      effects.consume(code);\n      marker = 3;\n      // To do:\n      // tokenizer.concrete = true\n      // To do: use `markdown-rs` style interrupt.\n      // While we’re in an instruction instead of a declaration, we’re on a `?`\n      // right now, so we do need to search for `>`, similar to declarations.\n      return self.interrupt ? ok : continuationDeclarationInside;\n    }\n\n    // ASCII alphabetical.\n    if (asciiAlpha(code)) {\n      // Always the case.\n      effects.consume(code);\n      buffer = String.fromCharCode(code);\n      return tagName;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After `<!`, at declaration, comment, or CDATA.\n   *\n   * ```markdown\n   * > | <!doctype>\n   *       ^\n   * > | <!--xxx-->\n   *       ^\n   * > | <![CDATA[>&<]]>\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function declarationOpen(code) {\n    if (code === 45) {\n      effects.consume(code);\n      marker = 2;\n      return commentOpenInside;\n    }\n    if (code === 91) {\n      effects.consume(code);\n      marker = 5;\n      index = 0;\n      return cdataOpenInside;\n    }\n\n    // ASCII alphabetical.\n    if (asciiAlpha(code)) {\n      effects.consume(code);\n      marker = 4;\n      // // Do not form containers.\n      // tokenizer.concrete = true\n      return self.interrupt ? ok : continuationDeclarationInside;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After `<!-`, inside a comment, at another `-`.\n   *\n   * ```markdown\n   * > | <!--xxx-->\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function commentOpenInside(code) {\n    if (code === 45) {\n      effects.consume(code);\n      // // Do not form containers.\n      // tokenizer.concrete = true\n      return self.interrupt ? ok : continuationDeclarationInside;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After `<![`, inside CDATA, expecting `CDATA[`.\n   *\n   * ```markdown\n   * > | <![CDATA[>&<]]>\n   *        ^^^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdataOpenInside(code) {\n    const value = \"CDATA[\";\n    if (code === value.charCodeAt(index++)) {\n      effects.consume(code);\n      if (index === value.length) {\n        // // Do not form containers.\n        // tokenizer.concrete = true\n        return self.interrupt ? ok : continuation;\n      }\n      return cdataOpenInside;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After `</`, in closing tag, at tag name.\n   *\n   * ```markdown\n   * > | </x>\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagCloseStart(code) {\n    if (asciiAlpha(code)) {\n      // Always the case.\n      effects.consume(code);\n      buffer = String.fromCharCode(code);\n      return tagName;\n    }\n    return nok(code);\n  }\n\n  /**\n   * In tag name.\n   *\n   * ```markdown\n   * > | <ab>\n   *      ^^\n   * > | </ab>\n   *       ^^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagName(code) {\n    if (code === null || code === 47 || code === 62 || markdownLineEndingOrSpace(code)) {\n      const slash = code === 47;\n      const name = buffer.toLowerCase();\n      if (!slash && !closingTag && htmlRawNames.includes(name)) {\n        marker = 1;\n        // // Do not form containers.\n        // tokenizer.concrete = true\n        return self.interrupt ? ok(code) : continuation(code);\n      }\n      if (htmlBlockNames.includes(buffer.toLowerCase())) {\n        marker = 6;\n        if (slash) {\n          effects.consume(code);\n          return basicSelfClosing;\n        }\n\n        // // Do not form containers.\n        // tokenizer.concrete = true\n        return self.interrupt ? ok(code) : continuation(code);\n      }\n      marker = 7;\n      // Do not support complete HTML when interrupting.\n      return self.interrupt && !self.parser.lazy[self.now().line] ? nok(code) : closingTag ? completeClosingTagAfter(code) : completeAttributeNameBefore(code);\n    }\n\n    // ASCII alphanumerical and `-`.\n    if (code === 45 || asciiAlphanumeric(code)) {\n      effects.consume(code);\n      buffer += String.fromCharCode(code);\n      return tagName;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After closing slash of a basic tag name.\n   *\n   * ```markdown\n   * > | <div/>\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function basicSelfClosing(code) {\n    if (code === 62) {\n      effects.consume(code);\n      // // Do not form containers.\n      // tokenizer.concrete = true\n      return self.interrupt ? ok : continuation;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After closing slash of a complete tag name.\n   *\n   * ```markdown\n   * > | <x/>\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeClosingTagAfter(code) {\n    if (markdownSpace(code)) {\n      effects.consume(code);\n      return completeClosingTagAfter;\n    }\n    return completeEnd(code);\n  }\n\n  /**\n   * At an attribute name.\n   *\n   * At first, this state is used after a complete tag name, after whitespace,\n   * where it expects optional attributes or the end of the tag.\n   * It is also reused after attributes, when expecting more optional\n   * attributes.\n   *\n   * ```markdown\n   * > | <a />\n   *        ^\n   * > | <a :b>\n   *        ^\n   * > | <a _b>\n   *        ^\n   * > | <a b>\n   *        ^\n   * > | <a >\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeNameBefore(code) {\n    if (code === 47) {\n      effects.consume(code);\n      return completeEnd;\n    }\n\n    // ASCII alphanumerical and `:` and `_`.\n    if (code === 58 || code === 95 || asciiAlpha(code)) {\n      effects.consume(code);\n      return completeAttributeName;\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code);\n      return completeAttributeNameBefore;\n    }\n    return completeEnd(code);\n  }\n\n  /**\n   * In attribute name.\n   *\n   * ```markdown\n   * > | <a :b>\n   *         ^\n   * > | <a _b>\n   *         ^\n   * > | <a b>\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeName(code) {\n    // ASCII alphanumerical and `-`, `.`, `:`, and `_`.\n    if (code === 45 || code === 46 || code === 58 || code === 95 || asciiAlphanumeric(code)) {\n      effects.consume(code);\n      return completeAttributeName;\n    }\n    return completeAttributeNameAfter(code);\n  }\n\n  /**\n   * After attribute name, at an optional initializer, the end of the tag, or\n   * whitespace.\n   *\n   * ```markdown\n   * > | <a b>\n   *         ^\n   * > | <a b=c>\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeNameAfter(code) {\n    if (code === 61) {\n      effects.consume(code);\n      return completeAttributeValueBefore;\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code);\n      return completeAttributeNameAfter;\n    }\n    return completeAttributeNameBefore(code);\n  }\n\n  /**\n   * Before unquoted, double quoted, or single quoted attribute value, allowing\n   * whitespace.\n   *\n   * ```markdown\n   * > | <a b=c>\n   *          ^\n   * > | <a b=\"c\">\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeValueBefore(code) {\n    if (code === null || code === 60 || code === 61 || code === 62 || code === 96) {\n      return nok(code);\n    }\n    if (code === 34 || code === 39) {\n      effects.consume(code);\n      markerB = code;\n      return completeAttributeValueQuoted;\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code);\n      return completeAttributeValueBefore;\n    }\n    return completeAttributeValueUnquoted(code);\n  }\n\n  /**\n   * In double or single quoted attribute value.\n   *\n   * ```markdown\n   * > | <a b=\"c\">\n   *           ^\n   * > | <a b='c'>\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeValueQuoted(code) {\n    if (code === markerB) {\n      effects.consume(code);\n      markerB = null;\n      return completeAttributeValueQuotedAfter;\n    }\n    if (code === null || markdownLineEnding(code)) {\n      return nok(code);\n    }\n    effects.consume(code);\n    return completeAttributeValueQuoted;\n  }\n\n  /**\n   * In unquoted attribute value.\n   *\n   * ```markdown\n   * > | <a b=c>\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeValueUnquoted(code) {\n    if (code === null || code === 34 || code === 39 || code === 47 || code === 60 || code === 61 || code === 62 || code === 96 || markdownLineEndingOrSpace(code)) {\n      return completeAttributeNameAfter(code);\n    }\n    effects.consume(code);\n    return completeAttributeValueUnquoted;\n  }\n\n  /**\n   * After double or single quoted attribute value, before whitespace or the\n   * end of the tag.\n   *\n   * ```markdown\n   * > | <a b=\"c\">\n   *            ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeValueQuotedAfter(code) {\n    if (code === 47 || code === 62 || markdownSpace(code)) {\n      return completeAttributeNameBefore(code);\n    }\n    return nok(code);\n  }\n\n  /**\n   * In certain circumstances of a complete tag where only an `>` is allowed.\n   *\n   * ```markdown\n   * > | <a b=\"c\">\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeEnd(code) {\n    if (code === 62) {\n      effects.consume(code);\n      return completeAfter;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After `>` in a complete tag.\n   *\n   * ```markdown\n   * > | <x>\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAfter(code) {\n    if (code === null || markdownLineEnding(code)) {\n      // // Do not form containers.\n      // tokenizer.concrete = true\n      return continuation(code);\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code);\n      return completeAfter;\n    }\n    return nok(code);\n  }\n\n  /**\n   * In continuation of any HTML kind.\n   *\n   * ```markdown\n   * > | <!--xxx-->\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuation(code) {\n    if (code === 45 && marker === 2) {\n      effects.consume(code);\n      return continuationCommentInside;\n    }\n    if (code === 60 && marker === 1) {\n      effects.consume(code);\n      return continuationRawTagOpen;\n    }\n    if (code === 62 && marker === 4) {\n      effects.consume(code);\n      return continuationClose;\n    }\n    if (code === 63 && marker === 3) {\n      effects.consume(code);\n      return continuationDeclarationInside;\n    }\n    if (code === 93 && marker === 5) {\n      effects.consume(code);\n      return continuationCdataInside;\n    }\n    if (markdownLineEnding(code) && (marker === 6 || marker === 7)) {\n      effects.exit(\"htmlFlowData\");\n      return effects.check(blankLineBefore, continuationAfter, continuationStart)(code);\n    }\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit(\"htmlFlowData\");\n      return continuationStart(code);\n    }\n    effects.consume(code);\n    return continuation;\n  }\n\n  /**\n   * In continuation, at eol.\n   *\n   * ```markdown\n   * > | <x>\n   *        ^\n   *   | asd\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationStart(code) {\n    return effects.check(nonLazyContinuationStart, continuationStartNonLazy, continuationAfter)(code);\n  }\n\n  /**\n   * In continuation, at eol, before non-lazy content.\n   *\n   * ```markdown\n   * > | <x>\n   *        ^\n   *   | asd\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationStartNonLazy(code) {\n    effects.enter(\"lineEnding\");\n    effects.consume(code);\n    effects.exit(\"lineEnding\");\n    return continuationBefore;\n  }\n\n  /**\n   * In continuation, before non-lazy content.\n   *\n   * ```markdown\n   *   | <x>\n   * > | asd\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationBefore(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return continuationStart(code);\n    }\n    effects.enter(\"htmlFlowData\");\n    return continuation(code);\n  }\n\n  /**\n   * In comment continuation, after one `-`, expecting another.\n   *\n   * ```markdown\n   * > | <!--xxx-->\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationCommentInside(code) {\n    if (code === 45) {\n      effects.consume(code);\n      return continuationDeclarationInside;\n    }\n    return continuation(code);\n  }\n\n  /**\n   * In raw continuation, after `<`, at `/`.\n   *\n   * ```markdown\n   * > | <script>console.log(1)</script>\n   *                            ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationRawTagOpen(code) {\n    if (code === 47) {\n      effects.consume(code);\n      buffer = '';\n      return continuationRawEndTag;\n    }\n    return continuation(code);\n  }\n\n  /**\n   * In raw continuation, after `</`, in a raw tag name.\n   *\n   * ```markdown\n   * > | <script>console.log(1)</script>\n   *                             ^^^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationRawEndTag(code) {\n    if (code === 62) {\n      const name = buffer.toLowerCase();\n      if (htmlRawNames.includes(name)) {\n        effects.consume(code);\n        return continuationClose;\n      }\n      return continuation(code);\n    }\n    if (asciiAlpha(code) && buffer.length < 8) {\n      // Always the case.\n      effects.consume(code);\n      buffer += String.fromCharCode(code);\n      return continuationRawEndTag;\n    }\n    return continuation(code);\n  }\n\n  /**\n   * In cdata continuation, after `]`, expecting `]>`.\n   *\n   * ```markdown\n   * > | <![CDATA[>&<]]>\n   *                  ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationCdataInside(code) {\n    if (code === 93) {\n      effects.consume(code);\n      return continuationDeclarationInside;\n    }\n    return continuation(code);\n  }\n\n  /**\n   * In declaration or instruction continuation, at `>`.\n   *\n   * ```markdown\n   * > | <!-->\n   *         ^\n   * > | <?>\n   *       ^\n   * > | <!q>\n   *        ^\n   * > | <!--ab-->\n   *             ^\n   * > | <![CDATA[>&<]]>\n   *                   ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationDeclarationInside(code) {\n    if (code === 62) {\n      effects.consume(code);\n      return continuationClose;\n    }\n\n    // More dashes.\n    if (code === 45 && marker === 2) {\n      effects.consume(code);\n      return continuationDeclarationInside;\n    }\n    return continuation(code);\n  }\n\n  /**\n   * In closed continuation: everything we get until the eol/eof is part of it.\n   *\n   * ```markdown\n   * > | <!doctype>\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationClose(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit(\"htmlFlowData\");\n      return continuationAfter(code);\n    }\n    effects.consume(code);\n    return continuationClose;\n  }\n\n  /**\n   * Done.\n   *\n   * ```markdown\n   * > | <!doctype>\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationAfter(code) {\n    effects.exit(\"htmlFlow\");\n    // // Feel free to interrupt.\n    // tokenizer.interrupt = false\n    // // No longer concrete.\n    // tokenizer.concrete = false\n    return ok(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeNonLazyContinuationStart(effects, ok, nok) {\n  const self = this;\n  return start;\n\n  /**\n   * At eol, before continuation.\n   *\n   * ```markdown\n   * > | * ```js\n   *            ^\n   *   | b\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (markdownLineEnding(code)) {\n      effects.enter(\"lineEnding\");\n      effects.consume(code);\n      effects.exit(\"lineEnding\");\n      return after;\n    }\n    return nok(code);\n  }\n\n  /**\n   * A continuation.\n   *\n   * ```markdown\n   *   | * ```js\n   * > | b\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    return self.parser.lazy[self.now().line] ? nok(code) : ok(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeBlankLineBefore(effects, ok, nok) {\n  return start;\n\n  /**\n   * Before eol, expecting blank line.\n   *\n   * ```markdown\n   * > | <div>\n   *          ^\n   *   |\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(\"lineEnding\");\n    effects.consume(code);\n    effects.exit(\"lineEnding\");\n    return effects.attempt(blankLine, ok, nok);\n  }\n}","/**\n * @import {\n *   Code,\n *   Construct,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { asciiAlphanumeric, asciiAlpha, markdownLineEndingOrSpace, markdownLineEnding, markdownSpace } from 'micromark-util-character';\n/** @type {Construct} */\nexport const htmlText = {\n  name: 'htmlText',\n  tokenize: tokenizeHtmlText\n};\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeHtmlText(effects, ok, nok) {\n  const self = this;\n  /** @type {NonNullable<Code> | undefined} */\n  let marker;\n  /** @type {number} */\n  let index;\n  /** @type {State} */\n  let returnState;\n  return start;\n\n  /**\n   * Start of HTML (text).\n   *\n   * ```markdown\n   * > | a <b> c\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(\"htmlText\");\n    effects.enter(\"htmlTextData\");\n    effects.consume(code);\n    return open;\n  }\n\n  /**\n   * After `<`, at tag name or other stuff.\n   *\n   * ```markdown\n   * > | a <b> c\n   *        ^\n   * > | a <!doctype> c\n   *        ^\n   * > | a <!--b--> c\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (code === 33) {\n      effects.consume(code);\n      return declarationOpen;\n    }\n    if (code === 47) {\n      effects.consume(code);\n      return tagCloseStart;\n    }\n    if (code === 63) {\n      effects.consume(code);\n      return instruction;\n    }\n\n    // ASCII alphabetical.\n    if (asciiAlpha(code)) {\n      effects.consume(code);\n      return tagOpen;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After `<!`, at declaration, comment, or CDATA.\n   *\n   * ```markdown\n   * > | a <!doctype> c\n   *         ^\n   * > | a <!--b--> c\n   *         ^\n   * > | a <![CDATA[>&<]]> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function declarationOpen(code) {\n    if (code === 45) {\n      effects.consume(code);\n      return commentOpenInside;\n    }\n    if (code === 91) {\n      effects.consume(code);\n      index = 0;\n      return cdataOpenInside;\n    }\n    if (asciiAlpha(code)) {\n      effects.consume(code);\n      return declaration;\n    }\n    return nok(code);\n  }\n\n  /**\n   * In a comment, after `<!-`, at another `-`.\n   *\n   * ```markdown\n   * > | a <!--b--> c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function commentOpenInside(code) {\n    if (code === 45) {\n      effects.consume(code);\n      return commentEnd;\n    }\n    return nok(code);\n  }\n\n  /**\n   * In comment.\n   *\n   * ```markdown\n   * > | a <!--b--> c\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function comment(code) {\n    if (code === null) {\n      return nok(code);\n    }\n    if (code === 45) {\n      effects.consume(code);\n      return commentClose;\n    }\n    if (markdownLineEnding(code)) {\n      returnState = comment;\n      return lineEndingBefore(code);\n    }\n    effects.consume(code);\n    return comment;\n  }\n\n  /**\n   * In comment, after `-`.\n   *\n   * ```markdown\n   * > | a <!--b--> c\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function commentClose(code) {\n    if (code === 45) {\n      effects.consume(code);\n      return commentEnd;\n    }\n    return comment(code);\n  }\n\n  /**\n   * In comment, after `--`.\n   *\n   * ```markdown\n   * > | a <!--b--> c\n   *              ^\n   * ```\n   *\n   * @type {State}\n   */\n  function commentEnd(code) {\n    return code === 62 ? end(code) : code === 45 ? commentClose(code) : comment(code);\n  }\n\n  /**\n   * After `<![`, in CDATA, expecting `CDATA[`.\n   *\n   * ```markdown\n   * > | a <![CDATA[>&<]]> b\n   *          ^^^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdataOpenInside(code) {\n    const value = \"CDATA[\";\n    if (code === value.charCodeAt(index++)) {\n      effects.consume(code);\n      return index === value.length ? cdata : cdataOpenInside;\n    }\n    return nok(code);\n  }\n\n  /**\n   * In CDATA.\n   *\n   * ```markdown\n   * > | a <![CDATA[>&<]]> b\n   *                ^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdata(code) {\n    if (code === null) {\n      return nok(code);\n    }\n    if (code === 93) {\n      effects.consume(code);\n      return cdataClose;\n    }\n    if (markdownLineEnding(code)) {\n      returnState = cdata;\n      return lineEndingBefore(code);\n    }\n    effects.consume(code);\n    return cdata;\n  }\n\n  /**\n   * In CDATA, after `]`, at another `]`.\n   *\n   * ```markdown\n   * > | a <![CDATA[>&<]]> b\n   *                    ^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdataClose(code) {\n    if (code === 93) {\n      effects.consume(code);\n      return cdataEnd;\n    }\n    return cdata(code);\n  }\n\n  /**\n   * In CDATA, after `]]`, at `>`.\n   *\n   * ```markdown\n   * > | a <![CDATA[>&<]]> b\n   *                     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdataEnd(code) {\n    if (code === 62) {\n      return end(code);\n    }\n    if (code === 93) {\n      effects.consume(code);\n      return cdataEnd;\n    }\n    return cdata(code);\n  }\n\n  /**\n   * In declaration.\n   *\n   * ```markdown\n   * > | a <!b> c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function declaration(code) {\n    if (code === null || code === 62) {\n      return end(code);\n    }\n    if (markdownLineEnding(code)) {\n      returnState = declaration;\n      return lineEndingBefore(code);\n    }\n    effects.consume(code);\n    return declaration;\n  }\n\n  /**\n   * In instruction.\n   *\n   * ```markdown\n   * > | a <?b?> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function instruction(code) {\n    if (code === null) {\n      return nok(code);\n    }\n    if (code === 63) {\n      effects.consume(code);\n      return instructionClose;\n    }\n    if (markdownLineEnding(code)) {\n      returnState = instruction;\n      return lineEndingBefore(code);\n    }\n    effects.consume(code);\n    return instruction;\n  }\n\n  /**\n   * In instruction, after `?`, at `>`.\n   *\n   * ```markdown\n   * > | a <?b?> c\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function instructionClose(code) {\n    return code === 62 ? end(code) : instruction(code);\n  }\n\n  /**\n   * After `</`, in closing tag, at tag name.\n   *\n   * ```markdown\n   * > | a </b> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagCloseStart(code) {\n    // ASCII alphabetical.\n    if (asciiAlpha(code)) {\n      effects.consume(code);\n      return tagClose;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After `</x`, in a tag name.\n   *\n   * ```markdown\n   * > | a </b> c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagClose(code) {\n    // ASCII alphanumerical and `-`.\n    if (code === 45 || asciiAlphanumeric(code)) {\n      effects.consume(code);\n      return tagClose;\n    }\n    return tagCloseBetween(code);\n  }\n\n  /**\n   * In closing tag, after tag name.\n   *\n   * ```markdown\n   * > | a </b> c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagCloseBetween(code) {\n    if (markdownLineEnding(code)) {\n      returnState = tagCloseBetween;\n      return lineEndingBefore(code);\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code);\n      return tagCloseBetween;\n    }\n    return end(code);\n  }\n\n  /**\n   * After `<x`, in opening tag name.\n   *\n   * ```markdown\n   * > | a <b> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpen(code) {\n    // ASCII alphanumerical and `-`.\n    if (code === 45 || asciiAlphanumeric(code)) {\n      effects.consume(code);\n      return tagOpen;\n    }\n    if (code === 47 || code === 62 || markdownLineEndingOrSpace(code)) {\n      return tagOpenBetween(code);\n    }\n    return nok(code);\n  }\n\n  /**\n   * In opening tag, after tag name.\n   *\n   * ```markdown\n   * > | a <b> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenBetween(code) {\n    if (code === 47) {\n      effects.consume(code);\n      return end;\n    }\n\n    // ASCII alphabetical and `:` and `_`.\n    if (code === 58 || code === 95 || asciiAlpha(code)) {\n      effects.consume(code);\n      return tagOpenAttributeName;\n    }\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenBetween;\n      return lineEndingBefore(code);\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code);\n      return tagOpenBetween;\n    }\n    return end(code);\n  }\n\n  /**\n   * In attribute name.\n   *\n   * ```markdown\n   * > | a <b c> d\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeName(code) {\n    // ASCII alphabetical and `-`, `.`, `:`, and `_`.\n    if (code === 45 || code === 46 || code === 58 || code === 95 || asciiAlphanumeric(code)) {\n      effects.consume(code);\n      return tagOpenAttributeName;\n    }\n    return tagOpenAttributeNameAfter(code);\n  }\n\n  /**\n   * After attribute name, before initializer, the end of the tag, or\n   * whitespace.\n   *\n   * ```markdown\n   * > | a <b c> d\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeNameAfter(code) {\n    if (code === 61) {\n      effects.consume(code);\n      return tagOpenAttributeValueBefore;\n    }\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenAttributeNameAfter;\n      return lineEndingBefore(code);\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code);\n      return tagOpenAttributeNameAfter;\n    }\n    return tagOpenBetween(code);\n  }\n\n  /**\n   * Before unquoted, double quoted, or single quoted attribute value, allowing\n   * whitespace.\n   *\n   * ```markdown\n   * > | a <b c=d> e\n   *            ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeValueBefore(code) {\n    if (code === null || code === 60 || code === 61 || code === 62 || code === 96) {\n      return nok(code);\n    }\n    if (code === 34 || code === 39) {\n      effects.consume(code);\n      marker = code;\n      return tagOpenAttributeValueQuoted;\n    }\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenAttributeValueBefore;\n      return lineEndingBefore(code);\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code);\n      return tagOpenAttributeValueBefore;\n    }\n    effects.consume(code);\n    return tagOpenAttributeValueUnquoted;\n  }\n\n  /**\n   * In double or single quoted attribute value.\n   *\n   * ```markdown\n   * > | a <b c=\"d\"> e\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeValueQuoted(code) {\n    if (code === marker) {\n      effects.consume(code);\n      marker = undefined;\n      return tagOpenAttributeValueQuotedAfter;\n    }\n    if (code === null) {\n      return nok(code);\n    }\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenAttributeValueQuoted;\n      return lineEndingBefore(code);\n    }\n    effects.consume(code);\n    return tagOpenAttributeValueQuoted;\n  }\n\n  /**\n   * In unquoted attribute value.\n   *\n   * ```markdown\n   * > | a <b c=d> e\n   *            ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeValueUnquoted(code) {\n    if (code === null || code === 34 || code === 39 || code === 60 || code === 61 || code === 96) {\n      return nok(code);\n    }\n    if (code === 47 || code === 62 || markdownLineEndingOrSpace(code)) {\n      return tagOpenBetween(code);\n    }\n    effects.consume(code);\n    return tagOpenAttributeValueUnquoted;\n  }\n\n  /**\n   * After double or single quoted attribute value, before whitespace or the end\n   * of the tag.\n   *\n   * ```markdown\n   * > | a <b c=\"d\"> e\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeValueQuotedAfter(code) {\n    if (code === 47 || code === 62 || markdownLineEndingOrSpace(code)) {\n      return tagOpenBetween(code);\n    }\n    return nok(code);\n  }\n\n  /**\n   * In certain circumstances of a tag where only an `>` is allowed.\n   *\n   * ```markdown\n   * > | a <b c=\"d\"> e\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function end(code) {\n    if (code === 62) {\n      effects.consume(code);\n      effects.exit(\"htmlTextData\");\n      effects.exit(\"htmlText\");\n      return ok;\n    }\n    return nok(code);\n  }\n\n  /**\n   * At eol.\n   *\n   * > 👉 **Note**: we can’t have blank lines in text, so no need to worry about\n   * > empty tokens.\n   *\n   * ```markdown\n   * > | a <!--a\n   *            ^\n   *   | b-->\n   * ```\n   *\n   * @type {State}\n   */\n  function lineEndingBefore(code) {\n    effects.exit(\"htmlTextData\");\n    effects.enter(\"lineEnding\");\n    effects.consume(code);\n    effects.exit(\"lineEnding\");\n    return lineEndingAfter;\n  }\n\n  /**\n   * After eol, at optional whitespace.\n   *\n   * > 👉 **Note**: we can’t have blank lines in text, so no need to worry about\n   * > empty tokens.\n   *\n   * ```markdown\n   *   | a <!--a\n   * > | b-->\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function lineEndingAfter(code) {\n    // Always populated by defaults.\n\n    return markdownSpace(code) ? factorySpace(effects, lineEndingAfterPrefix, \"linePrefix\", self.parser.constructs.disable.null.includes('codeIndented') ? undefined : 4)(code) : lineEndingAfterPrefix(code);\n  }\n\n  /**\n   * After eol, after optional whitespace.\n   *\n   * > 👉 **Note**: we can’t have blank lines in text, so no need to worry about\n   * > empty tokens.\n   *\n   * ```markdown\n   *   | a <!--a\n   * > | b-->\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function lineEndingAfterPrefix(code) {\n    effects.enter(\"htmlTextData\");\n    return returnState(code);\n  }\n}","/**\n * @import {\n *   Construct,\n *   Event,\n *   Resolver,\n *   State,\n *   TokenizeContext,\n *   Tokenizer,\n *   Token\n * } from 'micromark-util-types'\n */\n\nimport { factoryDestination } from 'micromark-factory-destination';\nimport { factoryLabel } from 'micromark-factory-label';\nimport { factoryTitle } from 'micromark-factory-title';\nimport { factoryWhitespace } from 'micromark-factory-whitespace';\nimport { markdownLineEndingOrSpace } from 'micromark-util-character';\nimport { push, splice } from 'micromark-util-chunked';\nimport { normalizeIdentifier } from 'micromark-util-normalize-identifier';\nimport { resolveAll } from 'micromark-util-resolve-all';\n/** @type {Construct} */\nexport const labelEnd = {\n  name: 'labelEnd',\n  resolveAll: resolveAllLabelEnd,\n  resolveTo: resolveToLabelEnd,\n  tokenize: tokenizeLabelEnd\n};\n\n/** @type {Construct} */\nconst resourceConstruct = {\n  tokenize: tokenizeResource\n};\n/** @type {Construct} */\nconst referenceFullConstruct = {\n  tokenize: tokenizeReferenceFull\n};\n/** @type {Construct} */\nconst referenceCollapsedConstruct = {\n  tokenize: tokenizeReferenceCollapsed\n};\n\n/** @type {Resolver} */\nfunction resolveAllLabelEnd(events) {\n  let index = -1;\n  /** @type {Array<Event>} */\n  const newEvents = [];\n  while (++index < events.length) {\n    const token = events[index][1];\n    newEvents.push(events[index]);\n    if (token.type === \"labelImage\" || token.type === \"labelLink\" || token.type === \"labelEnd\") {\n      // Remove the marker.\n      const offset = token.type === \"labelImage\" ? 4 : 2;\n      token.type = \"data\";\n      index += offset;\n    }\n  }\n\n  // If the events are equal, we don't have to copy newEvents to events\n  if (events.length !== newEvents.length) {\n    splice(events, 0, events.length, newEvents);\n  }\n  return events;\n}\n\n/** @type {Resolver} */\nfunction resolveToLabelEnd(events, context) {\n  let index = events.length;\n  let offset = 0;\n  /** @type {Token} */\n  let token;\n  /** @type {number | undefined} */\n  let open;\n  /** @type {number | undefined} */\n  let close;\n  /** @type {Array<Event>} */\n  let media;\n\n  // Find an opening.\n  while (index--) {\n    token = events[index][1];\n    if (open) {\n      // If we see another link, or inactive link label, we’ve been here before.\n      if (token.type === \"link\" || token.type === \"labelLink\" && token._inactive) {\n        break;\n      }\n\n      // Mark other link openings as inactive, as we can’t have links in\n      // links.\n      if (events[index][0] === 'enter' && token.type === \"labelLink\") {\n        token._inactive = true;\n      }\n    } else if (close) {\n      if (events[index][0] === 'enter' && (token.type === \"labelImage\" || token.type === \"labelLink\") && !token._balanced) {\n        open = index;\n        if (token.type !== \"labelLink\") {\n          offset = 2;\n          break;\n        }\n      }\n    } else if (token.type === \"labelEnd\") {\n      close = index;\n    }\n  }\n  const group = {\n    type: events[open][1].type === \"labelLink\" ? \"link\" : \"image\",\n    start: {\n      ...events[open][1].start\n    },\n    end: {\n      ...events[events.length - 1][1].end\n    }\n  };\n  const label = {\n    type: \"label\",\n    start: {\n      ...events[open][1].start\n    },\n    end: {\n      ...events[close][1].end\n    }\n  };\n  const text = {\n    type: \"labelText\",\n    start: {\n      ...events[open + offset + 2][1].end\n    },\n    end: {\n      ...events[close - 2][1].start\n    }\n  };\n  media = [['enter', group, context], ['enter', label, context]];\n\n  // Opening marker.\n  media = push(media, events.slice(open + 1, open + offset + 3));\n\n  // Text open.\n  media = push(media, [['enter', text, context]]);\n\n  // Always populated by defaults.\n\n  // Between.\n  media = push(media, resolveAll(context.parser.constructs.insideSpan.null, events.slice(open + offset + 4, close - 3), context));\n\n  // Text close, marker close, label close.\n  media = push(media, [['exit', text, context], events[close - 2], events[close - 1], ['exit', label, context]]);\n\n  // Reference, resource, or so.\n  media = push(media, events.slice(close + 1));\n\n  // Media close.\n  media = push(media, [['exit', group, context]]);\n  splice(events, open, events.length, media);\n  return events;\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeLabelEnd(effects, ok, nok) {\n  const self = this;\n  let index = self.events.length;\n  /** @type {Token} */\n  let labelStart;\n  /** @type {boolean} */\n  let defined;\n\n  // Find an opening.\n  while (index--) {\n    if ((self.events[index][1].type === \"labelImage\" || self.events[index][1].type === \"labelLink\") && !self.events[index][1]._balanced) {\n      labelStart = self.events[index][1];\n      break;\n    }\n  }\n  return start;\n\n  /**\n   * Start of label end.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *       ^\n   * > | [a][b] c\n   *       ^\n   * > | [a][] b\n   *       ^\n   * > | [a] b\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // If there is not an okay opening.\n    if (!labelStart) {\n      return nok(code);\n    }\n\n    // If the corresponding label (link) start is marked as inactive,\n    // it means we’d be wrapping a link, like this:\n    //\n    // ```markdown\n    // > | a [b [c](d) e](f) g.\n    //                  ^\n    // ```\n    //\n    // We can’t have that, so it’s just balanced brackets.\n    if (labelStart._inactive) {\n      return labelEndNok(code);\n    }\n    defined = self.parser.defined.includes(normalizeIdentifier(self.sliceSerialize({\n      start: labelStart.end,\n      end: self.now()\n    })));\n    effects.enter(\"labelEnd\");\n    effects.enter(\"labelMarker\");\n    effects.consume(code);\n    effects.exit(\"labelMarker\");\n    effects.exit(\"labelEnd\");\n    return after;\n  }\n\n  /**\n   * After `]`.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *       ^\n   * > | [a][b] c\n   *       ^\n   * > | [a][] b\n   *       ^\n   * > | [a] b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    // Note: `markdown-rs` also parses GFM footnotes here, which for us is in\n    // an extension.\n\n    // Resource (`[asd](fgh)`)?\n    if (code === 40) {\n      return effects.attempt(resourceConstruct, labelEndOk, defined ? labelEndOk : labelEndNok)(code);\n    }\n\n    // Full (`[asd][fgh]`) or collapsed (`[asd][]`) reference?\n    if (code === 91) {\n      return effects.attempt(referenceFullConstruct, labelEndOk, defined ? referenceNotFull : labelEndNok)(code);\n    }\n\n    // Shortcut (`[asd]`) reference?\n    return defined ? labelEndOk(code) : labelEndNok(code);\n  }\n\n  /**\n   * After `]`, at `[`, but not at a full reference.\n   *\n   * > 👉 **Note**: we only get here if the label is defined.\n   *\n   * ```markdown\n   * > | [a][] b\n   *        ^\n   * > | [a] b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceNotFull(code) {\n    return effects.attempt(referenceCollapsedConstruct, labelEndOk, labelEndNok)(code);\n  }\n\n  /**\n   * Done, we found something.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *           ^\n   * > | [a][b] c\n   *           ^\n   * > | [a][] b\n   *          ^\n   * > | [a] b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelEndOk(code) {\n    // Note: `markdown-rs` does a bunch of stuff here.\n    return ok(code);\n  }\n\n  /**\n   * Done, it’s nothing.\n   *\n   * There was an okay opening, but we didn’t match anything.\n   *\n   * ```markdown\n   * > | [a](b c\n   *        ^\n   * > | [a][b c\n   *        ^\n   * > | [a] b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelEndNok(code) {\n    labelStart._balanced = true;\n    return nok(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeResource(effects, ok, nok) {\n  return resourceStart;\n\n  /**\n   * At a resource.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceStart(code) {\n    effects.enter(\"resource\");\n    effects.enter(\"resourceMarker\");\n    effects.consume(code);\n    effects.exit(\"resourceMarker\");\n    return resourceBefore;\n  }\n\n  /**\n   * In resource, after `(`, at optional whitespace.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceBefore(code) {\n    return markdownLineEndingOrSpace(code) ? factoryWhitespace(effects, resourceOpen)(code) : resourceOpen(code);\n  }\n\n  /**\n   * In resource, after optional whitespace, at `)` or a destination.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceOpen(code) {\n    if (code === 41) {\n      return resourceEnd(code);\n    }\n    return factoryDestination(effects, resourceDestinationAfter, resourceDestinationMissing, \"resourceDestination\", \"resourceDestinationLiteral\", \"resourceDestinationLiteralMarker\", \"resourceDestinationRaw\", \"resourceDestinationString\", 32)(code);\n  }\n\n  /**\n   * In resource, after destination, at optional whitespace.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceDestinationAfter(code) {\n    return markdownLineEndingOrSpace(code) ? factoryWhitespace(effects, resourceBetween)(code) : resourceEnd(code);\n  }\n\n  /**\n   * At invalid destination.\n   *\n   * ```markdown\n   * > | [a](<<) b\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceDestinationMissing(code) {\n    return nok(code);\n  }\n\n  /**\n   * In resource, after destination and whitespace, at `(` or title.\n   *\n   * ```markdown\n   * > | [a](b ) c\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceBetween(code) {\n    if (code === 34 || code === 39 || code === 40) {\n      return factoryTitle(effects, resourceTitleAfter, nok, \"resourceTitle\", \"resourceTitleMarker\", \"resourceTitleString\")(code);\n    }\n    return resourceEnd(code);\n  }\n\n  /**\n   * In resource, after title, at optional whitespace.\n   *\n   * ```markdown\n   * > | [a](b \"c\") d\n   *              ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceTitleAfter(code) {\n    return markdownLineEndingOrSpace(code) ? factoryWhitespace(effects, resourceEnd)(code) : resourceEnd(code);\n  }\n\n  /**\n   * In resource, at `)`.\n   *\n   * ```markdown\n   * > | [a](b) d\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceEnd(code) {\n    if (code === 41) {\n      effects.enter(\"resourceMarker\");\n      effects.consume(code);\n      effects.exit(\"resourceMarker\");\n      effects.exit(\"resource\");\n      return ok;\n    }\n    return nok(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeReferenceFull(effects, ok, nok) {\n  const self = this;\n  return referenceFull;\n\n  /**\n   * In a reference (full), at the `[`.\n   *\n   * ```markdown\n   * > | [a][b] d\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceFull(code) {\n    return factoryLabel.call(self, effects, referenceFullAfter, referenceFullMissing, \"reference\", \"referenceMarker\", \"referenceString\")(code);\n  }\n\n  /**\n   * In a reference (full), after `]`.\n   *\n   * ```markdown\n   * > | [a][b] d\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceFullAfter(code) {\n    return self.parser.defined.includes(normalizeIdentifier(self.sliceSerialize(self.events[self.events.length - 1][1]).slice(1, -1))) ? ok(code) : nok(code);\n  }\n\n  /**\n   * In reference (full) that was missing.\n   *\n   * ```markdown\n   * > | [a][b d\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceFullMissing(code) {\n    return nok(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeReferenceCollapsed(effects, ok, nok) {\n  return referenceCollapsedStart;\n\n  /**\n   * In reference (collapsed), at `[`.\n   *\n   * > 👉 **Note**: we only get here if the label is defined.\n   *\n   * ```markdown\n   * > | [a][] d\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceCollapsedStart(code) {\n    // We only attempt a collapsed label if there’s a `[`.\n\n    effects.enter(\"reference\");\n    effects.enter(\"referenceMarker\");\n    effects.consume(code);\n    effects.exit(\"referenceMarker\");\n    return referenceCollapsedOpen;\n  }\n\n  /**\n   * In reference (collapsed), at `]`.\n   *\n   * > 👉 **Note**: we only get here if the label is defined.\n   *\n   * ```markdown\n   * > | [a][] d\n   *         ^\n   * ```\n   *\n   *  @type {State}\n   */\n  function referenceCollapsedOpen(code) {\n    if (code === 93) {\n      effects.enter(\"referenceMarker\");\n      effects.consume(code);\n      effects.exit(\"referenceMarker\");\n      effects.exit(\"reference\");\n      return ok;\n    }\n    return nok(code);\n  }\n}","/**\n * @import {\n *   Construct,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { labelEnd } from './label-end.js';\n\n/** @type {Construct} */\nexport const labelStartImage = {\n  name: 'labelStartImage',\n  resolveAll: labelEnd.resolveAll,\n  tokenize: tokenizeLabelStartImage\n};\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeLabelStartImage(effects, ok, nok) {\n  const self = this;\n  return start;\n\n  /**\n   * Start of label (image) start.\n   *\n   * ```markdown\n   * > | a ![b] c\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(\"labelImage\");\n    effects.enter(\"labelImageMarker\");\n    effects.consume(code);\n    effects.exit(\"labelImageMarker\");\n    return open;\n  }\n\n  /**\n   * After `!`, at `[`.\n   *\n   * ```markdown\n   * > | a ![b] c\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (code === 91) {\n      effects.enter(\"labelMarker\");\n      effects.consume(code);\n      effects.exit(\"labelMarker\");\n      effects.exit(\"labelImage\");\n      return after;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After `![`.\n   *\n   * ```markdown\n   * > | a ![b] c\n   *         ^\n   * ```\n   *\n   * This is needed in because, when GFM footnotes are enabled, images never\n   * form when started with a `^`.\n   * Instead, links form:\n   *\n   * ```markdown\n   * ![^a](b)\n   *\n   * ![^a][b]\n   *\n   * [b]: c\n   * ```\n   *\n   * ```html\n   * <p>!<a href=\\\"b\\\">^a</a></p>\n   * <p>!<a href=\\\"c\\\">^a</a></p>\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    // To do: use a new field to do this, this is still needed for\n    // `micromark-extension-gfm-footnote`, but the `label-start-link`\n    // behavior isn’t.\n    // Hidden footnotes hook.\n    /* c8 ignore next 3 */\n    return code === 94 && '_hiddenFootnoteSupport' in self.parser.constructs ? nok(code) : ok(code);\n  }\n}","/**\n * @import {\n *   Construct,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { labelEnd } from './label-end.js';\n\n/** @type {Construct} */\nexport const labelStartLink = {\n  name: 'labelStartLink',\n  resolveAll: labelEnd.resolveAll,\n  tokenize: tokenizeLabelStartLink\n};\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeLabelStartLink(effects, ok, nok) {\n  const self = this;\n  return start;\n\n  /**\n   * Start of label (link) start.\n   *\n   * ```markdown\n   * > | a [b] c\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(\"labelLink\");\n    effects.enter(\"labelMarker\");\n    effects.consume(code);\n    effects.exit(\"labelMarker\");\n    effects.exit(\"labelLink\");\n    return after;\n  }\n\n  /** @type {State} */\n  function after(code) {\n    // To do: this isn’t needed in `micromark-extension-gfm-footnote`,\n    // remove.\n    // Hidden footnotes hook.\n    /* c8 ignore next 3 */\n    return code === 94 && '_hiddenFootnoteSupport' in self.parser.constructs ? nok(code) : ok(code);\n  }\n}","/**\n * @import {\n *   Construct,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding } from 'micromark-util-character';\n/** @type {Construct} */\nexport const lineEnding = {\n  name: 'lineEnding',\n  tokenize: tokenizeLineEnding\n};\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeLineEnding(effects, ok) {\n  return start;\n\n  /** @type {State} */\n  function start(code) {\n    effects.enter(\"lineEnding\");\n    effects.consume(code);\n    effects.exit(\"lineEnding\");\n    return factorySpace(effects, ok, \"linePrefix\");\n  }\n}","/**\n * @import {\n *   Code,\n *   Construct,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding, markdownSpace } from 'micromark-util-character';\n/** @type {Construct} */\nexport const thematicBreak = {\n  name: 'thematicBreak',\n  tokenize: tokenizeThematicBreak\n};\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeThematicBreak(effects, ok, nok) {\n  let size = 0;\n  /** @type {NonNullable<Code>} */\n  let marker;\n  return start;\n\n  /**\n   * Start of thematic break.\n   *\n   * ```markdown\n   * > | ***\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(\"thematicBreak\");\n    // To do: parse indent like `markdown-rs`.\n    return before(code);\n  }\n\n  /**\n   * After optional whitespace, at marker.\n   *\n   * ```markdown\n   * > | ***\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    marker = code;\n    return atBreak(code);\n  }\n\n  /**\n   * After something, before something else.\n   *\n   * ```markdown\n   * > | ***\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (code === marker) {\n      effects.enter(\"thematicBreakSequence\");\n      return sequence(code);\n    }\n    if (size >= 3 && (code === null || markdownLineEnding(code))) {\n      effects.exit(\"thematicBreak\");\n      return ok(code);\n    }\n    return nok(code);\n  }\n\n  /**\n   * In sequence.\n   *\n   * ```markdown\n   * > | ***\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequence(code) {\n    if (code === marker) {\n      effects.consume(code);\n      size++;\n      return sequence;\n    }\n    effects.exit(\"thematicBreakSequence\");\n    return markdownSpace(code) ? factorySpace(effects, atBreak, \"whitespace\")(code) : atBreak(code);\n  }\n}","/**\n * @import {\n *   Code,\n *   Construct,\n *   Exiter,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { asciiDigit, markdownSpace } from 'micromark-util-character';\nimport { blankLine } from './blank-line.js';\nimport { thematicBreak } from './thematic-break.js';\n\n/** @type {Construct} */\nexport const list = {\n  continuation: {\n    tokenize: tokenizeListContinuation\n  },\n  exit: tokenizeListEnd,\n  name: 'list',\n  tokenize: tokenizeListStart\n};\n\n/** @type {Construct} */\nconst listItemPrefixWhitespaceConstruct = {\n  partial: true,\n  tokenize: tokenizeListItemPrefixWhitespace\n};\n\n/** @type {Construct} */\nconst indentConstruct = {\n  partial: true,\n  tokenize: tokenizeIndent\n};\n\n// To do: `markdown-rs` parses list items on their own and later stitches them\n// together.\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeListStart(effects, ok, nok) {\n  const self = this;\n  const tail = self.events[self.events.length - 1];\n  let initialSize = tail && tail[1].type === \"linePrefix\" ? tail[2].sliceSerialize(tail[1], true).length : 0;\n  let size = 0;\n  return start;\n\n  /** @type {State} */\n  function start(code) {\n    const kind = self.containerState.type || (code === 42 || code === 43 || code === 45 ? \"listUnordered\" : \"listOrdered\");\n    if (kind === \"listUnordered\" ? !self.containerState.marker || code === self.containerState.marker : asciiDigit(code)) {\n      if (!self.containerState.type) {\n        self.containerState.type = kind;\n        effects.enter(kind, {\n          _container: true\n        });\n      }\n      if (kind === \"listUnordered\") {\n        effects.enter(\"listItemPrefix\");\n        return code === 42 || code === 45 ? effects.check(thematicBreak, nok, atMarker)(code) : atMarker(code);\n      }\n      if (!self.interrupt || code === 49) {\n        effects.enter(\"listItemPrefix\");\n        effects.enter(\"listItemValue\");\n        return inside(code);\n      }\n    }\n    return nok(code);\n  }\n\n  /** @type {State} */\n  function inside(code) {\n    if (asciiDigit(code) && ++size < 10) {\n      effects.consume(code);\n      return inside;\n    }\n    if ((!self.interrupt || size < 2) && (self.containerState.marker ? code === self.containerState.marker : code === 41 || code === 46)) {\n      effects.exit(\"listItemValue\");\n      return atMarker(code);\n    }\n    return nok(code);\n  }\n\n  /**\n   * @type {State}\n   **/\n  function atMarker(code) {\n    effects.enter(\"listItemMarker\");\n    effects.consume(code);\n    effects.exit(\"listItemMarker\");\n    self.containerState.marker = self.containerState.marker || code;\n    return effects.check(blankLine,\n    // Can’t be empty when interrupting.\n    self.interrupt ? nok : onBlank, effects.attempt(listItemPrefixWhitespaceConstruct, endOfPrefix, otherPrefix));\n  }\n\n  /** @type {State} */\n  function onBlank(code) {\n    self.containerState.initialBlankLine = true;\n    initialSize++;\n    return endOfPrefix(code);\n  }\n\n  /** @type {State} */\n  function otherPrefix(code) {\n    if (markdownSpace(code)) {\n      effects.enter(\"listItemPrefixWhitespace\");\n      effects.consume(code);\n      effects.exit(\"listItemPrefixWhitespace\");\n      return endOfPrefix;\n    }\n    return nok(code);\n  }\n\n  /** @type {State} */\n  function endOfPrefix(code) {\n    self.containerState.size = initialSize + self.sliceSerialize(effects.exit(\"listItemPrefix\"), true).length;\n    return ok(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeListContinuation(effects, ok, nok) {\n  const self = this;\n  self.containerState._closeFlow = undefined;\n  return effects.check(blankLine, onBlank, notBlank);\n\n  /** @type {State} */\n  function onBlank(code) {\n    self.containerState.furtherBlankLines = self.containerState.furtherBlankLines || self.containerState.initialBlankLine;\n\n    // We have a blank line.\n    // Still, try to consume at most the items size.\n    return factorySpace(effects, ok, \"listItemIndent\", self.containerState.size + 1)(code);\n  }\n\n  /** @type {State} */\n  function notBlank(code) {\n    if (self.containerState.furtherBlankLines || !markdownSpace(code)) {\n      self.containerState.furtherBlankLines = undefined;\n      self.containerState.initialBlankLine = undefined;\n      return notInCurrentItem(code);\n    }\n    self.containerState.furtherBlankLines = undefined;\n    self.containerState.initialBlankLine = undefined;\n    return effects.attempt(indentConstruct, ok, notInCurrentItem)(code);\n  }\n\n  /** @type {State} */\n  function notInCurrentItem(code) {\n    // While we do continue, we signal that the flow should be closed.\n    self.containerState._closeFlow = true;\n    // As we’re closing flow, we’re no longer interrupting.\n    self.interrupt = undefined;\n    // Always populated by defaults.\n\n    return factorySpace(effects, effects.attempt(list, ok, nok), \"linePrefix\", self.parser.constructs.disable.null.includes('codeIndented') ? undefined : 4)(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeIndent(effects, ok, nok) {\n  const self = this;\n  return factorySpace(effects, afterPrefix, \"listItemIndent\", self.containerState.size + 1);\n\n  /** @type {State} */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1];\n    return tail && tail[1].type === \"listItemIndent\" && tail[2].sliceSerialize(tail[1], true).length === self.containerState.size ? ok(code) : nok(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Exiter}\n */\nfunction tokenizeListEnd(effects) {\n  effects.exit(this.containerState.type);\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeListItemPrefixWhitespace(effects, ok, nok) {\n  const self = this;\n\n  // Always populated by defaults.\n\n  return factorySpace(effects, afterPrefix, \"listItemPrefixWhitespace\", self.parser.constructs.disable.null.includes('codeIndented') ? undefined : 4 + 1);\n\n  /** @type {State} */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1];\n    return !markdownSpace(code) && tail && tail[1].type === \"listItemPrefixWhitespace\" ? ok(code) : nok(code);\n  }\n}","/**\n * @import {\n *   Code,\n *   Construct,\n *   Resolver,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding, markdownSpace } from 'micromark-util-character';\n/** @type {Construct} */\nexport const setextUnderline = {\n  name: 'setextUnderline',\n  resolveTo: resolveToSetextUnderline,\n  tokenize: tokenizeSetextUnderline\n};\n\n/** @type {Resolver} */\nfunction resolveToSetextUnderline(events, context) {\n  // To do: resolve like `markdown-rs`.\n  let index = events.length;\n  /** @type {number | undefined} */\n  let content;\n  /** @type {number | undefined} */\n  let text;\n  /** @type {number | undefined} */\n  let definition;\n\n  // Find the opening of the content.\n  // It’ll always exist: we don’t tokenize if it isn’t there.\n  while (index--) {\n    if (events[index][0] === 'enter') {\n      if (events[index][1].type === \"content\") {\n        content = index;\n        break;\n      }\n      if (events[index][1].type === \"paragraph\") {\n        text = index;\n      }\n    }\n    // Exit\n    else {\n      if (events[index][1].type === \"content\") {\n        // Remove the content end (if needed we’ll add it later)\n        events.splice(index, 1);\n      }\n      if (!definition && events[index][1].type === \"definition\") {\n        definition = index;\n      }\n    }\n  }\n  const heading = {\n    type: \"setextHeading\",\n    start: {\n      ...events[content][1].start\n    },\n    end: {\n      ...events[events.length - 1][1].end\n    }\n  };\n\n  // Change the paragraph to setext heading text.\n  events[text][1].type = \"setextHeadingText\";\n\n  // If we have definitions in the content, we’ll keep on having content,\n  // but we need move it.\n  if (definition) {\n    events.splice(text, 0, ['enter', heading, context]);\n    events.splice(definition + 1, 0, ['exit', events[content][1], context]);\n    events[content][1].end = {\n      ...events[definition][1].end\n    };\n  } else {\n    events[content][1] = heading;\n  }\n\n  // Add the heading exit at the end.\n  events.push(['exit', heading, context]);\n  return events;\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeSetextUnderline(effects, ok, nok) {\n  const self = this;\n  /** @type {NonNullable<Code>} */\n  let marker;\n  return start;\n\n  /**\n   * At start of heading (setext) underline.\n   *\n   * ```markdown\n   *   | aa\n   * > | ==\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    let index = self.events.length;\n    /** @type {boolean | undefined} */\n    let paragraph;\n    // Find an opening.\n    while (index--) {\n      // Skip enter/exit of line ending, line prefix, and content.\n      // We can now either have a definition or a paragraph.\n      if (self.events[index][1].type !== \"lineEnding\" && self.events[index][1].type !== \"linePrefix\" && self.events[index][1].type !== \"content\") {\n        paragraph = self.events[index][1].type === \"paragraph\";\n        break;\n      }\n    }\n\n    // To do: handle lazy/pierce like `markdown-rs`.\n    // To do: parse indent like `markdown-rs`.\n    if (!self.parser.lazy[self.now().line] && (self.interrupt || paragraph)) {\n      effects.enter(\"setextHeadingLine\");\n      marker = code;\n      return before(code);\n    }\n    return nok(code);\n  }\n\n  /**\n   * After optional whitespace, at `-` or `=`.\n   *\n   * ```markdown\n   *   | aa\n   * > | ==\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    effects.enter(\"setextHeadingLineSequence\");\n    return inside(code);\n  }\n\n  /**\n   * In sequence.\n   *\n   * ```markdown\n   *   | aa\n   * > | ==\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    if (code === marker) {\n      effects.consume(code);\n      return inside;\n    }\n    effects.exit(\"setextHeadingLineSequence\");\n    return markdownSpace(code) ? factorySpace(effects, after, \"lineSuffix\")(code) : after(code);\n  }\n\n  /**\n   * After sequence, after optional whitespace.\n   *\n   * ```markdown\n   *   | aa\n   * > | ==\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit(\"setextHeadingLine\");\n      return ok(code);\n    }\n    return nok(code);\n  }\n}","/**\n * @import {Extension} from 'micromark-util-types'\n */\n\nimport { attention, autolink, blockQuote, characterEscape, characterReference, codeFenced, codeIndented, codeText, definition, hardBreakEscape, headingAtx, htmlFlow, htmlText, labelEnd, labelStartImage, labelStartLink, lineEnding, list, setextUnderline, thematicBreak } from 'micromark-core-commonmark';\nimport { resolver as resolveText } from './initialize/text.js';\n\n/** @satisfies {Extension['document']} */\nexport const document = {\n  [42]: list,\n  [43]: list,\n  [45]: list,\n  [48]: list,\n  [49]: list,\n  [50]: list,\n  [51]: list,\n  [52]: list,\n  [53]: list,\n  [54]: list,\n  [55]: list,\n  [56]: list,\n  [57]: list,\n  [62]: blockQuote\n};\n\n/** @satisfies {Extension['contentInitial']} */\nexport const contentInitial = {\n  [91]: definition\n};\n\n/** @satisfies {Extension['flowInitial']} */\nexport const flowInitial = {\n  [-2]: codeIndented,\n  [-1]: codeIndented,\n  [32]: codeIndented\n};\n\n/** @satisfies {Extension['flow']} */\nexport const flow = {\n  [35]: headingAtx,\n  [42]: thematicBreak,\n  [45]: [setextUnderline, thematicBreak],\n  [60]: htmlFlow,\n  [61]: setextUnderline,\n  [95]: thematicBreak,\n  [96]: codeFenced,\n  [126]: codeFenced\n};\n\n/** @satisfies {Extension['string']} */\nexport const string = {\n  [38]: characterReference,\n  [92]: characterEscape\n};\n\n/** @satisfies {Extension['text']} */\nexport const text = {\n  [-5]: lineEnding,\n  [-4]: lineEnding,\n  [-3]: lineEnding,\n  [33]: labelStartImage,\n  [38]: characterReference,\n  [42]: attention,\n  [60]: [autolink, htmlText],\n  [91]: labelStartLink,\n  [92]: [hardBreakEscape, characterEscape],\n  [93]: labelEnd,\n  [95]: attention,\n  [96]: codeText\n};\n\n/** @satisfies {Extension['insideSpan']} */\nexport const insideSpan = {\n  null: [attention, resolveText]\n};\n\n/** @satisfies {Extension['attentionMarkers']} */\nexport const attentionMarkers = {\n  null: [42, 95]\n};\n\n/** @satisfies {Extension['disable']} */\nexport const disable = {\n  null: []\n};","/**\n * @import {\n *   Create,\n *   FullNormalizedExtension,\n *   InitialConstruct,\n *   ParseContext,\n *   ParseOptions\n * } from 'micromark-util-types'\n */\n\nimport { combineExtensions } from 'micromark-util-combine-extensions';\nimport { content } from './initialize/content.js';\nimport { document } from './initialize/document.js';\nimport { flow } from './initialize/flow.js';\nimport { string, text } from './initialize/text.js';\nimport * as defaultConstructs from './constructs.js';\nimport { createTokenizer } from './create-tokenizer.js';\n\n/**\n * @param {ParseOptions | null | undefined} [options]\n *   Configuration (optional).\n * @returns {ParseContext}\n *   Parser.\n */\nexport function parse(options) {\n  const settings = options || {};\n  const constructs = /** @type {FullNormalizedExtension} */\n  combineExtensions([defaultConstructs, ...(settings.extensions || [])]);\n\n  /** @type {ParseContext} */\n  const parser = {\n    constructs,\n    content: create(content),\n    defined: [],\n    document: create(document),\n    flow: create(flow),\n    lazy: {},\n    string: create(string),\n    text: create(text)\n  };\n  return parser;\n\n  /**\n   * @param {InitialConstruct} initial\n   *   Construct to start with.\n   * @returns {Create}\n   *   Create a tokenizer.\n   */\n  function create(initial) {\n    return creator;\n    /** @type {Create} */\n    function creator(from) {\n      return createTokenizer(parser, initial, from);\n    }\n  }\n}","/**\n * @import {\n *   Chunk,\n *   Code,\n *   ConstructRecord,\n *   Construct,\n *   Effects,\n *   InitialConstruct,\n *   ParseContext,\n *   Point,\n *   State,\n *   TokenizeContext,\n *   Token\n * } from 'micromark-util-types'\n */\n\n/**\n * @callback Restore\n *   Restore the state.\n * @returns {undefined}\n *   Nothing.\n *\n * @typedef Info\n *   Info.\n * @property {Restore} restore\n *   Restore.\n * @property {number} from\n *   From.\n *\n * @callback ReturnHandle\n *   Handle a successful run.\n * @param {Construct} construct\n *   Construct.\n * @param {Info} info\n *   Info.\n * @returns {undefined}\n *   Nothing.\n */\n\nimport { markdownLineEnding } from 'micromark-util-character';\nimport { push, splice } from 'micromark-util-chunked';\nimport { resolveAll } from 'micromark-util-resolve-all';\n/**\n * Create a tokenizer.\n * Tokenizers deal with one type of data (e.g., containers, flow, text).\n * The parser is the object dealing with it all.\n * `initialize` works like other constructs, except that only its `tokenize`\n * function is used, in which case it doesn’t receive an `ok` or `nok`.\n * `from` can be given to set the point before the first character, although\n * when further lines are indented, they must be set with `defineSkip`.\n *\n * @param {ParseContext} parser\n *   Parser.\n * @param {InitialConstruct} initialize\n *   Construct.\n * @param {Omit<Point, '_bufferIndex' | '_index'> | undefined} [from]\n *   Point (optional).\n * @returns {TokenizeContext}\n *   Context.\n */\nexport function createTokenizer(parser, initialize, from) {\n  /** @type {Point} */\n  let point = {\n    _bufferIndex: -1,\n    _index: 0,\n    line: from && from.line || 1,\n    column: from && from.column || 1,\n    offset: from && from.offset || 0\n  };\n  /** @type {Record<string, number>} */\n  const columnStart = {};\n  /** @type {Array<Construct>} */\n  const resolveAllConstructs = [];\n  /** @type {Array<Chunk>} */\n  let chunks = [];\n  /** @type {Array<Token>} */\n  let stack = [];\n  /** @type {boolean | undefined} */\n  let consumed = true;\n\n  /**\n   * Tools used for tokenizing.\n   *\n   * @type {Effects}\n   */\n  const effects = {\n    attempt: constructFactory(onsuccessfulconstruct),\n    check: constructFactory(onsuccessfulcheck),\n    consume,\n    enter,\n    exit,\n    interrupt: constructFactory(onsuccessfulcheck, {\n      interrupt: true\n    })\n  };\n\n  /**\n   * State and tools for resolving and serializing.\n   *\n   * @type {TokenizeContext}\n   */\n  const context = {\n    code: null,\n    containerState: {},\n    defineSkip,\n    events: [],\n    now,\n    parser,\n    previous: null,\n    sliceSerialize,\n    sliceStream,\n    write\n  };\n\n  /**\n   * The state function.\n   *\n   * @type {State | undefined}\n   */\n  let state = initialize.tokenize.call(context, effects);\n\n  /**\n   * Track which character we expect to be consumed, to catch bugs.\n   *\n   * @type {Code}\n   */\n  let expectedCode;\n  if (initialize.resolveAll) {\n    resolveAllConstructs.push(initialize);\n  }\n  return context;\n\n  /** @type {TokenizeContext['write']} */\n  function write(slice) {\n    chunks = push(chunks, slice);\n    main();\n\n    // Exit if we’re not done, resolve might change stuff.\n    if (chunks[chunks.length - 1] !== null) {\n      return [];\n    }\n    addResult(initialize, 0);\n\n    // Otherwise, resolve, and exit.\n    context.events = resolveAll(resolveAllConstructs, context.events, context);\n    return context.events;\n  }\n\n  //\n  // Tools.\n  //\n\n  /** @type {TokenizeContext['sliceSerialize']} */\n  function sliceSerialize(token, expandTabs) {\n    return serializeChunks(sliceStream(token), expandTabs);\n  }\n\n  /** @type {TokenizeContext['sliceStream']} */\n  function sliceStream(token) {\n    return sliceChunks(chunks, token);\n  }\n\n  /** @type {TokenizeContext['now']} */\n  function now() {\n    // This is a hot path, so we clone manually instead of `Object.assign({}, point)`\n    const {\n      _bufferIndex,\n      _index,\n      line,\n      column,\n      offset\n    } = point;\n    return {\n      _bufferIndex,\n      _index,\n      line,\n      column,\n      offset\n    };\n  }\n\n  /** @type {TokenizeContext['defineSkip']} */\n  function defineSkip(value) {\n    columnStart[value.line] = value.column;\n    accountForPotentialSkip();\n  }\n\n  //\n  // State management.\n  //\n\n  /**\n   * Main loop (note that `_index` and `_bufferIndex` in `point` are modified by\n   * `consume`).\n   * Here is where we walk through the chunks, which either include strings of\n   * several characters, or numerical character codes.\n   * The reason to do this in a loop instead of a call is so the stack can\n   * drain.\n   *\n   * @returns {undefined}\n   *   Nothing.\n   */\n  function main() {\n    /** @type {number} */\n    let chunkIndex;\n    while (point._index < chunks.length) {\n      const chunk = chunks[point._index];\n\n      // If we’re in a buffer chunk, loop through it.\n      if (typeof chunk === 'string') {\n        chunkIndex = point._index;\n        if (point._bufferIndex < 0) {\n          point._bufferIndex = 0;\n        }\n        while (point._index === chunkIndex && point._bufferIndex < chunk.length) {\n          go(chunk.charCodeAt(point._bufferIndex));\n        }\n      } else {\n        go(chunk);\n      }\n    }\n  }\n\n  /**\n   * Deal with one code.\n   *\n   * @param {Code} code\n   *   Code.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  function go(code) {\n    consumed = undefined;\n    expectedCode = code;\n    state = state(code);\n  }\n\n  /** @type {Effects['consume']} */\n  function consume(code) {\n    if (markdownLineEnding(code)) {\n      point.line++;\n      point.column = 1;\n      point.offset += code === -3 ? 2 : 1;\n      accountForPotentialSkip();\n    } else if (code !== -1) {\n      point.column++;\n      point.offset++;\n    }\n\n    // Not in a string chunk.\n    if (point._bufferIndex < 0) {\n      point._index++;\n    } else {\n      point._bufferIndex++;\n\n      // At end of string chunk.\n      if (point._bufferIndex ===\n      // Points w/ non-negative `_bufferIndex` reference\n      // strings.\n      /** @type {string} */\n      chunks[point._index].length) {\n        point._bufferIndex = -1;\n        point._index++;\n      }\n    }\n\n    // Expose the previous character.\n    context.previous = code;\n\n    // Mark as consumed.\n    consumed = true;\n  }\n\n  /** @type {Effects['enter']} */\n  function enter(type, fields) {\n    /** @type {Token} */\n    // @ts-expect-error Patch instead of assign required fields to help GC.\n    const token = fields || {};\n    token.type = type;\n    token.start = now();\n    context.events.push(['enter', token, context]);\n    stack.push(token);\n    return token;\n  }\n\n  /** @type {Effects['exit']} */\n  function exit(type) {\n    const token = stack.pop();\n    token.end = now();\n    context.events.push(['exit', token, context]);\n    return token;\n  }\n\n  /**\n   * Use results.\n   *\n   * @type {ReturnHandle}\n   */\n  function onsuccessfulconstruct(construct, info) {\n    addResult(construct, info.from);\n  }\n\n  /**\n   * Discard results.\n   *\n   * @type {ReturnHandle}\n   */\n  function onsuccessfulcheck(_, info) {\n    info.restore();\n  }\n\n  /**\n   * Factory to attempt/check/interrupt.\n   *\n   * @param {ReturnHandle} onreturn\n   *   Callback.\n   * @param {{interrupt?: boolean | undefined} | undefined} [fields]\n   *   Fields.\n   */\n  function constructFactory(onreturn, fields) {\n    return hook;\n\n    /**\n     * Handle either an object mapping codes to constructs, a list of\n     * constructs, or a single construct.\n     *\n     * @param {Array<Construct> | ConstructRecord | Construct} constructs\n     *   Constructs.\n     * @param {State} returnState\n     *   State.\n     * @param {State | undefined} [bogusState]\n     *   State.\n     * @returns {State}\n     *   State.\n     */\n    function hook(constructs, returnState, bogusState) {\n      /** @type {ReadonlyArray<Construct>} */\n      let listOfConstructs;\n      /** @type {number} */\n      let constructIndex;\n      /** @type {Construct} */\n      let currentConstruct;\n      /** @type {Info} */\n      let info;\n      return Array.isArray(constructs) ? /* c8 ignore next 1 */\n      handleListOfConstructs(constructs) : 'tokenize' in constructs ?\n      // Looks like a construct.\n      handleListOfConstructs([(/** @type {Construct} */constructs)]) : handleMapOfConstructs(constructs);\n\n      /**\n       * Handle a list of construct.\n       *\n       * @param {ConstructRecord} map\n       *   Constructs.\n       * @returns {State}\n       *   State.\n       */\n      function handleMapOfConstructs(map) {\n        return start;\n\n        /** @type {State} */\n        function start(code) {\n          const left = code !== null && map[code];\n          const all = code !== null && map.null;\n          const list = [\n          // To do: add more extension tests.\n          /* c8 ignore next 2 */\n          ...(Array.isArray(left) ? left : left ? [left] : []), ...(Array.isArray(all) ? all : all ? [all] : [])];\n          return handleListOfConstructs(list)(code);\n        }\n      }\n\n      /**\n       * Handle a list of construct.\n       *\n       * @param {ReadonlyArray<Construct>} list\n       *   Constructs.\n       * @returns {State}\n       *   State.\n       */\n      function handleListOfConstructs(list) {\n        listOfConstructs = list;\n        constructIndex = 0;\n        if (list.length === 0) {\n          return bogusState;\n        }\n        return handleConstruct(list[constructIndex]);\n      }\n\n      /**\n       * Handle a single construct.\n       *\n       * @param {Construct} construct\n       *   Construct.\n       * @returns {State}\n       *   State.\n       */\n      function handleConstruct(construct) {\n        return start;\n\n        /** @type {State} */\n        function start(code) {\n          // To do: not needed to store if there is no bogus state, probably?\n          // Currently doesn’t work because `inspect` in document does a check\n          // w/o a bogus, which doesn’t make sense. But it does seem to help perf\n          // by not storing.\n          info = store();\n          currentConstruct = construct;\n          if (!construct.partial) {\n            context.currentConstruct = construct;\n          }\n\n          // Always populated by defaults.\n\n          if (construct.name && context.parser.constructs.disable.null.includes(construct.name)) {\n            return nok(code);\n          }\n          return construct.tokenize.call(\n          // If we do have fields, create an object w/ `context` as its\n          // prototype.\n          // This allows a “live binding”, which is needed for `interrupt`.\n          fields ? Object.assign(Object.create(context), fields) : context, effects, ok, nok)(code);\n        }\n      }\n\n      /** @type {State} */\n      function ok(code) {\n        consumed = true;\n        onreturn(currentConstruct, info);\n        return returnState;\n      }\n\n      /** @type {State} */\n      function nok(code) {\n        consumed = true;\n        info.restore();\n        if (++constructIndex < listOfConstructs.length) {\n          return handleConstruct(listOfConstructs[constructIndex]);\n        }\n        return bogusState;\n      }\n    }\n  }\n\n  /**\n   * @param {Construct} construct\n   *   Construct.\n   * @param {number} from\n   *   From.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  function addResult(construct, from) {\n    if (construct.resolveAll && !resolveAllConstructs.includes(construct)) {\n      resolveAllConstructs.push(construct);\n    }\n    if (construct.resolve) {\n      splice(context.events, from, context.events.length - from, construct.resolve(context.events.slice(from), context));\n    }\n    if (construct.resolveTo) {\n      context.events = construct.resolveTo(context.events, context);\n    }\n  }\n\n  /**\n   * Store state.\n   *\n   * @returns {Info}\n   *   Info.\n   */\n  function store() {\n    const startPoint = now();\n    const startPrevious = context.previous;\n    const startCurrentConstruct = context.currentConstruct;\n    const startEventsIndex = context.events.length;\n    const startStack = Array.from(stack);\n    return {\n      from: startEventsIndex,\n      restore\n    };\n\n    /**\n     * Restore state.\n     *\n     * @returns {undefined}\n     *   Nothing.\n     */\n    function restore() {\n      point = startPoint;\n      context.previous = startPrevious;\n      context.currentConstruct = startCurrentConstruct;\n      context.events.length = startEventsIndex;\n      stack = startStack;\n      accountForPotentialSkip();\n    }\n  }\n\n  /**\n   * Move the current point a bit forward in the line when it’s on a column\n   * skip.\n   *\n   * @returns {undefined}\n   *   Nothing.\n   */\n  function accountForPotentialSkip() {\n    if (point.line in columnStart && point.column < 2) {\n      point.column = columnStart[point.line];\n      point.offset += columnStart[point.line] - 1;\n    }\n  }\n}\n\n/**\n * Get the chunks from a slice of chunks in the range of a token.\n *\n * @param {ReadonlyArray<Chunk>} chunks\n *   Chunks.\n * @param {Pick<Token, 'end' | 'start'>} token\n *   Token.\n * @returns {Array<Chunk>}\n *   Chunks.\n */\nfunction sliceChunks(chunks, token) {\n  const startIndex = token.start._index;\n  const startBufferIndex = token.start._bufferIndex;\n  const endIndex = token.end._index;\n  const endBufferIndex = token.end._bufferIndex;\n  /** @type {Array<Chunk>} */\n  let view;\n  if (startIndex === endIndex) {\n    // @ts-expect-error `_bufferIndex` is used on string chunks.\n    view = [chunks[startIndex].slice(startBufferIndex, endBufferIndex)];\n  } else {\n    view = chunks.slice(startIndex, endIndex);\n    if (startBufferIndex > -1) {\n      const head = view[0];\n      if (typeof head === 'string') {\n        view[0] = head.slice(startBufferIndex);\n        /* c8 ignore next 4 -- used to be used, no longer */\n      } else {\n        view.shift();\n      }\n    }\n    if (endBufferIndex > 0) {\n      // @ts-expect-error `_bufferIndex` is used on string chunks.\n      view.push(chunks[endIndex].slice(0, endBufferIndex));\n    }\n  }\n  return view;\n}\n\n/**\n * Get the string value of a slice of chunks.\n *\n * @param {ReadonlyArray<Chunk>} chunks\n *   Chunks.\n * @param {boolean | undefined} [expandTabs=false]\n *   Whether to expand tabs (default: `false`).\n * @returns {string}\n *   Result.\n */\nfunction serializeChunks(chunks, expandTabs) {\n  let index = -1;\n  /** @type {Array<string>} */\n  const result = [];\n  /** @type {boolean | undefined} */\n  let atTab;\n  while (++index < chunks.length) {\n    const chunk = chunks[index];\n    /** @type {string} */\n    let value;\n    if (typeof chunk === 'string') {\n      value = chunk;\n    } else switch (chunk) {\n      case -5:\n        {\n          value = \"\\r\";\n          break;\n        }\n      case -4:\n        {\n          value = \"\\n\";\n          break;\n        }\n      case -3:\n        {\n          value = \"\\r\" + \"\\n\";\n          break;\n        }\n      case -2:\n        {\n          value = expandTabs ? \" \" : \"\\t\";\n          break;\n        }\n      case -1:\n        {\n          if (!expandTabs && atTab) continue;\n          value = \" \";\n          break;\n        }\n      default:\n        {\n          // Currently only replacement character.\n          value = String.fromCharCode(chunk);\n        }\n    }\n    atTab = chunk === -2;\n    result.push(value);\n  }\n  return result.join('');\n}","/**\n * @import {Event} from 'micromark-util-types'\n */\n\nimport { subtokenize } from 'micromark-util-subtokenize';\n\n/**\n * @param {Array<Event>} events\n *   Events.\n * @returns {Array<Event>}\n *   Events.\n */\nexport function postprocess(events) {\n  while (!subtokenize(events)) {\n    // Empty\n  }\n  return events;\n}","/**\n * @import {Chunk, Code, Encoding, Value} from 'micromark-util-types'\n */\n\n/**\n * @callback Preprocessor\n *   Preprocess a value.\n * @param {Value} value\n *   Value.\n * @param {Encoding | null | undefined} [encoding]\n *   Encoding when `value` is a typed array (optional).\n * @param {boolean | null | undefined} [end=false]\n *   Whether this is the last chunk (default: `false`).\n * @returns {Array<Chunk>}\n *   Chunks.\n */\n\nconst search = /[\\0\\t\\n\\r]/g;\n\n/**\n * @returns {Preprocessor}\n *   Preprocess a value.\n */\nexport function preprocess() {\n  let column = 1;\n  let buffer = '';\n  /** @type {boolean | undefined} */\n  let start = true;\n  /** @type {boolean | undefined} */\n  let atCarriageReturn;\n  return preprocessor;\n\n  /** @type {Preprocessor} */\n  // eslint-disable-next-line complexity\n  function preprocessor(value, encoding, end) {\n    /** @type {Array<Chunk>} */\n    const chunks = [];\n    /** @type {RegExpMatchArray | null} */\n    let match;\n    /** @type {number} */\n    let next;\n    /** @type {number} */\n    let startPosition;\n    /** @type {number} */\n    let endPosition;\n    /** @type {Code} */\n    let code;\n    value = buffer + (typeof value === 'string' ? value.toString() : new TextDecoder(encoding || undefined).decode(value));\n    startPosition = 0;\n    buffer = '';\n    if (start) {\n      // To do: `markdown-rs` actually parses BOMs (byte order mark).\n      if (value.charCodeAt(0) === 65279) {\n        startPosition++;\n      }\n      start = undefined;\n    }\n    while (startPosition < value.length) {\n      search.lastIndex = startPosition;\n      match = search.exec(value);\n      endPosition = match && match.index !== undefined ? match.index : value.length;\n      code = value.charCodeAt(endPosition);\n      if (!match) {\n        buffer = value.slice(startPosition);\n        break;\n      }\n      if (code === 10 && startPosition === endPosition && atCarriageReturn) {\n        chunks.push(-3);\n        atCarriageReturn = undefined;\n      } else {\n        if (atCarriageReturn) {\n          chunks.push(-5);\n          atCarriageReturn = undefined;\n        }\n        if (startPosition < endPosition) {\n          chunks.push(value.slice(startPosition, endPosition));\n          column += endPosition - startPosition;\n        }\n        switch (code) {\n          case 0:\n            {\n              chunks.push(65533);\n              column++;\n              break;\n            }\n          case 9:\n            {\n              next = Math.ceil(column / 4) * 4;\n              chunks.push(-2);\n              while (column++ < next) chunks.push(-1);\n              break;\n            }\n          case 10:\n            {\n              chunks.push(-4);\n              column = 1;\n              break;\n            }\n          default:\n            {\n              atCarriageReturn = true;\n              column = 1;\n            }\n        }\n      }\n      startPosition = endPosition + 1;\n    }\n    if (end) {\n      if (atCarriageReturn) chunks.push(-5);\n      if (buffer) chunks.push(buffer);\n      chunks.push(null);\n    }\n    return chunks;\n  }\n}","/**\n * Turn the number (in string form as either hexa- or plain decimal) coming from\n * a numeric character reference into a character.\n *\n * Sort of like `String.fromCodePoint(Number.parseInt(value, base))`, but makes\n * non-characters and control characters safe.\n *\n * @param {string} value\n *   Value to decode.\n * @param {number} base\n *   Numeric base.\n * @returns {string}\n *   Character.\n */\nexport function decodeNumericCharacterReference(value, base) {\n  const code = Number.parseInt(value, base);\n  if (\n  // C0 except for HT, LF, FF, CR, space.\n  code < 9 || code === 11 || code > 13 && code < 32 ||\n  // Control character (DEL) of C0, and C1 controls.\n  code > 126 && code < 160 ||\n  // Lone high surrogates and low surrogates.\n  code > 55_295 && code < 57_344 ||\n  // Noncharacters.\n  code > 64_975 && code < 65_008 || /* eslint-disable no-bitwise */\n  (code & 65_535) === 65_535 || (code & 65_535) === 65_534 || /* eslint-enable no-bitwise */\n  // Out of range\n  code > 1_114_111) {\n    return \"\\uFFFD\";\n  }\n  return String.fromCodePoint(code);\n}","import { decodeNamedCharacterReference } from 'decode-named-character-reference';\nimport { decodeNumericCharacterReference } from 'micromark-util-decode-numeric-character-reference';\nconst characterEscapeOrReference = /\\\\([!-/:-@[-`{-~])|&(#(?:\\d{1,7}|x[\\da-f]{1,6})|[\\da-z]{1,31});/gi;\n\n/**\n * Decode markdown strings (which occur in places such as fenced code info\n * strings, destinations, labels, and titles).\n *\n * The “string” content type allows character escapes and -references.\n * This decodes those.\n *\n * @param {string} value\n *   Value to decode.\n * @returns {string}\n *   Decoded value.\n */\nexport function decodeString(value) {\n  return value.replace(characterEscapeOrReference, decode);\n}\n\n/**\n * @param {string} $0\n *   Match.\n * @param {string} $1\n *   Character escape.\n * @param {string} $2\n *   Character reference.\n * @returns {string}\n *   Decoded value\n */\nfunction decode($0, $1, $2) {\n  if ($1) {\n    // Escape.\n    return $1;\n  }\n\n  // Reference.\n  const head = $2.charCodeAt(0);\n  if (head === 35) {\n    const head = $2.charCodeAt(1);\n    const hex = head === 120 || head === 88;\n    return decodeNumericCharacterReference($2.slice(hex ? 2 : 1), hex ? 16 : 10);\n  }\n  return decodeNamedCharacterReference($2) || $0;\n}","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Point} Point\n * @typedef {import('unist').Position} Position\n */\n\n/**\n * @typedef NodeLike\n * @property {string} type\n * @property {PositionLike | null | undefined} [position]\n *\n * @typedef PointLike\n * @property {number | null | undefined} [line]\n * @property {number | null | undefined} [column]\n * @property {number | null | undefined} [offset]\n *\n * @typedef PositionLike\n * @property {PointLike | null | undefined} [start]\n * @property {PointLike | null | undefined} [end]\n */\n\n/**\n * Serialize the positional info of a point, position (start and end points),\n * or node.\n *\n * @param {Node | NodeLike | Point | PointLike | Position | PositionLike | null | undefined} [value]\n *   Node, position, or point.\n * @returns {string}\n *   Pretty printed positional info of a node (`string`).\n *\n *   In the format of a range `ls:cs-le:ce` (when given `node` or `position`)\n *   or a point `l:c` (when given `point`), where `l` stands for line, `c` for\n *   column, `s` for `start`, and `e` for end.\n *   An empty string (`''`) is returned if the given value is neither `node`,\n *   `position`, nor `point`.\n */\nexport function stringifyPosition(value) {\n  // Nothing.\n  if (!value || typeof value !== 'object') {\n    return ''\n  }\n\n  // Node.\n  if ('position' in value || 'type' in value) {\n    return position(value.position)\n  }\n\n  // Position.\n  if ('start' in value || 'end' in value) {\n    return position(value)\n  }\n\n  // Point.\n  if ('line' in value || 'column' in value) {\n    return point(value)\n  }\n\n  // ?\n  return ''\n}\n\n/**\n * @param {Point | PointLike | null | undefined} point\n * @returns {string}\n */\nfunction point(point) {\n  return index(point && point.line) + ':' + index(point && point.column)\n}\n\n/**\n * @param {Position | PositionLike | null | undefined} pos\n * @returns {string}\n */\nfunction position(pos) {\n  return point(pos && pos.start) + '-' + point(pos && pos.end)\n}\n\n/**\n * @param {number | null | undefined} value\n * @returns {number}\n */\nfunction index(value) {\n  return value && typeof value === 'number' ? value : 1\n}\n","/**\n * @import {\n *   Break,\n *   Blockquote,\n *   Code,\n *   Definition,\n *   Emphasis,\n *   Heading,\n *   Html,\n *   Image,\n *   InlineCode,\n *   Link,\n *   ListItem,\n *   List,\n *   Nodes,\n *   Paragraph,\n *   PhrasingContent,\n *   ReferenceType,\n *   Root,\n *   Strong,\n *   Text,\n *   ThematicBreak\n * } from 'mdast'\n * @import {\n *   Encoding,\n *   Event,\n *   Token,\n *   Value\n * } from 'micromark-util-types'\n * @import {Point} from 'unist'\n * @import {\n *   CompileContext,\n *   CompileData,\n *   Config,\n *   Extension,\n *   Handle,\n *   OnEnterError,\n *   Options\n * } from './types.js'\n */\n\nimport { toString } from 'mdast-util-to-string';\nimport { parse, postprocess, preprocess } from 'micromark';\nimport { decodeNumericCharacterReference } from 'micromark-util-decode-numeric-character-reference';\nimport { decodeString } from 'micromark-util-decode-string';\nimport { normalizeIdentifier } from 'micromark-util-normalize-identifier';\nimport { decodeNamedCharacterReference } from 'decode-named-character-reference';\nimport { stringifyPosition } from 'unist-util-stringify-position';\nconst own = {}.hasOwnProperty;\n\n/**\n * Turn markdown into a syntax tree.\n *\n * @overload\n * @param {Value} value\n * @param {Encoding | null | undefined} [encoding]\n * @param {Options | null | undefined} [options]\n * @returns {Root}\n *\n * @overload\n * @param {Value} value\n * @param {Options | null | undefined} [options]\n * @returns {Root}\n *\n * @param {Value} value\n *   Markdown to parse.\n * @param {Encoding | Options | null | undefined} [encoding]\n *   Character encoding for when `value` is `Buffer`.\n * @param {Options | null | undefined} [options]\n *   Configuration.\n * @returns {Root}\n *   mdast tree.\n */\nexport function fromMarkdown(value, encoding, options) {\n  if (typeof encoding !== 'string') {\n    options = encoding;\n    encoding = undefined;\n  }\n  return compiler(options)(postprocess(parse(options).document().write(preprocess()(value, encoding, true))));\n}\n\n/**\n * Note this compiler only understand complete buffering, not streaming.\n *\n * @param {Options | null | undefined} [options]\n */\nfunction compiler(options) {\n  /** @type {Config} */\n  const config = {\n    transforms: [],\n    canContainEols: ['emphasis', 'fragment', 'heading', 'paragraph', 'strong'],\n    enter: {\n      autolink: opener(link),\n      autolinkProtocol: onenterdata,\n      autolinkEmail: onenterdata,\n      atxHeading: opener(heading),\n      blockQuote: opener(blockQuote),\n      characterEscape: onenterdata,\n      characterReference: onenterdata,\n      codeFenced: opener(codeFlow),\n      codeFencedFenceInfo: buffer,\n      codeFencedFenceMeta: buffer,\n      codeIndented: opener(codeFlow, buffer),\n      codeText: opener(codeText, buffer),\n      codeTextData: onenterdata,\n      data: onenterdata,\n      codeFlowValue: onenterdata,\n      definition: opener(definition),\n      definitionDestinationString: buffer,\n      definitionLabelString: buffer,\n      definitionTitleString: buffer,\n      emphasis: opener(emphasis),\n      hardBreakEscape: opener(hardBreak),\n      hardBreakTrailing: opener(hardBreak),\n      htmlFlow: opener(html, buffer),\n      htmlFlowData: onenterdata,\n      htmlText: opener(html, buffer),\n      htmlTextData: onenterdata,\n      image: opener(image),\n      label: buffer,\n      link: opener(link),\n      listItem: opener(listItem),\n      listItemValue: onenterlistitemvalue,\n      listOrdered: opener(list, onenterlistordered),\n      listUnordered: opener(list),\n      paragraph: opener(paragraph),\n      reference: onenterreference,\n      referenceString: buffer,\n      resourceDestinationString: buffer,\n      resourceTitleString: buffer,\n      setextHeading: opener(heading),\n      strong: opener(strong),\n      thematicBreak: opener(thematicBreak)\n    },\n    exit: {\n      atxHeading: closer(),\n      atxHeadingSequence: onexitatxheadingsequence,\n      autolink: closer(),\n      autolinkEmail: onexitautolinkemail,\n      autolinkProtocol: onexitautolinkprotocol,\n      blockQuote: closer(),\n      characterEscapeValue: onexitdata,\n      characterReferenceMarkerHexadecimal: onexitcharacterreferencemarker,\n      characterReferenceMarkerNumeric: onexitcharacterreferencemarker,\n      characterReferenceValue: onexitcharacterreferencevalue,\n      characterReference: onexitcharacterreference,\n      codeFenced: closer(onexitcodefenced),\n      codeFencedFence: onexitcodefencedfence,\n      codeFencedFenceInfo: onexitcodefencedfenceinfo,\n      codeFencedFenceMeta: onexitcodefencedfencemeta,\n      codeFlowValue: onexitdata,\n      codeIndented: closer(onexitcodeindented),\n      codeText: closer(onexitcodetext),\n      codeTextData: onexitdata,\n      data: onexitdata,\n      definition: closer(),\n      definitionDestinationString: onexitdefinitiondestinationstring,\n      definitionLabelString: onexitdefinitionlabelstring,\n      definitionTitleString: onexitdefinitiontitlestring,\n      emphasis: closer(),\n      hardBreakEscape: closer(onexithardbreak),\n      hardBreakTrailing: closer(onexithardbreak),\n      htmlFlow: closer(onexithtmlflow),\n      htmlFlowData: onexitdata,\n      htmlText: closer(onexithtmltext),\n      htmlTextData: onexitdata,\n      image: closer(onexitimage),\n      label: onexitlabel,\n      labelText: onexitlabeltext,\n      lineEnding: onexitlineending,\n      link: closer(onexitlink),\n      listItem: closer(),\n      listOrdered: closer(),\n      listUnordered: closer(),\n      paragraph: closer(),\n      referenceString: onexitreferencestring,\n      resourceDestinationString: onexitresourcedestinationstring,\n      resourceTitleString: onexitresourcetitlestring,\n      resource: onexitresource,\n      setextHeading: closer(onexitsetextheading),\n      setextHeadingLineSequence: onexitsetextheadinglinesequence,\n      setextHeadingText: onexitsetextheadingtext,\n      strong: closer(),\n      thematicBreak: closer()\n    }\n  };\n  configure(config, (options || {}).mdastExtensions || []);\n\n  /** @type {CompileData} */\n  const data = {};\n  return compile;\n\n  /**\n   * Turn micromark events into an mdast tree.\n   *\n   * @param {Array<Event>} events\n   *   Events.\n   * @returns {Root}\n   *   mdast tree.\n   */\n  function compile(events) {\n    /** @type {Root} */\n    let tree = {\n      type: 'root',\n      children: []\n    };\n    /** @type {Omit<CompileContext, 'sliceSerialize'>} */\n    const context = {\n      stack: [tree],\n      tokenStack: [],\n      config,\n      enter,\n      exit,\n      buffer,\n      resume,\n      data\n    };\n    /** @type {Array<number>} */\n    const listStack = [];\n    let index = -1;\n    while (++index < events.length) {\n      // We preprocess lists to add `listItem` tokens, and to infer whether\n      // items the list itself are spread out.\n      if (events[index][1].type === \"listOrdered\" || events[index][1].type === \"listUnordered\") {\n        if (events[index][0] === 'enter') {\n          listStack.push(index);\n        } else {\n          const tail = listStack.pop();\n          index = prepareList(events, tail, index);\n        }\n      }\n    }\n    index = -1;\n    while (++index < events.length) {\n      const handler = config[events[index][0]];\n      if (own.call(handler, events[index][1].type)) {\n        handler[events[index][1].type].call(Object.assign({\n          sliceSerialize: events[index][2].sliceSerialize\n        }, context), events[index][1]);\n      }\n    }\n\n    // Handle tokens still being open.\n    if (context.tokenStack.length > 0) {\n      const tail = context.tokenStack[context.tokenStack.length - 1];\n      const handler = tail[1] || defaultOnError;\n      handler.call(context, undefined, tail[0]);\n    }\n\n    // Figure out `root` position.\n    tree.position = {\n      start: point(events.length > 0 ? events[0][1].start : {\n        line: 1,\n        column: 1,\n        offset: 0\n      }),\n      end: point(events.length > 0 ? events[events.length - 2][1].end : {\n        line: 1,\n        column: 1,\n        offset: 0\n      })\n    };\n\n    // Call transforms.\n    index = -1;\n    while (++index < config.transforms.length) {\n      tree = config.transforms[index](tree) || tree;\n    }\n    return tree;\n  }\n\n  /**\n   * @param {Array<Event>} events\n   * @param {number} start\n   * @param {number} length\n   * @returns {number}\n   */\n  function prepareList(events, start, length) {\n    let index = start - 1;\n    let containerBalance = -1;\n    let listSpread = false;\n    /** @type {Token | undefined} */\n    let listItem;\n    /** @type {number | undefined} */\n    let lineIndex;\n    /** @type {number | undefined} */\n    let firstBlankLineIndex;\n    /** @type {boolean | undefined} */\n    let atMarker;\n    while (++index <= length) {\n      const event = events[index];\n      switch (event[1].type) {\n        case \"listUnordered\":\n        case \"listOrdered\":\n        case \"blockQuote\":\n          {\n            if (event[0] === 'enter') {\n              containerBalance++;\n            } else {\n              containerBalance--;\n            }\n            atMarker = undefined;\n            break;\n          }\n        case \"lineEndingBlank\":\n          {\n            if (event[0] === 'enter') {\n              if (listItem && !atMarker && !containerBalance && !firstBlankLineIndex) {\n                firstBlankLineIndex = index;\n              }\n              atMarker = undefined;\n            }\n            break;\n          }\n        case \"linePrefix\":\n        case \"listItemValue\":\n        case \"listItemMarker\":\n        case \"listItemPrefix\":\n        case \"listItemPrefixWhitespace\":\n          {\n            // Empty.\n\n            break;\n          }\n        default:\n          {\n            atMarker = undefined;\n          }\n      }\n      if (!containerBalance && event[0] === 'enter' && event[1].type === \"listItemPrefix\" || containerBalance === -1 && event[0] === 'exit' && (event[1].type === \"listUnordered\" || event[1].type === \"listOrdered\")) {\n        if (listItem) {\n          let tailIndex = index;\n          lineIndex = undefined;\n          while (tailIndex--) {\n            const tailEvent = events[tailIndex];\n            if (tailEvent[1].type === \"lineEnding\" || tailEvent[1].type === \"lineEndingBlank\") {\n              if (tailEvent[0] === 'exit') continue;\n              if (lineIndex) {\n                events[lineIndex][1].type = \"lineEndingBlank\";\n                listSpread = true;\n              }\n              tailEvent[1].type = \"lineEnding\";\n              lineIndex = tailIndex;\n            } else if (tailEvent[1].type === \"linePrefix\" || tailEvent[1].type === \"blockQuotePrefix\" || tailEvent[1].type === \"blockQuotePrefixWhitespace\" || tailEvent[1].type === \"blockQuoteMarker\" || tailEvent[1].type === \"listItemIndent\") {\n              // Empty\n            } else {\n              break;\n            }\n          }\n          if (firstBlankLineIndex && (!lineIndex || firstBlankLineIndex < lineIndex)) {\n            listItem._spread = true;\n          }\n\n          // Fix position.\n          listItem.end = Object.assign({}, lineIndex ? events[lineIndex][1].start : event[1].end);\n          events.splice(lineIndex || index, 0, ['exit', listItem, event[2]]);\n          index++;\n          length++;\n        }\n\n        // Create a new list item.\n        if (event[1].type === \"listItemPrefix\") {\n          /** @type {Token} */\n          const item = {\n            type: 'listItem',\n            _spread: false,\n            start: Object.assign({}, event[1].start),\n            // @ts-expect-error: we’ll add `end` in a second.\n            end: undefined\n          };\n          listItem = item;\n          events.splice(index, 0, ['enter', item, event[2]]);\n          index++;\n          length++;\n          firstBlankLineIndex = undefined;\n          atMarker = true;\n        }\n      }\n    }\n    events[start][1]._spread = listSpread;\n    return length;\n  }\n\n  /**\n   * Create an opener handle.\n   *\n   * @param {(token: Token) => Nodes} create\n   *   Create a node.\n   * @param {Handle | undefined} [and]\n   *   Optional function to also run.\n   * @returns {Handle}\n   *   Handle.\n   */\n  function opener(create, and) {\n    return open;\n\n    /**\n     * @this {CompileContext}\n     * @param {Token} token\n     * @returns {undefined}\n     */\n    function open(token) {\n      enter.call(this, create(token), token);\n      if (and) and.call(this, token);\n    }\n  }\n\n  /**\n   * @type {CompileContext['buffer']}\n   */\n  function buffer() {\n    this.stack.push({\n      type: 'fragment',\n      children: []\n    });\n  }\n\n  /**\n   * @type {CompileContext['enter']}\n   */\n  function enter(node, token, errorHandler) {\n    const parent = this.stack[this.stack.length - 1];\n    /** @type {Array<Nodes>} */\n    const siblings = parent.children;\n    siblings.push(node);\n    this.stack.push(node);\n    this.tokenStack.push([token, errorHandler || undefined]);\n    node.position = {\n      start: point(token.start),\n      // @ts-expect-error: `end` will be patched later.\n      end: undefined\n    };\n  }\n\n  /**\n   * Create a closer handle.\n   *\n   * @param {Handle | undefined} [and]\n   *   Optional function to also run.\n   * @returns {Handle}\n   *   Handle.\n   */\n  function closer(and) {\n    return close;\n\n    /**\n     * @this {CompileContext}\n     * @param {Token} token\n     * @returns {undefined}\n     */\n    function close(token) {\n      if (and) and.call(this, token);\n      exit.call(this, token);\n    }\n  }\n\n  /**\n   * @type {CompileContext['exit']}\n   */\n  function exit(token, onExitError) {\n    const node = this.stack.pop();\n    const open = this.tokenStack.pop();\n    if (!open) {\n      throw new Error('Cannot close `' + token.type + '` (' + stringifyPosition({\n        start: token.start,\n        end: token.end\n      }) + '): it’s not open');\n    } else if (open[0].type !== token.type) {\n      if (onExitError) {\n        onExitError.call(this, token, open[0]);\n      } else {\n        const handler = open[1] || defaultOnError;\n        handler.call(this, token, open[0]);\n      }\n    }\n    node.position.end = point(token.end);\n  }\n\n  /**\n   * @type {CompileContext['resume']}\n   */\n  function resume() {\n    return toString(this.stack.pop());\n  }\n\n  //\n  // Handlers.\n  //\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onenterlistordered() {\n    this.data.expectingFirstListItemValue = true;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onenterlistitemvalue(token) {\n    if (this.data.expectingFirstListItemValue) {\n      const ancestor = this.stack[this.stack.length - 2];\n      ancestor.start = Number.parseInt(this.sliceSerialize(token), 10);\n      this.data.expectingFirstListItemValue = undefined;\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodefencedfenceinfo() {\n    const data = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.lang = data;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodefencedfencemeta() {\n    const data = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.meta = data;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodefencedfence() {\n    // Exit if this is the closing fence.\n    if (this.data.flowCodeInside) return;\n    this.buffer();\n    this.data.flowCodeInside = true;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodefenced() {\n    const data = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.value = data.replace(/^(\\r?\\n|\\r)|(\\r?\\n|\\r)$/g, '');\n    this.data.flowCodeInside = undefined;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodeindented() {\n    const data = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.value = data.replace(/(\\r?\\n|\\r)$/g, '');\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitdefinitionlabelstring(token) {\n    const label = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.label = label;\n    node.identifier = normalizeIdentifier(this.sliceSerialize(token)).toLowerCase();\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitdefinitiontitlestring() {\n    const data = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.title = data;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitdefinitiondestinationstring() {\n    const data = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.url = data;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitatxheadingsequence(token) {\n    const node = this.stack[this.stack.length - 1];\n    if (!node.depth) {\n      const depth = this.sliceSerialize(token).length;\n      node.depth = depth;\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitsetextheadingtext() {\n    this.data.setextHeadingSlurpLineEnding = true;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitsetextheadinglinesequence(token) {\n    const node = this.stack[this.stack.length - 1];\n    node.depth = this.sliceSerialize(token).codePointAt(0) === 61 ? 1 : 2;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitsetextheading() {\n    this.data.setextHeadingSlurpLineEnding = undefined;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onenterdata(token) {\n    const node = this.stack[this.stack.length - 1];\n    /** @type {Array<Nodes>} */\n    const siblings = node.children;\n    let tail = siblings[siblings.length - 1];\n    if (!tail || tail.type !== 'text') {\n      // Add a new text node.\n      tail = text();\n      tail.position = {\n        start: point(token.start),\n        // @ts-expect-error: we’ll add `end` later.\n        end: undefined\n      };\n      siblings.push(tail);\n    }\n    this.stack.push(tail);\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitdata(token) {\n    const tail = this.stack.pop();\n    tail.value += this.sliceSerialize(token);\n    tail.position.end = point(token.end);\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitlineending(token) {\n    const context = this.stack[this.stack.length - 1];\n    // If we’re at a hard break, include the line ending in there.\n    if (this.data.atHardBreak) {\n      const tail = context.children[context.children.length - 1];\n      tail.position.end = point(token.end);\n      this.data.atHardBreak = undefined;\n      return;\n    }\n    if (!this.data.setextHeadingSlurpLineEnding && config.canContainEols.includes(context.type)) {\n      onenterdata.call(this, token);\n      onexitdata.call(this, token);\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexithardbreak() {\n    this.data.atHardBreak = true;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexithtmlflow() {\n    const data = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.value = data;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexithtmltext() {\n    const data = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.value = data;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitcodetext() {\n    const data = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.value = data;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitlink() {\n    const node = this.stack[this.stack.length - 1];\n    // Note: there are also `identifier` and `label` fields on this link node!\n    // These are used / cleaned here.\n\n    // To do: clean.\n    if (this.data.inReference) {\n      /** @type {ReferenceType} */\n      const referenceType = this.data.referenceType || 'shortcut';\n      node.type += 'Reference';\n      // @ts-expect-error: mutate.\n      node.referenceType = referenceType;\n      // @ts-expect-error: mutate.\n      delete node.url;\n      delete node.title;\n    } else {\n      // @ts-expect-error: mutate.\n      delete node.identifier;\n      // @ts-expect-error: mutate.\n      delete node.label;\n    }\n    this.data.referenceType = undefined;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitimage() {\n    const node = this.stack[this.stack.length - 1];\n    // Note: there are also `identifier` and `label` fields on this link node!\n    // These are used / cleaned here.\n\n    // To do: clean.\n    if (this.data.inReference) {\n      /** @type {ReferenceType} */\n      const referenceType = this.data.referenceType || 'shortcut';\n      node.type += 'Reference';\n      // @ts-expect-error: mutate.\n      node.referenceType = referenceType;\n      // @ts-expect-error: mutate.\n      delete node.url;\n      delete node.title;\n    } else {\n      // @ts-expect-error: mutate.\n      delete node.identifier;\n      // @ts-expect-error: mutate.\n      delete node.label;\n    }\n    this.data.referenceType = undefined;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitlabeltext(token) {\n    const string = this.sliceSerialize(token);\n    const ancestor = this.stack[this.stack.length - 2];\n    // @ts-expect-error: stash this on the node, as it might become a reference\n    // later.\n    ancestor.label = decodeString(string);\n    // @ts-expect-error: same as above.\n    ancestor.identifier = normalizeIdentifier(string).toLowerCase();\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitlabel() {\n    const fragment = this.stack[this.stack.length - 1];\n    const value = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    // Assume a reference.\n    this.data.inReference = true;\n    if (node.type === 'link') {\n      /** @type {Array<PhrasingContent>} */\n      const children = fragment.children;\n      node.children = children;\n    } else {\n      node.alt = value;\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitresourcedestinationstring() {\n    const data = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.url = data;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitresourcetitlestring() {\n    const data = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.title = data;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitresource() {\n    this.data.inReference = undefined;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onenterreference() {\n    this.data.referenceType = 'collapsed';\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitreferencestring(token) {\n    const label = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    // @ts-expect-error: stash this on the node, as it might become a reference\n    // later.\n    node.label = label;\n    // @ts-expect-error: same as above.\n    node.identifier = normalizeIdentifier(this.sliceSerialize(token)).toLowerCase();\n    this.data.referenceType = 'full';\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitcharacterreferencemarker(token) {\n    this.data.characterReferenceType = token.type;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcharacterreferencevalue(token) {\n    const data = this.sliceSerialize(token);\n    const type = this.data.characterReferenceType;\n    /** @type {string} */\n    let value;\n    if (type) {\n      value = decodeNumericCharacterReference(data, type === \"characterReferenceMarkerNumeric\" ? 10 : 16);\n      this.data.characterReferenceType = undefined;\n    } else {\n      const result = decodeNamedCharacterReference(data);\n      value = result;\n    }\n    const tail = this.stack[this.stack.length - 1];\n    tail.value += value;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcharacterreference(token) {\n    const tail = this.stack.pop();\n    tail.position.end = point(token.end);\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitautolinkprotocol(token) {\n    onexitdata.call(this, token);\n    const node = this.stack[this.stack.length - 1];\n    node.url = this.sliceSerialize(token);\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitautolinkemail(token) {\n    onexitdata.call(this, token);\n    const node = this.stack[this.stack.length - 1];\n    node.url = 'mailto:' + this.sliceSerialize(token);\n  }\n\n  //\n  // Creaters.\n  //\n\n  /** @returns {Blockquote} */\n  function blockQuote() {\n    return {\n      type: 'blockquote',\n      children: []\n    };\n  }\n\n  /** @returns {Code} */\n  function codeFlow() {\n    return {\n      type: 'code',\n      lang: null,\n      meta: null,\n      value: ''\n    };\n  }\n\n  /** @returns {InlineCode} */\n  function codeText() {\n    return {\n      type: 'inlineCode',\n      value: ''\n    };\n  }\n\n  /** @returns {Definition} */\n  function definition() {\n    return {\n      type: 'definition',\n      identifier: '',\n      label: null,\n      title: null,\n      url: ''\n    };\n  }\n\n  /** @returns {Emphasis} */\n  function emphasis() {\n    return {\n      type: 'emphasis',\n      children: []\n    };\n  }\n\n  /** @returns {Heading} */\n  function heading() {\n    return {\n      type: 'heading',\n      // @ts-expect-error `depth` will be set later.\n      depth: 0,\n      children: []\n    };\n  }\n\n  /** @returns {Break} */\n  function hardBreak() {\n    return {\n      type: 'break'\n    };\n  }\n\n  /** @returns {Html} */\n  function html() {\n    return {\n      type: 'html',\n      value: ''\n    };\n  }\n\n  /** @returns {Image} */\n  function image() {\n    return {\n      type: 'image',\n      title: null,\n      url: '',\n      alt: null\n    };\n  }\n\n  /** @returns {Link} */\n  function link() {\n    return {\n      type: 'link',\n      title: null,\n      url: '',\n      children: []\n    };\n  }\n\n  /**\n   * @param {Token} token\n   * @returns {List}\n   */\n  function list(token) {\n    return {\n      type: 'list',\n      ordered: token.type === 'listOrdered',\n      start: null,\n      spread: token._spread,\n      children: []\n    };\n  }\n\n  /**\n   * @param {Token} token\n   * @returns {ListItem}\n   */\n  function listItem(token) {\n    return {\n      type: 'listItem',\n      spread: token._spread,\n      checked: null,\n      children: []\n    };\n  }\n\n  /** @returns {Paragraph} */\n  function paragraph() {\n    return {\n      type: 'paragraph',\n      children: []\n    };\n  }\n\n  /** @returns {Strong} */\n  function strong() {\n    return {\n      type: 'strong',\n      children: []\n    };\n  }\n\n  /** @returns {Text} */\n  function text() {\n    return {\n      type: 'text',\n      value: ''\n    };\n  }\n\n  /** @returns {ThematicBreak} */\n  function thematicBreak() {\n    return {\n      type: 'thematicBreak'\n    };\n  }\n}\n\n/**\n * Copy a point-like value.\n *\n * @param {Point} d\n *   Point-like value.\n * @returns {Point}\n *   unist point.\n */\nfunction point(d) {\n  return {\n    line: d.line,\n    column: d.column,\n    offset: d.offset\n  };\n}\n\n/**\n * @param {Config} combined\n * @param {Array<Array<Extension> | Extension>} extensions\n * @returns {undefined}\n */\nfunction configure(combined, extensions) {\n  let index = -1;\n  while (++index < extensions.length) {\n    const value = extensions[index];\n    if (Array.isArray(value)) {\n      configure(combined, value);\n    } else {\n      extension(combined, value);\n    }\n  }\n}\n\n/**\n * @param {Config} combined\n * @param {Extension} extension\n * @returns {undefined}\n */\nfunction extension(combined, extension) {\n  /** @type {keyof Extension} */\n  let key;\n  for (key in extension) {\n    if (own.call(extension, key)) {\n      switch (key) {\n        case 'canContainEols':\n          {\n            const right = extension[key];\n            if (right) {\n              combined[key].push(...right);\n            }\n            break;\n          }\n        case 'transforms':\n          {\n            const right = extension[key];\n            if (right) {\n              combined[key].push(...right);\n            }\n            break;\n          }\n        case 'enter':\n        case 'exit':\n          {\n            const right = extension[key];\n            if (right) {\n              Object.assign(combined[key], right);\n            }\n            break;\n          }\n        // No default\n      }\n    }\n  }\n}\n\n/** @type {OnEnterError} */\nfunction defaultOnError(left, right) {\n  if (left) {\n    throw new Error('Cannot close `' + left.type + '` (' + stringifyPosition({\n      start: left.start,\n      end: left.end\n    }) + '): a different token (`' + right.type + '`, ' + stringifyPosition({\n      start: right.start,\n      end: right.end\n    }) + ') is open');\n  } else {\n    throw new Error('Cannot close document, a token (`' + right.type + '`, ' + stringifyPosition({\n      start: right.start,\n      end: right.end\n    }) + ') is still open');\n  }\n}","/**\n * @typedef {import('mdast').Root} Root\n * @typedef {import('mdast-util-from-markdown').Options} FromMarkdownOptions\n * @typedef {import('unified').Parser<Root>} Parser\n * @typedef {import('unified').Processor<Root>} Processor\n */\n\n/**\n * @typedef {Omit<FromMarkdownOptions, 'extensions' | 'mdastExtensions'>} Options\n */\n\nimport {fromMarkdown} from 'mdast-util-from-markdown'\n\n/**\n * Aadd support for parsing from markdown.\n *\n * @param {Readonly<Options> | null | undefined} [options]\n *   Configuration (optional).\n * @returns {undefined}\n *   Nothing.\n */\nexport default function remarkParse(options) {\n  /** @type {Processor} */\n  // @ts-expect-error: TS in JSDoc generates wrong types if `this` is typed regularly.\n  const self = this\n\n  self.parser = parser\n\n  /**\n   * @type {Parser}\n   */\n  function parser(doc) {\n    return fromMarkdown(doc, {\n      ...self.data('settings'),\n      ...options,\n      // Note: these options are not in the readme.\n      // The goal is for them to be set by plugins on `data` instead of being\n      // passed by users.\n      extensions: self.data('micromarkExtensions') || [],\n      mdastExtensions: self.data('fromMarkdownExtensions') || []\n    })\n  }\n}\n","/**\n * @callback Handler\n *   Handle a value, with a certain ID field set to a certain value.\n *   The ID field is passed to `zwitch`, and it’s value is this function’s\n *   place on the `handlers` record.\n * @param {...any} parameters\n *   Arbitrary parameters passed to the zwitch.\n *   The first will be an object with a certain ID field set to a certain value.\n * @returns {any}\n *   Anything!\n */\n\n/**\n * @callback UnknownHandler\n *   Handle values that do have a certain ID field, but it’s set to a value\n *   that is not listed in the `handlers` record.\n * @param {unknown} value\n *   An object with a certain ID field set to an unknown value.\n * @param {...any} rest\n *   Arbitrary parameters passed to the zwitch.\n * @returns {any}\n *   Anything!\n */\n\n/**\n * @callback InvalidHandler\n *   Handle values that do not have a certain ID field.\n * @param {unknown} value\n *   Any unknown value.\n * @param {...any} rest\n *   Arbitrary parameters passed to the zwitch.\n * @returns {void|null|undefined|never}\n *   This should crash or return nothing.\n */\n\n/**\n * @template {InvalidHandler} [Invalid=InvalidHandler]\n * @template {UnknownHandler} [Unknown=UnknownHandler]\n * @template {Record<string, Handler>} [Handlers=Record<string, Handler>]\n * @typedef Options\n *   Configuration (required).\n * @property {Invalid} [invalid]\n *   Handler to use for invalid values.\n * @property {Unknown} [unknown]\n *   Handler to use for unknown values.\n * @property {Handlers} [handlers]\n *   Handlers to use.\n */\n\nconst own = {}.hasOwnProperty\n\n/**\n * Handle values based on a field.\n *\n * @template {InvalidHandler} [Invalid=InvalidHandler]\n * @template {UnknownHandler} [Unknown=UnknownHandler]\n * @template {Record<string, Handler>} [Handlers=Record<string, Handler>]\n * @param {string} key\n *   Field to switch on.\n * @param {Options<Invalid, Unknown, Handlers>} [options]\n *   Configuration (required).\n * @returns {{unknown: Unknown, invalid: Invalid, handlers: Handlers, (...parameters: Parameters<Handlers[keyof Handlers]>): ReturnType<Handlers[keyof Handlers]>, (...parameters: Parameters<Unknown>): ReturnType<Unknown>}}\n */\nexport function zwitch(key, options) {\n  const settings = options || {}\n\n  /**\n   * Handle one value.\n   *\n   * Based on the bound `key`, a respective handler will be called.\n   * If `value` is not an object, or doesn’t have a `key` property, the special\n   * “invalid” handler will be called.\n   * If `value` has an unknown `key`, the special “unknown” handler will be\n   * called.\n   *\n   * All arguments, and the context object, are passed through to the handler,\n   * and it’s result is returned.\n   *\n   * @this {unknown}\n   *   Any context object.\n   * @param {unknown} [value]\n   *   Any value.\n   * @param {...unknown} parameters\n   *   Arbitrary parameters passed to the zwitch.\n   * @property {Handler} invalid\n   *   Handle for values that do not have a certain ID field.\n   * @property {Handler} unknown\n   *   Handle values that do have a certain ID field, but it’s set to a value\n   *   that is not listed in the `handlers` record.\n   * @property {Handlers} handlers\n   *   Record of handlers.\n   * @returns {unknown}\n   *   Anything.\n   */\n  function one(value, ...parameters) {\n    /** @type {Handler|undefined} */\n    let fn = one.invalid\n    const handlers = one.handlers\n\n    if (value && own.call(value, key)) {\n      // @ts-expect-error Indexable.\n      const id = String(value[key])\n      // @ts-expect-error Indexable.\n      fn = own.call(handlers, id) ? handlers[id] : one.unknown\n    }\n\n    if (fn) {\n      return fn.call(this, value, ...parameters)\n    }\n  }\n\n  one.handlers = settings.handlers || {}\n  one.invalid = settings.invalid\n  one.unknown = settings.unknown\n\n  // @ts-expect-error: matches!\n  return one\n}\n","/**\n * @import {Options, State} from './types.js'\n */\n\nconst own = {}.hasOwnProperty\n\n/**\n * @param {State} base\n * @param {Options} extension\n * @returns {State}\n */\nexport function configure(base, extension) {\n  let index = -1\n  /** @type {keyof Options} */\n  let key\n\n  // First do subextensions.\n  if (extension.extensions) {\n    while (++index < extension.extensions.length) {\n      configure(base, extension.extensions[index])\n    }\n  }\n\n  for (key in extension) {\n    if (own.call(extension, key)) {\n      switch (key) {\n        case 'extensions': {\n          // Empty.\n          break\n        }\n\n        /* c8 ignore next 4 */\n        case 'unsafe': {\n          list(base[key], extension[key])\n          break\n        }\n\n        case 'join': {\n          list(base[key], extension[key])\n          break\n        }\n\n        case 'handlers': {\n          map(base[key], extension[key])\n          break\n        }\n\n        default: {\n          // @ts-expect-error: matches.\n          base.options[key] = extension[key]\n        }\n      }\n    }\n  }\n\n  return base\n}\n\n/**\n * @template T\n * @param {Array<T>} left\n * @param {Array<T> | null | undefined} right\n */\nfunction list(left, right) {\n  if (right) {\n    left.push(...right)\n  }\n}\n\n/**\n * @template T\n * @param {Record<string, T>} left\n * @param {Record<string, T> | null | undefined} right\n */\nfunction map(left, right) {\n  if (right) {\n    Object.assign(left, right)\n  }\n}\n","/**\n * @import {Blockquote, Parents} from 'mdast'\n * @import {Info, Map, State} from 'mdast-util-to-markdown'\n */\n\n/**\n * @param {Blockquote} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function blockquote(node, _, state, info) {\n  const exit = state.enter('blockquote')\n  const tracker = state.createTracker(info)\n  tracker.move('> ')\n  tracker.shift(2)\n  const value = state.indentLines(\n    state.containerFlow(node, tracker.current()),\n    map\n  )\n  exit()\n  return value\n}\n\n/** @type {Map} */\nfunction map(line, _, blank) {\n  return '>' + (blank ? '' : ' ') + line\n}\n","/**\n * @import {ConstructName, Unsafe} from 'mdast-util-to-markdown'\n */\n\n/**\n * @param {Array<ConstructName>} stack\n * @param {Unsafe} pattern\n * @returns {boolean}\n */\nexport function patternInScope(stack, pattern) {\n  return (\n    listInScope(stack, pattern.inConstruct, true) &&\n    !listInScope(stack, pattern.notInConstruct, false)\n  )\n}\n\n/**\n * @param {Array<ConstructName>} stack\n * @param {Unsafe['inConstruct']} list\n * @param {boolean} none\n * @returns {boolean}\n */\nfunction listInScope(stack, list, none) {\n  if (typeof list === 'string') {\n    list = [list]\n  }\n\n  if (!list || list.length === 0) {\n    return none\n  }\n\n  let index = -1\n\n  while (++index < list.length) {\n    if (stack.includes(list[index])) {\n      return true\n    }\n  }\n\n  return false\n}\n","/**\n * @import {Break, Parents} from 'mdast'\n * @import {Info, State} from 'mdast-util-to-markdown'\n */\n\nimport {patternInScope} from '../util/pattern-in-scope.js'\n\n/**\n * @param {Break} _\n * @param {Parents | undefined} _1\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function hardBreak(_, _1, state, info) {\n  let index = -1\n\n  while (++index < state.unsafe.length) {\n    // If we can’t put eols in this construct (setext headings, tables), use a\n    // space instead.\n    if (\n      state.unsafe[index].character === '\\n' &&\n      patternInScope(state.stack, state.unsafe[index])\n    ) {\n      return /[ \\t]/.test(info.before) ? '' : ' '\n    }\n  }\n\n  return '\\\\\\n'\n}\n","/**\n * Get the count of the longest repeating streak of `substring` in `value`.\n *\n * @param {string} value\n *   Content to search in.\n * @param {string} substring\n *   Substring to look for, typically one character.\n * @returns {number}\n *   Count of most frequent adjacent `substring`s in `value`.\n */\nexport function longestStreak(value, substring) {\n  const source = String(value)\n  let index = source.indexOf(substring)\n  let expected = index\n  let count = 0\n  let max = 0\n\n  if (typeof substring !== 'string') {\n    throw new TypeError('Expected substring')\n  }\n\n  while (index !== -1) {\n    if (index === expected) {\n      if (++count > max) {\n        max = count\n      }\n    } else {\n      count = 1\n    }\n\n    expected = index + substring.length\n    index = source.indexOf(substring, expected)\n  }\n\n  return max\n}\n","/**\n * @import {State} from 'mdast-util-to-markdown'\n * @import {Code} from 'mdast'\n */\n\n/**\n * @param {Code} node\n * @param {State} state\n * @returns {boolean}\n */\nexport function formatCodeAsIndented(node, state) {\n  return Boolean(\n    state.options.fences === false &&\n      node.value &&\n      // If there’s no info…\n      !node.lang &&\n      // And there’s a non-whitespace character…\n      /[^ \\r\\n]/.test(node.value) &&\n      // And the value doesn’t start or end in a blank…\n      !/^[\\t ]*(?:[\\r\\n]|$)|(?:^|[\\r\\n])[\\t ]*$/.test(node.value)\n  )\n}\n","/**\n * @import {Options, State} from 'mdast-util-to-markdown'\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['fence'], null | undefined>}\n */\nexport function checkFence(state) {\n  const marker = state.options.fence || '`'\n\n  if (marker !== '`' && marker !== '~') {\n    throw new Error(\n      'Cannot serialize code with `' +\n        marker +\n        '` for `options.fence`, expected `` ` `` or `~`'\n    )\n  }\n\n  return marker\n}\n","/**\n * @import {Info, Map, State} from 'mdast-util-to-markdown'\n * @import {Code, Parents} from 'mdast'\n */\n\nimport {longestStreak} from 'longest-streak'\nimport {formatCodeAsIndented} from '../util/format-code-as-indented.js'\nimport {checkFence} from '../util/check-fence.js'\n\n/**\n * @param {Code} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function code(node, _, state, info) {\n  const marker = checkFence(state)\n  const raw = node.value || ''\n  const suffix = marker === '`' ? 'GraveAccent' : 'Tilde'\n\n  if (formatCodeAsIndented(node, state)) {\n    const exit = state.enter('codeIndented')\n    const value = state.indentLines(raw, map)\n    exit()\n    return value\n  }\n\n  const tracker = state.createTracker(info)\n  const sequence = marker.repeat(Math.max(longestStreak(raw, marker) + 1, 3))\n  const exit = state.enter('codeFenced')\n  let value = tracker.move(sequence)\n\n  if (node.lang) {\n    const subexit = state.enter(`codeFencedLang${suffix}`)\n    value += tracker.move(\n      state.safe(node.lang, {\n        before: value,\n        after: ' ',\n        encode: ['`'],\n        ...tracker.current()\n      })\n    )\n    subexit()\n  }\n\n  if (node.lang && node.meta) {\n    const subexit = state.enter(`codeFencedMeta${suffix}`)\n    value += tracker.move(' ')\n    value += tracker.move(\n      state.safe(node.meta, {\n        before: value,\n        after: '\\n',\n        encode: ['`'],\n        ...tracker.current()\n      })\n    )\n    subexit()\n  }\n\n  value += tracker.move('\\n')\n\n  if (raw) {\n    value += tracker.move(raw + '\\n')\n  }\n\n  value += tracker.move(sequence)\n  exit()\n  return value\n}\n\n/** @type {Map} */\nfunction map(line, _, blank) {\n  return (blank ? '' : '    ') + line\n}\n","/**\n * @import {Options, State} from 'mdast-util-to-markdown'\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['quote'], null | undefined>}\n */\nexport function checkQuote(state) {\n  const marker = state.options.quote || '\"'\n\n  if (marker !== '\"' && marker !== \"'\") {\n    throw new Error(\n      'Cannot serialize title with `' +\n        marker +\n        '` for `options.quote`, expected `\"`, or `\\'`'\n    )\n  }\n\n  return marker\n}\n","/**\n * @import {Info, State} from 'mdast-util-to-markdown'\n * @import {Definition, Parents} from 'mdast'\n */\n\nimport {checkQuote} from '../util/check-quote.js'\n\n/**\n * @param {Definition} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function definition(node, _, state, info) {\n  const quote = checkQuote(state)\n  const suffix = quote === '\"' ? 'Quote' : 'Apostrophe'\n  const exit = state.enter('definition')\n  let subexit = state.enter('label')\n  const tracker = state.createTracker(info)\n  let value = tracker.move('[')\n  value += tracker.move(\n    state.safe(state.associationId(node), {\n      before: value,\n      after: ']',\n      ...tracker.current()\n    })\n  )\n  value += tracker.move(']: ')\n\n  subexit()\n\n  if (\n    // If there’s no url, or…\n    !node.url ||\n    // If there are control characters or whitespace.\n    /[\\0- \\u007F]/.test(node.url)\n  ) {\n    subexit = state.enter('destinationLiteral')\n    value += tracker.move('<')\n    value += tracker.move(\n      state.safe(node.url, {before: value, after: '>', ...tracker.current()})\n    )\n    value += tracker.move('>')\n  } else {\n    // No whitespace, raw is prettier.\n    subexit = state.enter('destinationRaw')\n    value += tracker.move(\n      state.safe(node.url, {\n        before: value,\n        after: node.title ? ' ' : '\\n',\n        ...tracker.current()\n      })\n    )\n  }\n\n  subexit()\n\n  if (node.title) {\n    subexit = state.enter(`title${suffix}`)\n    value += tracker.move(' ' + quote)\n    value += tracker.move(\n      state.safe(node.title, {\n        before: value,\n        after: quote,\n        ...tracker.current()\n      })\n    )\n    value += tracker.move(quote)\n    subexit()\n  }\n\n  exit()\n\n  return value\n}\n","/**\n * @import {Options, State} from 'mdast-util-to-markdown'\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['emphasis'], null | undefined>}\n */\nexport function checkEmphasis(state) {\n  const marker = state.options.emphasis || '*'\n\n  if (marker !== '*' && marker !== '_') {\n    throw new Error(\n      'Cannot serialize emphasis with `' +\n        marker +\n        '` for `options.emphasis`, expected `*`, or `_`'\n    )\n  }\n\n  return marker\n}\n","/**\n * Encode a code point as a character reference.\n *\n * @param {number} code\n *   Code point to encode.\n * @returns {string}\n *   Encoded character reference.\n */\nexport function encodeCharacterReference(code) {\n  return '&#x' + code.toString(16).toUpperCase() + ';'\n}\n","/**\n * @import {EncodeSides} from '../types.js'\n */\n\nimport {classifyCharacter} from 'micromark-util-classify-character'\n\n/**\n * Check whether to encode (as a character reference) the characters\n * surrounding an attention run.\n *\n * Which characters are around an attention run influence whether it works or\n * not.\n *\n * See <https://github.com/orgs/syntax-tree/discussions/60> for more info.\n * See this markdown in a particular renderer to see what works:\n *\n * ```markdown\n * |                         | A (letter inside) | B (punctuation inside) | C (whitespace inside) | D (nothing inside) |\n * | ----------------------- | ----------------- | ---------------------- | --------------------- | ------------------ |\n * | 1 (letter outside)      | x*y*z             | x*.*z                  | x* *z                 | x**z               |\n * | 2 (punctuation outside) | .*y*.             | .*.*.                  | .* *.                 | .**.               |\n * | 3 (whitespace outside)  | x *y* z           | x *.* z                | x * * z               | x ** z             |\n * | 4 (nothing outside)     | *x*               | *.*                    | * *                   | **                 |\n * ```\n *\n * @param {number} outside\n *   Code point on the outer side of the run.\n * @param {number} inside\n *   Code point on the inner side of the run.\n * @param {'*' | '_'} marker\n *   Marker of the run.\n *   Underscores are handled more strictly (they form less often) than\n *   asterisks.\n * @returns {EncodeSides}\n *   Whether to encode characters.\n */\n// Important: punctuation must never be encoded.\n// Punctuation is solely used by markdown constructs.\n// And by encoding itself.\n// Encoding them will break constructs or double encode things.\nexport function encodeInfo(outside, inside, marker) {\n  const outsideKind = classifyCharacter(outside)\n  const insideKind = classifyCharacter(inside)\n\n  // Letter outside:\n  if (outsideKind === undefined) {\n    return insideKind === undefined\n      ? // Letter inside:\n        // we have to encode *both* letters for `_` as it is looser.\n        // it already forms for `*` (and GFMs `~`).\n        marker === '_'\n        ? {inside: true, outside: true}\n        : {inside: false, outside: false}\n      : insideKind === 1\n        ? // Whitespace inside: encode both (letter, whitespace).\n          {inside: true, outside: true}\n        : // Punctuation inside: encode outer (letter)\n          {inside: false, outside: true}\n  }\n\n  // Whitespace outside:\n  if (outsideKind === 1) {\n    return insideKind === undefined\n      ? // Letter inside: already forms.\n        {inside: false, outside: false}\n      : insideKind === 1\n        ? // Whitespace inside: encode both (whitespace).\n          {inside: true, outside: true}\n        : // Punctuation inside: already forms.\n          {inside: false, outside: false}\n  }\n\n  // Punctuation outside:\n  return insideKind === undefined\n    ? // Letter inside: already forms.\n      {inside: false, outside: false}\n    : insideKind === 1\n      ? // Whitespace inside: encode inner (whitespace).\n        {inside: true, outside: false}\n      : // Punctuation inside: already forms.\n        {inside: false, outside: false}\n}\n","/**\n * @import {Info, State} from 'mdast-util-to-markdown'\n * @import {Emphasis, Parents} from 'mdast'\n */\n\nimport {checkEmphasis} from '../util/check-emphasis.js'\nimport {encodeCharacterReference} from '../util/encode-character-reference.js'\nimport {encodeInfo} from '../util/encode-info.js'\n\nemphasis.peek = emphasisPeek\n\n/**\n * @param {Emphasis} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function emphasis(node, _, state, info) {\n  const marker = checkEmphasis(state)\n  const exit = state.enter('emphasis')\n  const tracker = state.createTracker(info)\n  const before = tracker.move(marker)\n\n  let between = tracker.move(\n    state.containerPhrasing(node, {\n      after: marker,\n      before,\n      ...tracker.current()\n    })\n  )\n  const betweenHead = between.charCodeAt(0)\n  const open = encodeInfo(\n    info.before.charCodeAt(info.before.length - 1),\n    betweenHead,\n    marker\n  )\n\n  if (open.inside) {\n    between = encodeCharacterReference(betweenHead) + between.slice(1)\n  }\n\n  const betweenTail = between.charCodeAt(between.length - 1)\n  const close = encodeInfo(info.after.charCodeAt(0), betweenTail, marker)\n\n  if (close.inside) {\n    between = between.slice(0, -1) + encodeCharacterReference(betweenTail)\n  }\n\n  const after = tracker.move(marker)\n\n  exit()\n\n  state.attentionEncodeSurroundingInfo = {\n    after: close.outside,\n    before: open.outside\n  }\n  return before + between + after\n}\n\n/**\n * @param {Emphasis} _\n * @param {Parents | undefined} _1\n * @param {State} state\n * @returns {string}\n */\nfunction emphasisPeek(_, _1, state) {\n  return state.options.emphasis || '*'\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Parent} Parent\n */\n\n/**\n * @template Fn\n * @template Fallback\n * @typedef {Fn extends (value: any) => value is infer Thing ? Thing : Fallback} Predicate\n */\n\n/**\n * @callback Check\n *   Check that an arbitrary value is a node.\n * @param {unknown} this\n *   The given context.\n * @param {unknown} [node]\n *   Anything (typically a node).\n * @param {number | null | undefined} [index]\n *   The node’s position in its parent.\n * @param {Parent | null | undefined} [parent]\n *   The node’s parent.\n * @returns {boolean}\n *   Whether this is a node and passes a test.\n *\n * @typedef {Record<string, unknown> | Node} Props\n *   Object to check for equivalence.\n *\n *   Note: `Node` is included as it is common but is not indexable.\n *\n * @typedef {Array<Props | TestFunction | string> | Props | TestFunction | string | null | undefined} Test\n *   Check for an arbitrary node.\n *\n * @callback TestFunction\n *   Check if a node passes a test.\n * @param {unknown} this\n *   The given context.\n * @param {Node} node\n *   A node.\n * @param {number | undefined} [index]\n *   The node’s position in its parent.\n * @param {Parent | undefined} [parent]\n *   The node’s parent.\n * @returns {boolean | undefined | void}\n *   Whether this node passes the test.\n *\n *   Note: `void` is included until TS sees no return as `undefined`.\n */\n\n/**\n * Check if `node` is a `Node` and whether it passes the given test.\n *\n * @param {unknown} node\n *   Thing to check, typically `Node`.\n * @param {Test} test\n *   A check for a specific node.\n * @param {number | null | undefined} index\n *   The node’s position in its parent.\n * @param {Parent | null | undefined} parent\n *   The node’s parent.\n * @param {unknown} context\n *   Context object (`this`) to pass to `test` functions.\n * @returns {boolean}\n *   Whether `node` is a node and passes a test.\n */\nexport const is =\n  // Note: overloads in JSDoc can’t yet use different `@template`s.\n  /**\n   * @type {(\n   *   (<Condition extends string>(node: unknown, test: Condition, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & {type: Condition}) &\n   *   (<Condition extends Props>(node: unknown, test: Condition, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Condition) &\n   *   (<Condition extends TestFunction>(node: unknown, test: Condition, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Predicate<Condition, Node>) &\n   *   ((node?: null | undefined) => false) &\n   *   ((node: unknown, test?: null | undefined, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node) &\n   *   ((node: unknown, test?: Test, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => boolean)\n   * )}\n   */\n  (\n    /**\n     * @param {unknown} [node]\n     * @param {Test} [test]\n     * @param {number | null | undefined} [index]\n     * @param {Parent | null | undefined} [parent]\n     * @param {unknown} [context]\n     * @returns {boolean}\n     */\n    // eslint-disable-next-line max-params\n    function (node, test, index, parent, context) {\n      const check = convert(test)\n\n      if (\n        index !== undefined &&\n        index !== null &&\n        (typeof index !== 'number' ||\n          index < 0 ||\n          index === Number.POSITIVE_INFINITY)\n      ) {\n        throw new Error('Expected positive finite index')\n      }\n\n      if (\n        parent !== undefined &&\n        parent !== null &&\n        (!is(parent) || !parent.children)\n      ) {\n        throw new Error('Expected parent node')\n      }\n\n      if (\n        (parent === undefined || parent === null) !==\n        (index === undefined || index === null)\n      ) {\n        throw new Error('Expected both parent and index')\n      }\n\n      return looksLikeANode(node)\n        ? check.call(context, node, index, parent)\n        : false\n    }\n  )\n\n/**\n * Generate an assertion from a test.\n *\n * Useful if you’re going to test many nodes, for example when creating a\n * utility where something else passes a compatible test.\n *\n * The created function is a bit faster because it expects valid input only:\n * a `node`, `index`, and `parent`.\n *\n * @param {Test} test\n *   *   when nullish, checks if `node` is a `Node`.\n *   *   when `string`, works like passing `(node) => node.type === test`.\n *   *   when `function` checks if function passed the node is true.\n *   *   when `object`, checks that all keys in test are in node, and that they have (strictly) equal values.\n *   *   when `array`, checks if any one of the subtests pass.\n * @returns {Check}\n *   An assertion.\n */\nexport const convert =\n  // Note: overloads in JSDoc can’t yet use different `@template`s.\n  /**\n   * @type {(\n   *   (<Condition extends string>(test: Condition) => (node: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & {type: Condition}) &\n   *   (<Condition extends Props>(test: Condition) => (node: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Condition) &\n   *   (<Condition extends TestFunction>(test: Condition) => (node: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Predicate<Condition, Node>) &\n   *   ((test?: null | undefined) => (node?: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node) &\n   *   ((test?: Test) => Check)\n   * )}\n   */\n  (\n    /**\n     * @param {Test} [test]\n     * @returns {Check}\n     */\n    function (test) {\n      if (test === null || test === undefined) {\n        return ok\n      }\n\n      if (typeof test === 'function') {\n        return castFactory(test)\n      }\n\n      if (typeof test === 'object') {\n        return Array.isArray(test) ? anyFactory(test) : propsFactory(test)\n      }\n\n      if (typeof test === 'string') {\n        return typeFactory(test)\n      }\n\n      throw new Error('Expected function, string, or object as test')\n    }\n  )\n\n/**\n * @param {Array<Props | TestFunction | string>} tests\n * @returns {Check}\n */\nfunction anyFactory(tests) {\n  /** @type {Array<Check>} */\n  const checks = []\n  let index = -1\n\n  while (++index < tests.length) {\n    checks[index] = convert(tests[index])\n  }\n\n  return castFactory(any)\n\n  /**\n   * @this {unknown}\n   * @type {TestFunction}\n   */\n  function any(...parameters) {\n    let index = -1\n\n    while (++index < checks.length) {\n      if (checks[index].apply(this, parameters)) return true\n    }\n\n    return false\n  }\n}\n\n/**\n * Turn an object into a test for a node with a certain fields.\n *\n * @param {Props} check\n * @returns {Check}\n */\nfunction propsFactory(check) {\n  const checkAsRecord = /** @type {Record<string, unknown>} */ (check)\n\n  return castFactory(all)\n\n  /**\n   * @param {Node} node\n   * @returns {boolean}\n   */\n  function all(node) {\n    const nodeAsRecord = /** @type {Record<string, unknown>} */ (\n      /** @type {unknown} */ (node)\n    )\n\n    /** @type {string} */\n    let key\n\n    for (key in check) {\n      if (nodeAsRecord[key] !== checkAsRecord[key]) return false\n    }\n\n    return true\n  }\n}\n\n/**\n * Turn a string into a test for a node with a certain type.\n *\n * @param {string} check\n * @returns {Check}\n */\nfunction typeFactory(check) {\n  return castFactory(type)\n\n  /**\n   * @param {Node} node\n   */\n  function type(node) {\n    return node && node.type === check\n  }\n}\n\n/**\n * Turn a custom test into a test for a node that passes that test.\n *\n * @param {TestFunction} testFunction\n * @returns {Check}\n */\nfunction castFactory(testFunction) {\n  return check\n\n  /**\n   * @this {unknown}\n   * @type {Check}\n   */\n  function check(value, index, parent) {\n    return Boolean(\n      looksLikeANode(value) &&\n        testFunction.call(\n          this,\n          value,\n          typeof index === 'number' ? index : undefined,\n          parent || undefined\n        )\n    )\n  }\n}\n\nfunction ok() {\n  return true\n}\n\n/**\n * @param {unknown} value\n * @returns {value is Node}\n */\nfunction looksLikeANode(value) {\n  return value !== null && typeof value === 'object' && 'type' in value\n}\n","/**\n * @param {string} d\n * @returns {string}\n */\nexport function color(d) {\n  return '\\u001B[33m' + d + '\\u001B[39m'\n}\n","/**\n * @typedef {import('unist').Node} UnistNode\n * @typedef {import('unist').Parent} UnistParent\n */\n\n/**\n * @typedef {Exclude<import('unist-util-is').Test, undefined> | undefined} Test\n *   Test from `unist-util-is`.\n *\n *   Note: we have remove and add `undefined`, because otherwise when generating\n *   automatic `.d.ts` files, TS tries to flatten paths from a local perspective,\n *   which doesn’t work when publishing on npm.\n */\n\n/**\n * @typedef {(\n *   Fn extends (value: any) => value is infer Thing\n *   ? Thing\n *   : Fallback\n * )} Predicate\n *   Get the value of a type guard `Fn`.\n * @template Fn\n *   Value; typically function that is a type guard (such as `(x): x is Y`).\n * @template Fallback\n *   Value to yield if `Fn` is not a type guard.\n */\n\n/**\n * @typedef {(\n *   Check extends null | undefined // No test.\n *   ? Value\n *   : Value extends {type: Check} // String (type) test.\n *   ? Value\n *   : Value extends Check // Partial test.\n *   ? Value\n *   : Check extends Function // Function test.\n *   ? Predicate<Check, Value> extends Value\n *     ? Predicate<Check, Value>\n *     : never\n *   : never // Some other test?\n * )} MatchesOne\n *   Check whether a node matches a primitive check in the type system.\n * @template Value\n *   Value; typically unist `Node`.\n * @template Check\n *   Value; typically `unist-util-is`-compatible test, but not arrays.\n */\n\n/**\n * @typedef {(\n *   Check extends Array<any>\n *   ? MatchesOne<Value, Check[keyof Check]>\n *   : MatchesOne<Value, Check>\n * )} Matches\n *   Check whether a node matches a check in the type system.\n * @template Value\n *   Value; typically unist `Node`.\n * @template Check\n *   Value; typically `unist-util-is`-compatible test.\n */\n\n/**\n * @typedef {0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10} Uint\n *   Number; capped reasonably.\n */\n\n/**\n * @typedef {I extends 0 ? 1 : I extends 1 ? 2 : I extends 2 ? 3 : I extends 3 ? 4 : I extends 4 ? 5 : I extends 5 ? 6 : I extends 6 ? 7 : I extends 7 ? 8 : I extends 8 ? 9 : 10} Increment\n *   Increment a number in the type system.\n * @template {Uint} [I=0]\n *   Index.\n */\n\n/**\n * @typedef {(\n *   Node extends UnistParent\n *   ? Node extends {children: Array<infer Children>}\n *     ? Child extends Children ? Node : never\n *     : never\n *   : never\n * )} InternalParent\n *   Collect nodes that can be parents of `Child`.\n * @template {UnistNode} Node\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n */\n\n/**\n * @typedef {InternalParent<InclusiveDescendant<Tree>, Child>} Parent\n *   Collect nodes in `Tree` that can be parents of `Child`.\n * @template {UnistNode} Tree\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n */\n\n/**\n * @typedef {(\n *   Depth extends Max\n *   ? never\n *   :\n *     | InternalParent<Node, Child>\n *     | InternalAncestor<Node, InternalParent<Node, Child>, Max, Increment<Depth>>\n * )} InternalAncestor\n *   Collect nodes in `Tree` that can be ancestors of `Child`.\n * @template {UnistNode} Node\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n * @template {Uint} [Max=10]\n *   Max; searches up to this depth.\n * @template {Uint} [Depth=0]\n *   Current depth.\n */\n\n/**\n * @typedef {InternalAncestor<InclusiveDescendant<Tree>, Child>} Ancestor\n *   Collect nodes in `Tree` that can be ancestors of `Child`.\n * @template {UnistNode} Tree\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n */\n\n/**\n * @typedef {(\n *   Tree extends UnistParent\n *     ? Depth extends Max\n *       ? Tree\n *       : Tree | InclusiveDescendant<Tree['children'][number], Max, Increment<Depth>>\n *     : Tree\n * )} InclusiveDescendant\n *   Collect all (inclusive) descendants of `Tree`.\n *\n *   > 👉 **Note**: for performance reasons, this seems to be the fastest way to\n *   > recurse without actually running into an infinite loop, which the\n *   > previous version did.\n *   >\n *   > Practically, a max of `2` is typically enough assuming a `Root` is\n *   > passed, but it doesn’t improve performance.\n *   > It gets higher with `List > ListItem > Table > TableRow > TableCell`.\n *   > Using up to `10` doesn’t hurt or help either.\n * @template {UnistNode} Tree\n *   Tree type.\n * @template {Uint} [Max=10]\n *   Max; searches up to this depth.\n * @template {Uint} [Depth=0]\n *   Current depth.\n */\n\n/**\n * @typedef {'skip' | boolean} Action\n *   Union of the action types.\n *\n * @typedef {number} Index\n *   Move to the sibling at `index` next (after node itself is completely\n *   traversed).\n *\n *   Useful if mutating the tree, such as removing the node the visitor is\n *   currently on, or any of its previous siblings.\n *   Results less than 0 or greater than or equal to `children.length` stop\n *   traversing the parent.\n *\n * @typedef {[(Action | null | undefined | void)?, (Index | null | undefined)?]} ActionTuple\n *   List with one or two values, the first an action, the second an index.\n *\n * @typedef {Action | ActionTuple | Index | null | undefined | void} VisitorResult\n *   Any value that can be returned from a visitor.\n */\n\n/**\n * @callback Visitor\n *   Handle a node (matching `test`, if given).\n *\n *   Visitors are free to transform `node`.\n *   They can also transform the parent of node (the last of `ancestors`).\n *\n *   Replacing `node` itself, if `SKIP` is not returned, still causes its\n *   descendants to be walked (which is a bug).\n *\n *   When adding or removing previous siblings of `node` (or next siblings, in\n *   case of reverse), the `Visitor` should return a new `Index` to specify the\n *   sibling to traverse after `node` is traversed.\n *   Adding or removing next siblings of `node` (or previous siblings, in case\n *   of reverse) is handled as expected without needing to return a new `Index`.\n *\n *   Removing the children property of an ancestor still results in them being\n *   traversed.\n * @param {Visited} node\n *   Found node.\n * @param {Array<VisitedParents>} ancestors\n *   Ancestors of `node`.\n * @returns {VisitorResult}\n *   What to do next.\n *\n *   An `Index` is treated as a tuple of `[CONTINUE, Index]`.\n *   An `Action` is treated as a tuple of `[Action]`.\n *\n *   Passing a tuple back only makes sense if the `Action` is `SKIP`.\n *   When the `Action` is `EXIT`, that action can be returned.\n *   When the `Action` is `CONTINUE`, `Index` can be returned.\n * @template {UnistNode} [Visited=UnistNode]\n *   Visited node type.\n * @template {UnistParent} [VisitedParents=UnistParent]\n *   Ancestor type.\n */\n\n/**\n * @typedef {Visitor<Matches<InclusiveDescendant<Tree>, Check>, Ancestor<Tree, Matches<InclusiveDescendant<Tree>, Check>>>} BuildVisitor\n *   Build a typed `Visitor` function from a tree and a test.\n *\n *   It will infer which values are passed as `node` and which as `parents`.\n * @template {UnistNode} [Tree=UnistNode]\n *   Tree type.\n * @template {Test} [Check=Test]\n *   Test type.\n */\n\nimport {convert} from 'unist-util-is'\nimport {color} from 'unist-util-visit-parents/do-not-use-color'\n\n/** @type {Readonly<ActionTuple>} */\nconst empty = []\n\n/**\n * Continue traversing as normal.\n */\nexport const CONTINUE = true\n\n/**\n * Stop traversing immediately.\n */\nexport const EXIT = false\n\n/**\n * Do not traverse this node’s children.\n */\nexport const SKIP = 'skip'\n\n/**\n * Visit nodes, with ancestral information.\n *\n * This algorithm performs *depth-first* *tree traversal* in *preorder*\n * (**NLR**) or if `reverse` is given, in *reverse preorder* (**NRL**).\n *\n * You can choose for which nodes `visitor` is called by passing a `test`.\n * For complex tests, you should test yourself in `visitor`, as it will be\n * faster and will have improved type information.\n *\n * Walking the tree is an intensive task.\n * Make use of the return values of the visitor when possible.\n * Instead of walking a tree multiple times, walk it once, use `unist-util-is`\n * to check if a node matches, and then perform different operations.\n *\n * You can change the tree.\n * See `Visitor` for more info.\n *\n * @overload\n * @param {Tree} tree\n * @param {Check} check\n * @param {BuildVisitor<Tree, Check>} visitor\n * @param {boolean | null | undefined} [reverse]\n * @returns {undefined}\n *\n * @overload\n * @param {Tree} tree\n * @param {BuildVisitor<Tree>} visitor\n * @param {boolean | null | undefined} [reverse]\n * @returns {undefined}\n *\n * @param {UnistNode} tree\n *   Tree to traverse.\n * @param {Visitor | Test} test\n *   `unist-util-is`-compatible test\n * @param {Visitor | boolean | null | undefined} [visitor]\n *   Handle each node.\n * @param {boolean | null | undefined} [reverse]\n *   Traverse in reverse preorder (NRL) instead of the default preorder (NLR).\n * @returns {undefined}\n *   Nothing.\n *\n * @template {UnistNode} Tree\n *   Node type.\n * @template {Test} Check\n *   `unist-util-is`-compatible test.\n */\nexport function visitParents(tree, test, visitor, reverse) {\n  /** @type {Test} */\n  let check\n\n  if (typeof test === 'function' && typeof visitor !== 'function') {\n    reverse = visitor\n    // @ts-expect-error no visitor given, so `visitor` is test.\n    visitor = test\n  } else {\n    // @ts-expect-error visitor given, so `test` isn’t a visitor.\n    check = test\n  }\n\n  const is = convert(check)\n  const step = reverse ? -1 : 1\n\n  factory(tree, undefined, [])()\n\n  /**\n   * @param {UnistNode} node\n   * @param {number | undefined} index\n   * @param {Array<UnistParent>} parents\n   */\n  function factory(node, index, parents) {\n    const value = /** @type {Record<string, unknown>} */ (\n      node && typeof node === 'object' ? node : {}\n    )\n\n    if (typeof value.type === 'string') {\n      const name =\n        // `hast`\n        typeof value.tagName === 'string'\n          ? value.tagName\n          : // `xast`\n          typeof value.name === 'string'\n          ? value.name\n          : undefined\n\n      Object.defineProperty(visit, 'name', {\n        value:\n          'node (' + color(node.type + (name ? '<' + name + '>' : '')) + ')'\n      })\n    }\n\n    return visit\n\n    function visit() {\n      /** @type {Readonly<ActionTuple>} */\n      let result = empty\n      /** @type {Readonly<ActionTuple>} */\n      let subresult\n      /** @type {number} */\n      let offset\n      /** @type {Array<UnistParent>} */\n      let grandparents\n\n      if (!test || is(node, index, parents[parents.length - 1] || undefined)) {\n        // @ts-expect-error: `visitor` is now a visitor.\n        result = toResult(visitor(node, parents))\n\n        if (result[0] === EXIT) {\n          return result\n        }\n      }\n\n      if ('children' in node && node.children) {\n        const nodeAsParent = /** @type {UnistParent} */ (node)\n\n        if (nodeAsParent.children && result[0] !== SKIP) {\n          offset = (reverse ? nodeAsParent.children.length : -1) + step\n          grandparents = parents.concat(nodeAsParent)\n\n          while (offset > -1 && offset < nodeAsParent.children.length) {\n            const child = nodeAsParent.children[offset]\n\n            subresult = factory(child, offset, grandparents)()\n\n            if (subresult[0] === EXIT) {\n              return subresult\n            }\n\n            offset =\n              typeof subresult[1] === 'number' ? subresult[1] : offset + step\n          }\n        }\n      }\n\n      return result\n    }\n  }\n}\n\n/**\n * Turn a return value into a clean result.\n *\n * @param {VisitorResult} value\n *   Valid return values from visitors.\n * @returns {Readonly<ActionTuple>}\n *   Clean result.\n */\nfunction toResult(value) {\n  if (Array.isArray(value)) {\n    return value\n  }\n\n  if (typeof value === 'number') {\n    return [CONTINUE, value]\n  }\n\n  return value === null || value === undefined ? empty : [value]\n}\n","/**\n * @typedef {import('unist').Node} UnistNode\n * @typedef {import('unist').Parent} UnistParent\n * @typedef {import('unist-util-visit-parents').VisitorResult} VisitorResult\n */\n\n/**\n * @typedef {Exclude<import('unist-util-is').Test, undefined> | undefined} Test\n *   Test from `unist-util-is`.\n *\n *   Note: we have remove and add `undefined`, because otherwise when generating\n *   automatic `.d.ts` files, TS tries to flatten paths from a local perspective,\n *   which doesn’t work when publishing on npm.\n */\n\n// To do: use types from `unist-util-visit-parents` when it’s released.\n\n/**\n * @typedef {(\n *   Fn extends (value: any) => value is infer Thing\n *   ? Thing\n *   : Fallback\n * )} Predicate\n *   Get the value of a type guard `Fn`.\n * @template Fn\n *   Value; typically function that is a type guard (such as `(x): x is Y`).\n * @template Fallback\n *   Value to yield if `Fn` is not a type guard.\n */\n\n/**\n * @typedef {(\n *   Check extends null | undefined // No test.\n *   ? Value\n *   : Value extends {type: Check} // String (type) test.\n *   ? Value\n *   : Value extends Check // Partial test.\n *   ? Value\n *   : Check extends Function // Function test.\n *   ? Predicate<Check, Value> extends Value\n *     ? Predicate<Check, Value>\n *     : never\n *   : never // Some other test?\n * )} MatchesOne\n *   Check whether a node matches a primitive check in the type system.\n * @template Value\n *   Value; typically unist `Node`.\n * @template Check\n *   Value; typically `unist-util-is`-compatible test, but not arrays.\n */\n\n/**\n * @typedef {(\n *   Check extends Array<any>\n *   ? MatchesOne<Value, Check[keyof Check]>\n *   : MatchesOne<Value, Check>\n * )} Matches\n *   Check whether a node matches a check in the type system.\n * @template Value\n *   Value; typically unist `Node`.\n * @template Check\n *   Value; typically `unist-util-is`-compatible test.\n */\n\n/**\n * @typedef {0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10} Uint\n *   Number; capped reasonably.\n */\n\n/**\n * @typedef {I extends 0 ? 1 : I extends 1 ? 2 : I extends 2 ? 3 : I extends 3 ? 4 : I extends 4 ? 5 : I extends 5 ? 6 : I extends 6 ? 7 : I extends 7 ? 8 : I extends 8 ? 9 : 10} Increment\n *   Increment a number in the type system.\n * @template {Uint} [I=0]\n *   Index.\n */\n\n/**\n * @typedef {(\n *   Node extends UnistParent\n *   ? Node extends {children: Array<infer Children>}\n *     ? Child extends Children ? Node : never\n *     : never\n *   : never\n * )} InternalParent\n *   Collect nodes that can be parents of `Child`.\n * @template {UnistNode} Node\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n */\n\n/**\n * @typedef {InternalParent<InclusiveDescendant<Tree>, Child>} Parent\n *   Collect nodes in `Tree` that can be parents of `Child`.\n * @template {UnistNode} Tree\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n */\n\n/**\n * @typedef {(\n *   Depth extends Max\n *   ? never\n *   :\n *     | InternalParent<Node, Child>\n *     | InternalAncestor<Node, InternalParent<Node, Child>, Max, Increment<Depth>>\n * )} InternalAncestor\n *   Collect nodes in `Tree` that can be ancestors of `Child`.\n * @template {UnistNode} Node\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n * @template {Uint} [Max=10]\n *   Max; searches up to this depth.\n * @template {Uint} [Depth=0]\n *   Current depth.\n */\n\n/**\n * @typedef {(\n *   Tree extends UnistParent\n *     ? Depth extends Max\n *       ? Tree\n *       : Tree | InclusiveDescendant<Tree['children'][number], Max, Increment<Depth>>\n *     : Tree\n * )} InclusiveDescendant\n *   Collect all (inclusive) descendants of `Tree`.\n *\n *   > 👉 **Note**: for performance reasons, this seems to be the fastest way to\n *   > recurse without actually running into an infinite loop, which the\n *   > previous version did.\n *   >\n *   > Practically, a max of `2` is typically enough assuming a `Root` is\n *   > passed, but it doesn’t improve performance.\n *   > It gets higher with `List > ListItem > Table > TableRow > TableCell`.\n *   > Using up to `10` doesn’t hurt or help either.\n * @template {UnistNode} Tree\n *   Tree type.\n * @template {Uint} [Max=10]\n *   Max; searches up to this depth.\n * @template {Uint} [Depth=0]\n *   Current depth.\n */\n\n/**\n * @callback Visitor\n *   Handle a node (matching `test`, if given).\n *\n *   Visitors are free to transform `node`.\n *   They can also transform `parent`.\n *\n *   Replacing `node` itself, if `SKIP` is not returned, still causes its\n *   descendants to be walked (which is a bug).\n *\n *   When adding or removing previous siblings of `node` (or next siblings, in\n *   case of reverse), the `Visitor` should return a new `Index` to specify the\n *   sibling to traverse after `node` is traversed.\n *   Adding or removing next siblings of `node` (or previous siblings, in case\n *   of reverse) is handled as expected without needing to return a new `Index`.\n *\n *   Removing the children property of `parent` still results in them being\n *   traversed.\n * @param {Visited} node\n *   Found node.\n * @param {Visited extends UnistNode ? number | undefined : never} index\n *   Index of `node` in `parent`.\n * @param {Ancestor extends UnistParent ? Ancestor | undefined : never} parent\n *   Parent of `node`.\n * @returns {VisitorResult}\n *   What to do next.\n *\n *   An `Index` is treated as a tuple of `[CONTINUE, Index]`.\n *   An `Action` is treated as a tuple of `[Action]`.\n *\n *   Passing a tuple back only makes sense if the `Action` is `SKIP`.\n *   When the `Action` is `EXIT`, that action can be returned.\n *   When the `Action` is `CONTINUE`, `Index` can be returned.\n * @template {UnistNode} [Visited=UnistNode]\n *   Visited node type.\n * @template {UnistParent} [Ancestor=UnistParent]\n *   Ancestor type.\n */\n\n/**\n * @typedef {Visitor<Visited, Parent<Ancestor, Visited>>} BuildVisitorFromMatch\n *   Build a typed `Visitor` function from a node and all possible parents.\n *\n *   It will infer which values are passed as `node` and which as `parent`.\n * @template {UnistNode} Visited\n *   Node type.\n * @template {UnistParent} Ancestor\n *   Parent type.\n */\n\n/**\n * @typedef {(\n *   BuildVisitorFromMatch<\n *     Matches<Descendant, Check>,\n *     Extract<Descendant, UnistParent>\n *   >\n * )} BuildVisitorFromDescendants\n *   Build a typed `Visitor` function from a list of descendants and a test.\n *\n *   It will infer which values are passed as `node` and which as `parent`.\n * @template {UnistNode} Descendant\n *   Node type.\n * @template {Test} Check\n *   Test type.\n */\n\n/**\n * @typedef {(\n *   BuildVisitorFromDescendants<\n *     InclusiveDescendant<Tree>,\n *     Check\n *   >\n * )} BuildVisitor\n *   Build a typed `Visitor` function from a tree and a test.\n *\n *   It will infer which values are passed as `node` and which as `parent`.\n * @template {UnistNode} [Tree=UnistNode]\n *   Node type.\n * @template {Test} [Check=Test]\n *   Test type.\n */\n\nimport {visitParents} from 'unist-util-visit-parents'\n\nexport {CONTINUE, EXIT, SKIP} from 'unist-util-visit-parents'\n\n/**\n * Visit nodes.\n *\n * This algorithm performs *depth-first* *tree traversal* in *preorder*\n * (**NLR**) or if `reverse` is given, in *reverse preorder* (**NRL**).\n *\n * You can choose for which nodes `visitor` is called by passing a `test`.\n * For complex tests, you should test yourself in `visitor`, as it will be\n * faster and will have improved type information.\n *\n * Walking the tree is an intensive task.\n * Make use of the return values of the visitor when possible.\n * Instead of walking a tree multiple times, walk it once, use `unist-util-is`\n * to check if a node matches, and then perform different operations.\n *\n * You can change the tree.\n * See `Visitor` for more info.\n *\n * @overload\n * @param {Tree} tree\n * @param {Check} check\n * @param {BuildVisitor<Tree, Check>} visitor\n * @param {boolean | null | undefined} [reverse]\n * @returns {undefined}\n *\n * @overload\n * @param {Tree} tree\n * @param {BuildVisitor<Tree>} visitor\n * @param {boolean | null | undefined} [reverse]\n * @returns {undefined}\n *\n * @param {UnistNode} tree\n *   Tree to traverse.\n * @param {Visitor | Test} testOrVisitor\n *   `unist-util-is`-compatible test (optional, omit to pass a visitor).\n * @param {Visitor | boolean | null | undefined} [visitorOrReverse]\n *   Handle each node (when test is omitted, pass `reverse`).\n * @param {boolean | null | undefined} [maybeReverse=false]\n *   Traverse in reverse preorder (NRL) instead of the default preorder (NLR).\n * @returns {undefined}\n *   Nothing.\n *\n * @template {UnistNode} Tree\n *   Node type.\n * @template {Test} Check\n *   `unist-util-is`-compatible test.\n */\nexport function visit(tree, testOrVisitor, visitorOrReverse, maybeReverse) {\n  /** @type {boolean | null | undefined} */\n  let reverse\n  /** @type {Test} */\n  let test\n  /** @type {Visitor} */\n  let visitor\n\n  if (\n    typeof testOrVisitor === 'function' &&\n    typeof visitorOrReverse !== 'function'\n  ) {\n    test = undefined\n    visitor = testOrVisitor\n    reverse = visitorOrReverse\n  } else {\n    // @ts-expect-error: assume the overload with test was given.\n    test = testOrVisitor\n    // @ts-expect-error: assume the overload with test was given.\n    visitor = visitorOrReverse\n    reverse = maybeReverse\n  }\n\n  visitParents(tree, test, overload, reverse)\n\n  /**\n   * @param {UnistNode} node\n   * @param {Array<UnistParent>} parents\n   */\n  function overload(node, parents) {\n    const parent = parents[parents.length - 1]\n    const index = parent ? parent.children.indexOf(node) : undefined\n    return visitor(node, index, parent)\n  }\n}\n","/**\n * @import {State} from 'mdast-util-to-markdown'\n * @import {Heading} from 'mdast'\n */\n\nimport {EXIT, visit} from 'unist-util-visit'\nimport {toString} from 'mdast-util-to-string'\n\n/**\n * @param {Heading} node\n * @param {State} state\n * @returns {boolean}\n */\nexport function formatHeadingAsSetext(node, state) {\n  let literalWithBreak = false\n\n  // Look for literals with a line break.\n  // Note that this also\n  visit(node, function (node) {\n    if (\n      ('value' in node && /\\r?\\n|\\r/.test(node.value)) ||\n      node.type === 'break'\n    ) {\n      literalWithBreak = true\n      return EXIT\n    }\n  })\n\n  return Boolean(\n    (!node.depth || node.depth < 3) &&\n      toString(node) &&\n      (state.options.setext || literalWithBreak)\n  )\n}\n","/**\n * @import {Info, State} from 'mdast-util-to-markdown'\n * @import {Heading, Parents} from 'mdast'\n */\n\nimport {encodeCharacterReference} from '../util/encode-character-reference.js'\nimport {formatHeadingAsSetext} from '../util/format-heading-as-setext.js'\n\n/**\n * @param {Heading} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function heading(node, _, state, info) {\n  const rank = Math.max(Math.min(6, node.depth || 1), 1)\n  const tracker = state.createTracker(info)\n\n  if (formatHeadingAsSetext(node, state)) {\n    const exit = state.enter('headingSetext')\n    const subexit = state.enter('phrasing')\n    const value = state.containerPhrasing(node, {\n      ...tracker.current(),\n      before: '\\n',\n      after: '\\n'\n    })\n    subexit()\n    exit()\n\n    return (\n      value +\n      '\\n' +\n      (rank === 1 ? '=' : '-').repeat(\n        // The whole size…\n        value.length -\n          // Minus the position of the character after the last EOL (or\n          // 0 if there is none)…\n          (Math.max(value.lastIndexOf('\\r'), value.lastIndexOf('\\n')) + 1)\n      )\n    )\n  }\n\n  const sequence = '#'.repeat(rank)\n  const exit = state.enter('headingAtx')\n  const subexit = state.enter('phrasing')\n\n  // Note: for proper tracking, we should reset the output positions when there\n  // is no content returned, because then the space is not output.\n  // Practically, in that case, there is no content, so it doesn’t matter that\n  // we’ve tracked one too many characters.\n  tracker.move(sequence + ' ')\n\n  let value = state.containerPhrasing(node, {\n    before: '# ',\n    after: '\\n',\n    ...tracker.current()\n  })\n\n  if (/^[\\t ]/.test(value)) {\n    // To do: what effect has the character reference on tracking?\n    value = encodeCharacterReference(value.charCodeAt(0)) + value.slice(1)\n  }\n\n  value = value ? sequence + ' ' + value : sequence\n\n  if (state.options.closeAtx) {\n    value += ' ' + sequence\n  }\n\n  subexit()\n  exit()\n\n  return value\n}\n","/**\n * @import {Html} from 'mdast'\n */\n\nhtml.peek = htmlPeek\n\n/**\n * @param {Html} node\n * @returns {string}\n */\nexport function html(node) {\n  return node.value || ''\n}\n\n/**\n * @returns {string}\n */\nfunction htmlPeek() {\n  return '<'\n}\n","/**\n * @import {Info, State} from 'mdast-util-to-markdown'\n * @import {Image, Parents} from 'mdast'\n */\n\nimport {checkQuote} from '../util/check-quote.js'\n\nimage.peek = imagePeek\n\n/**\n * @param {Image} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function image(node, _, state, info) {\n  const quote = checkQuote(state)\n  const suffix = quote === '\"' ? 'Quote' : 'Apostrophe'\n  const exit = state.enter('image')\n  let subexit = state.enter('label')\n  const tracker = state.createTracker(info)\n  let value = tracker.move('![')\n  value += tracker.move(\n    state.safe(node.alt, {before: value, after: ']', ...tracker.current()})\n  )\n  value += tracker.move('](')\n\n  subexit()\n\n  if (\n    // If there’s no url but there is a title…\n    (!node.url && node.title) ||\n    // If there are control characters or whitespace.\n    /[\\0- \\u007F]/.test(node.url)\n  ) {\n    subexit = state.enter('destinationLiteral')\n    value += tracker.move('<')\n    value += tracker.move(\n      state.safe(node.url, {before: value, after: '>', ...tracker.current()})\n    )\n    value += tracker.move('>')\n  } else {\n    // No whitespace, raw is prettier.\n    subexit = state.enter('destinationRaw')\n    value += tracker.move(\n      state.safe(node.url, {\n        before: value,\n        after: node.title ? ' ' : ')',\n        ...tracker.current()\n      })\n    )\n  }\n\n  subexit()\n\n  if (node.title) {\n    subexit = state.enter(`title${suffix}`)\n    value += tracker.move(' ' + quote)\n    value += tracker.move(\n      state.safe(node.title, {\n        before: value,\n        after: quote,\n        ...tracker.current()\n      })\n    )\n    value += tracker.move(quote)\n    subexit()\n  }\n\n  value += tracker.move(')')\n  exit()\n\n  return value\n}\n\n/**\n * @returns {string}\n */\nfunction imagePeek() {\n  return '!'\n}\n","/**\n * @import {Info, State} from 'mdast-util-to-markdown'\n * @import {ImageReference, Parents} from 'mdast'\n */\n\nimageReference.peek = imageReferencePeek\n\n/**\n * @param {ImageReference} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function imageReference(node, _, state, info) {\n  const type = node.referenceType\n  const exit = state.enter('imageReference')\n  let subexit = state.enter('label')\n  const tracker = state.createTracker(info)\n  let value = tracker.move('![')\n  const alt = state.safe(node.alt, {\n    before: value,\n    after: ']',\n    ...tracker.current()\n  })\n  value += tracker.move(alt + '][')\n\n  subexit()\n  // Hide the fact that we’re in phrasing, because escapes don’t work.\n  const stack = state.stack\n  state.stack = []\n  subexit = state.enter('reference')\n  // Note: for proper tracking, we should reset the output positions when we end\n  // up making a `shortcut` reference, because then there is no brace output.\n  // Practically, in that case, there is no content, so it doesn’t matter that\n  // we’ve tracked one too many characters.\n  const reference = state.safe(state.associationId(node), {\n    before: value,\n    after: ']',\n    ...tracker.current()\n  })\n  subexit()\n  state.stack = stack\n  exit()\n\n  if (type === 'full' || !alt || alt !== reference) {\n    value += tracker.move(reference + ']')\n  } else if (type === 'shortcut') {\n    // Remove the unwanted `[`.\n    value = value.slice(0, -1)\n  } else {\n    value += tracker.move(']')\n  }\n\n  return value\n}\n\n/**\n * @returns {string}\n */\nfunction imageReferencePeek() {\n  return '!'\n}\n","/**\n * @import {State} from 'mdast-util-to-markdown'\n * @import {InlineCode, Parents} from 'mdast'\n */\n\ninlineCode.peek = inlineCodePeek\n\n/**\n * @param {InlineCode} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @returns {string}\n */\nexport function inlineCode(node, _, state) {\n  let value = node.value || ''\n  let sequence = '`'\n  let index = -1\n\n  // If there is a single grave accent on its own in the code, use a fence of\n  // two.\n  // If there are two in a row, use one.\n  while (new RegExp('(^|[^`])' + sequence + '([^`]|$)').test(value)) {\n    sequence += '`'\n  }\n\n  // If this is not just spaces or eols (tabs don’t count), and either the\n  // first or last character are a space, eol, or tick, then pad with spaces.\n  if (\n    /[^ \\r\\n]/.test(value) &&\n    ((/^[ \\r\\n]/.test(value) && /[ \\r\\n]$/.test(value)) || /^`|`$/.test(value))\n  ) {\n    value = ' ' + value + ' '\n  }\n\n  // We have a potential problem: certain characters after eols could result in\n  // blocks being seen.\n  // For example, if someone injected the string `'\\n# b'`, then that would\n  // result in an ATX heading.\n  // We can’t escape characters in `inlineCode`, but because eols are\n  // transformed to spaces when going from markdown to HTML anyway, we can swap\n  // them out.\n  while (++index < state.unsafe.length) {\n    const pattern = state.unsafe[index]\n    const expression = state.compilePattern(pattern)\n    /** @type {RegExpExecArray | null} */\n    let match\n\n    // Only look for `atBreak`s.\n    // Btw: note that `atBreak` patterns will always start the regex at LF or\n    // CR.\n    if (!pattern.atBreak) continue\n\n    while ((match = expression.exec(value))) {\n      let position = match.index\n\n      // Support CRLF (patterns only look for one of the characters).\n      if (\n        value.charCodeAt(position) === 10 /* `\\n` */ &&\n        value.charCodeAt(position - 1) === 13 /* `\\r` */\n      ) {\n        position--\n      }\n\n      value = value.slice(0, position) + ' ' + value.slice(match.index + 1)\n    }\n  }\n\n  return sequence + value + sequence\n}\n\n/**\n * @returns {string}\n */\nfunction inlineCodePeek() {\n  return '`'\n}\n","/**\n * @import {State} from 'mdast-util-to-markdown'\n * @import {Link} from 'mdast'\n */\n\nimport {toString} from 'mdast-util-to-string'\n\n/**\n * @param {Link} node\n * @param {State} state\n * @returns {boolean}\n */\nexport function formatLinkAsAutolink(node, state) {\n  const raw = toString(node)\n\n  return Boolean(\n    !state.options.resourceLink &&\n      // If there’s a url…\n      node.url &&\n      // And there’s a no title…\n      !node.title &&\n      // And the content of `node` is a single text node…\n      node.children &&\n      node.children.length === 1 &&\n      node.children[0].type === 'text' &&\n      // And if the url is the same as the content…\n      (raw === node.url || 'mailto:' + raw === node.url) &&\n      // And that starts w/ a protocol…\n      /^[a-z][a-z+.-]+:/i.test(node.url) &&\n      // And that doesn’t contain ASCII control codes (character escapes and\n      // references don’t work), space, or angle brackets…\n      !/[\\0- <>\\u007F]/.test(node.url)\n  )\n}\n","/**\n * @import {Info, State} from 'mdast-util-to-markdown'\n * @import {Link, Parents} from 'mdast'\n * @import {Exit} from '../types.js'\n */\n\nimport {checkQuote} from '../util/check-quote.js'\nimport {formatLinkAsAutolink} from '../util/format-link-as-autolink.js'\n\nlink.peek = linkPeek\n\n/**\n * @param {Link} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function link(node, _, state, info) {\n  const quote = checkQuote(state)\n  const suffix = quote === '\"' ? 'Quote' : 'Apostrophe'\n  const tracker = state.createTracker(info)\n  /** @type {Exit} */\n  let exit\n  /** @type {Exit} */\n  let subexit\n\n  if (formatLinkAsAutolink(node, state)) {\n    // Hide the fact that we’re in phrasing, because escapes don’t work.\n    const stack = state.stack\n    state.stack = []\n    exit = state.enter('autolink')\n    let value = tracker.move('<')\n    value += tracker.move(\n      state.containerPhrasing(node, {\n        before: value,\n        after: '>',\n        ...tracker.current()\n      })\n    )\n    value += tracker.move('>')\n    exit()\n    state.stack = stack\n    return value\n  }\n\n  exit = state.enter('link')\n  subexit = state.enter('label')\n  let value = tracker.move('[')\n  value += tracker.move(\n    state.containerPhrasing(node, {\n      before: value,\n      after: '](',\n      ...tracker.current()\n    })\n  )\n  value += tracker.move('](')\n  subexit()\n\n  if (\n    // If there’s no url but there is a title…\n    (!node.url && node.title) ||\n    // If there are control characters or whitespace.\n    /[\\0- \\u007F]/.test(node.url)\n  ) {\n    subexit = state.enter('destinationLiteral')\n    value += tracker.move('<')\n    value += tracker.move(\n      state.safe(node.url, {before: value, after: '>', ...tracker.current()})\n    )\n    value += tracker.move('>')\n  } else {\n    // No whitespace, raw is prettier.\n    subexit = state.enter('destinationRaw')\n    value += tracker.move(\n      state.safe(node.url, {\n        before: value,\n        after: node.title ? ' ' : ')',\n        ...tracker.current()\n      })\n    )\n  }\n\n  subexit()\n\n  if (node.title) {\n    subexit = state.enter(`title${suffix}`)\n    value += tracker.move(' ' + quote)\n    value += tracker.move(\n      state.safe(node.title, {\n        before: value,\n        after: quote,\n        ...tracker.current()\n      })\n    )\n    value += tracker.move(quote)\n    subexit()\n  }\n\n  value += tracker.move(')')\n\n  exit()\n  return value\n}\n\n/**\n * @param {Link} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @returns {string}\n */\nfunction linkPeek(node, _, state) {\n  return formatLinkAsAutolink(node, state) ? '<' : '['\n}\n","/**\n * @import {Info, State} from 'mdast-util-to-markdown'\n * @import {LinkReference, Parents} from 'mdast'\n */\n\nlinkReference.peek = linkReferencePeek\n\n/**\n * @param {LinkReference} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function linkReference(node, _, state, info) {\n  const type = node.referenceType\n  const exit = state.enter('linkReference')\n  let subexit = state.enter('label')\n  const tracker = state.createTracker(info)\n  let value = tracker.move('[')\n  const text = state.containerPhrasing(node, {\n    before: value,\n    after: ']',\n    ...tracker.current()\n  })\n  value += tracker.move(text + '][')\n\n  subexit()\n  // Hide the fact that we’re in phrasing, because escapes don’t work.\n  const stack = state.stack\n  state.stack = []\n  subexit = state.enter('reference')\n  // Note: for proper tracking, we should reset the output positions when we end\n  // up making a `shortcut` reference, because then there is no brace output.\n  // Practically, in that case, there is no content, so it doesn’t matter that\n  // we’ve tracked one too many characters.\n  const reference = state.safe(state.associationId(node), {\n    before: value,\n    after: ']',\n    ...tracker.current()\n  })\n  subexit()\n  state.stack = stack\n  exit()\n\n  if (type === 'full' || !text || text !== reference) {\n    value += tracker.move(reference + ']')\n  } else if (type === 'shortcut') {\n    // Remove the unwanted `[`.\n    value = value.slice(0, -1)\n  } else {\n    value += tracker.move(']')\n  }\n\n  return value\n}\n\n/**\n * @returns {string}\n */\nfunction linkReferencePeek() {\n  return '['\n}\n","/**\n * @import {Options, State} from 'mdast-util-to-markdown'\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['bullet'], null | undefined>}\n */\nexport function checkBullet(state) {\n  const marker = state.options.bullet || '*'\n\n  if (marker !== '*' && marker !== '+' && marker !== '-') {\n    throw new Error(\n      'Cannot serialize items with `' +\n        marker +\n        '` for `options.bullet`, expected `*`, `+`, or `-`'\n    )\n  }\n\n  return marker\n}\n","/**\n * @import {Options, State} from 'mdast-util-to-markdown'\n */\n\nimport {checkBullet} from './check-bullet.js'\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['bullet'], null | undefined>}\n */\nexport function checkBulletOther(state) {\n  const bullet = checkBullet(state)\n  const bulletOther = state.options.bulletOther\n\n  if (!bulletOther) {\n    return bullet === '*' ? '-' : '*'\n  }\n\n  if (bulletOther !== '*' && bulletOther !== '+' && bulletOther !== '-') {\n    throw new Error(\n      'Cannot serialize items with `' +\n        bulletOther +\n        '` for `options.bulletOther`, expected `*`, `+`, or `-`'\n    )\n  }\n\n  if (bulletOther === bullet) {\n    throw new Error(\n      'Expected `bullet` (`' +\n        bullet +\n        '`) and `bulletOther` (`' +\n        bulletOther +\n        '`) to be different'\n    )\n  }\n\n  return bulletOther\n}\n","/**\n * @import {Options, State} from 'mdast-util-to-markdown'\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['bulletOrdered'], null | undefined>}\n */\nexport function checkBulletOrdered(state) {\n  const marker = state.options.bulletOrdered || '.'\n\n  if (marker !== '.' && marker !== ')') {\n    throw new Error(\n      'Cannot serialize items with `' +\n        marker +\n        '` for `options.bulletOrdered`, expected `.` or `)`'\n    )\n  }\n\n  return marker\n}\n","/**\n * @import {Options, State} from 'mdast-util-to-markdown'\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['rule'], null | undefined>}\n */\nexport function checkRule(state) {\n  const marker = state.options.rule || '*'\n\n  if (marker !== '*' && marker !== '-' && marker !== '_') {\n    throw new Error(\n      'Cannot serialize rules with `' +\n        marker +\n        '` for `options.rule`, expected `*`, `-`, or `_`'\n    )\n  }\n\n  return marker\n}\n","/**\n * @import {Info, State} from 'mdast-util-to-markdown'\n * @import {List, Parents} from 'mdast'\n */\n\nimport {checkBullet} from '../util/check-bullet.js'\nimport {checkBulletOther} from '../util/check-bullet-other.js'\nimport {checkBulletOrdered} from '../util/check-bullet-ordered.js'\nimport {checkRule} from '../util/check-rule.js'\n\n/**\n * @param {List} node\n * @param {Parents | undefined} parent\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function list(node, parent, state, info) {\n  const exit = state.enter('list')\n  const bulletCurrent = state.bulletCurrent\n  /** @type {string} */\n  let bullet = node.ordered ? checkBulletOrdered(state) : checkBullet(state)\n  /** @type {string} */\n  const bulletOther = node.ordered\n    ? bullet === '.'\n      ? ')'\n      : '.'\n    : checkBulletOther(state)\n  let useDifferentMarker =\n    parent && state.bulletLastUsed ? bullet === state.bulletLastUsed : false\n\n  if (!node.ordered) {\n    const firstListItem = node.children ? node.children[0] : undefined\n\n    // If there’s an empty first list item directly in two list items,\n    // we have to use a different bullet:\n    //\n    // ```markdown\n    // * - *\n    // ```\n    //\n    // …because otherwise it would become one big thematic break.\n    if (\n      // Bullet could be used as a thematic break marker:\n      (bullet === '*' || bullet === '-') &&\n      // Empty first list item:\n      firstListItem &&\n      (!firstListItem.children || !firstListItem.children[0]) &&\n      // Directly in two other list items:\n      state.stack[state.stack.length - 1] === 'list' &&\n      state.stack[state.stack.length - 2] === 'listItem' &&\n      state.stack[state.stack.length - 3] === 'list' &&\n      state.stack[state.stack.length - 4] === 'listItem' &&\n      // That are each the first child.\n      state.indexStack[state.indexStack.length - 1] === 0 &&\n      state.indexStack[state.indexStack.length - 2] === 0 &&\n      state.indexStack[state.indexStack.length - 3] === 0\n    ) {\n      useDifferentMarker = true\n    }\n\n    // If there’s a thematic break at the start of the first list item,\n    // we have to use a different bullet:\n    //\n    // ```markdown\n    // * ---\n    // ```\n    //\n    // …because otherwise it would become one big thematic break.\n    if (checkRule(state) === bullet && firstListItem) {\n      let index = -1\n\n      while (++index < node.children.length) {\n        const item = node.children[index]\n\n        if (\n          item &&\n          item.type === 'listItem' &&\n          item.children &&\n          item.children[0] &&\n          item.children[0].type === 'thematicBreak'\n        ) {\n          useDifferentMarker = true\n          break\n        }\n      }\n    }\n  }\n\n  if (useDifferentMarker) {\n    bullet = bulletOther\n  }\n\n  state.bulletCurrent = bullet\n  const value = state.containerFlow(node, info)\n  state.bulletLastUsed = bullet\n  state.bulletCurrent = bulletCurrent\n  exit()\n  return value\n}\n","/**\n * @import {Options, State} from 'mdast-util-to-markdown'\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['listItemIndent'], null | undefined>}\n */\nexport function checkListItemIndent(state) {\n  const style = state.options.listItemIndent || 'one'\n\n  if (style !== 'tab' && style !== 'one' && style !== 'mixed') {\n    throw new Error(\n      'Cannot serialize items with `' +\n        style +\n        '` for `options.listItemIndent`, expected `tab`, `one`, or `mixed`'\n    )\n  }\n\n  return style\n}\n","/**\n * @import {Info, Map, State} from 'mdast-util-to-markdown'\n * @import {ListItem, Parents} from 'mdast'\n */\n\nimport {checkBullet} from '../util/check-bullet.js'\nimport {checkListItemIndent} from '../util/check-list-item-indent.js'\n\n/**\n * @param {ListItem} node\n * @param {Parents | undefined} parent\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function listItem(node, parent, state, info) {\n  const listItemIndent = checkListItemIndent(state)\n  let bullet = state.bulletCurrent || checkBullet(state)\n\n  // Add the marker value for ordered lists.\n  if (parent && parent.type === 'list' && parent.ordered) {\n    bullet =\n      (typeof parent.start === 'number' && parent.start > -1\n        ? parent.start\n        : 1) +\n      (state.options.incrementListMarker === false\n        ? 0\n        : parent.children.indexOf(node)) +\n      bullet\n  }\n\n  let size = bullet.length + 1\n\n  if (\n    listItemIndent === 'tab' ||\n    (listItemIndent === 'mixed' &&\n      ((parent && parent.type === 'list' && parent.spread) || node.spread))\n  ) {\n    size = Math.ceil(size / 4) * 4\n  }\n\n  const tracker = state.createTracker(info)\n  tracker.move(bullet + ' '.repeat(size - bullet.length))\n  tracker.shift(size)\n  const exit = state.enter('listItem')\n  const value = state.indentLines(\n    state.containerFlow(node, tracker.current()),\n    map\n  )\n  exit()\n\n  return value\n\n  /** @type {Map} */\n  function map(line, index, blank) {\n    if (index) {\n      return (blank ? '' : ' '.repeat(size)) + line\n    }\n\n    return (blank ? bullet : bullet + ' '.repeat(size - bullet.length)) + line\n  }\n}\n","/**\n * @import {Info, State} from 'mdast-util-to-markdown'\n * @import {Paragraph, Parents} from 'mdast'\n */\n\n/**\n * @param {Paragraph} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function paragraph(node, _, state, info) {\n  const exit = state.enter('paragraph')\n  const subexit = state.enter('phrasing')\n  const value = state.containerPhrasing(node, info)\n  subexit()\n  exit()\n  return value\n}\n","/**\n * @typedef {import('mdast').Html} Html\n * @typedef {import('mdast').PhrasingContent} PhrasingContent\n */\n\nimport {convert} from 'unist-util-is'\n\n/**\n * Check if the given value is *phrasing content*.\n *\n * > 👉 **Note**: Excludes `html`, which can be both phrasing or flow.\n *\n * @param node\n *   Thing to check, typically `Node`.\n * @returns\n *   Whether `value` is phrasing content.\n */\n\nexport const phrasing =\n  /** @type {(node?: unknown) => node is Exclude<PhrasingContent, Html>} */\n  (\n    convert([\n      'break',\n      'delete',\n      'emphasis',\n      // To do: next major: removed since footnotes were added to GFM.\n      'footnote',\n      'footnoteReference',\n      'image',\n      'imageReference',\n      'inlineCode',\n      // Enabled by `mdast-util-math`:\n      'inlineMath',\n      'link',\n      'linkReference',\n      // Enabled by `mdast-util-mdx`:\n      'mdxJsxTextElement',\n      // Enabled by `mdast-util-mdx`:\n      'mdxTextExpression',\n      'strong',\n      'text',\n      // Enabled by `mdast-util-directive`:\n      'textDirective'\n    ])\n  )\n","/**\n * @import {Info, State} from 'mdast-util-to-markdown'\n * @import {Parents, Root} from 'mdast'\n */\n\nimport {phrasing} from 'mdast-util-phrasing'\n\n/**\n * @param {Root} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function root(node, _, state, info) {\n  // Note: `html` nodes are ambiguous.\n  const hasPhrasing = node.children.some(function (d) {\n    return phrasing(d)\n  })\n\n  const container = hasPhrasing ? state.containerPhrasing : state.containerFlow\n  return container.call(state, node, info)\n}\n","/**\n * @import {Options, State} from 'mdast-util-to-markdown'\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['strong'], null | undefined>}\n */\nexport function checkStrong(state) {\n  const marker = state.options.strong || '*'\n\n  if (marker !== '*' && marker !== '_') {\n    throw new Error(\n      'Cannot serialize strong with `' +\n        marker +\n        '` for `options.strong`, expected `*`, or `_`'\n    )\n  }\n\n  return marker\n}\n","/**\n * @import {Info, State} from 'mdast-util-to-markdown'\n * @import {Parents, Strong} from 'mdast'\n */\n\nimport {checkStrong} from '../util/check-strong.js'\nimport {encodeCharacterReference} from '../util/encode-character-reference.js'\nimport {encodeInfo} from '../util/encode-info.js'\n\nstrong.peek = strongPeek\n\n/**\n * @param {Strong} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function strong(node, _, state, info) {\n  const marker = checkStrong(state)\n  const exit = state.enter('strong')\n  const tracker = state.createTracker(info)\n  const before = tracker.move(marker + marker)\n\n  let between = tracker.move(\n    state.containerPhrasing(node, {\n      after: marker,\n      before,\n      ...tracker.current()\n    })\n  )\n  const betweenHead = between.charCodeAt(0)\n  const open = encodeInfo(\n    info.before.charCodeAt(info.before.length - 1),\n    betweenHead,\n    marker\n  )\n\n  if (open.inside) {\n    between = encodeCharacterReference(betweenHead) + between.slice(1)\n  }\n\n  const betweenTail = between.charCodeAt(between.length - 1)\n  const close = encodeInfo(info.after.charCodeAt(0), betweenTail, marker)\n\n  if (close.inside) {\n    between = between.slice(0, -1) + encodeCharacterReference(betweenTail)\n  }\n\n  const after = tracker.move(marker + marker)\n\n  exit()\n\n  state.attentionEncodeSurroundingInfo = {\n    after: close.outside,\n    before: open.outside\n  }\n  return before + between + after\n}\n\n/**\n * @param {Strong} _\n * @param {Parents | undefined} _1\n * @param {State} state\n * @returns {string}\n */\nfunction strongPeek(_, _1, state) {\n  return state.options.strong || '*'\n}\n","/**\n * @import {Info, State} from 'mdast-util-to-markdown'\n * @import {Parents, Text} from 'mdast'\n */\n\n/**\n * @param {Text} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function text(node, _, state, info) {\n  return state.safe(node.value, info)\n}\n","/**\n * @import {Options, State} from 'mdast-util-to-markdown'\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['ruleRepetition'], null | undefined>}\n */\nexport function checkRuleRepetition(state) {\n  const repetition = state.options.ruleRepetition || 3\n\n  if (repetition < 3) {\n    throw new Error(\n      'Cannot serialize rules with repetition `' +\n        repetition +\n        '` for `options.ruleRepetition`, expected `3` or more'\n    )\n  }\n\n  return repetition\n}\n","/**\n * @import {State} from 'mdast-util-to-markdown'\n * @import {Parents, ThematicBreak} from 'mdast'\n */\n\nimport {checkRuleRepetition} from '../util/check-rule-repetition.js'\nimport {checkRule} from '../util/check-rule.js'\n\n/**\n * @param {ThematicBreak} _\n * @param {Parents | undefined} _1\n * @param {State} state\n * @returns {string}\n */\nexport function thematicBreak(_, _1, state) {\n  const value = (\n    checkRule(state) + (state.options.ruleSpaces ? ' ' : '')\n  ).repeat(checkRuleRepetition(state))\n\n  return state.options.ruleSpaces ? value.slice(0, -1) : value\n}\n","import {blockquote} from './blockquote.js'\nimport {hardBreak} from './break.js'\nimport {code} from './code.js'\nimport {definition} from './definition.js'\nimport {emphasis} from './emphasis.js'\nimport {heading} from './heading.js'\nimport {html} from './html.js'\nimport {image} from './image.js'\nimport {imageReference} from './image-reference.js'\nimport {inlineCode} from './inline-code.js'\nimport {link} from './link.js'\nimport {linkReference} from './link-reference.js'\nimport {list} from './list.js'\nimport {listItem} from './list-item.js'\nimport {paragraph} from './paragraph.js'\nimport {root} from './root.js'\nimport {strong} from './strong.js'\nimport {text} from './text.js'\nimport {thematicBreak} from './thematic-break.js'\n\n/**\n * Default (CommonMark) handlers.\n */\nexport const handle = {\n  blockquote,\n  break: hardBreak,\n  code,\n  definition,\n  emphasis,\n  hardBreak,\n  heading,\n  html,\n  image,\n  imageReference,\n  inlineCode,\n  link,\n  linkReference,\n  list,\n  listItem,\n  paragraph,\n  root,\n  strong,\n  text,\n  thematicBreak\n}\n","/**\n * @import {Join} from 'mdast-util-to-markdown'\n */\n\nimport {formatCodeAsIndented} from './util/format-code-as-indented.js'\nimport {formatHeadingAsSetext} from './util/format-heading-as-setext.js'\n\n/** @type {Array<Join>} */\nexport const join = [joinDefaults]\n\n/** @type {Join} */\nfunction joinDefaults(left, right, parent, state) {\n  // Indented code after list or another indented code.\n  if (\n    right.type === 'code' &&\n    formatCodeAsIndented(right, state) &&\n    (left.type === 'list' ||\n      (left.type === right.type && formatCodeAsIndented(left, state)))\n  ) {\n    return false\n  }\n\n  // Join children of a list or an item.\n  // In which case, `parent` has a `spread` field.\n  if ('spread' in parent && typeof parent.spread === 'boolean') {\n    if (\n      left.type === 'paragraph' &&\n      // Two paragraphs.\n      (left.type === right.type ||\n        right.type === 'definition' ||\n        // Paragraph followed by a setext heading.\n        (right.type === 'heading' && formatHeadingAsSetext(right, state)))\n    ) {\n      return\n    }\n\n    return parent.spread ? 1 : 0\n  }\n}\n","/**\n * @import {ConstructName, Unsafe} from 'mdast-util-to-markdown'\n */\n\n/**\n * List of constructs that occur in phrasing (paragraphs, headings), but cannot\n * contain things like attention (emphasis, strong), images, or links.\n * So they sort of cancel each other out.\n * Note: could use a better name.\n *\n * @type {Array<ConstructName>}\n */\nconst fullPhrasingSpans = [\n  'autolink',\n  'destinationLiteral',\n  'destinationRaw',\n  'reference',\n  'titleQuote',\n  'titleApostrophe'\n]\n\n/** @type {Array<Unsafe>} */\nexport const unsafe = [\n  {character: '\\t', after: '[\\\\r\\\\n]', inConstruct: 'phrasing'},\n  {character: '\\t', before: '[\\\\r\\\\n]', inConstruct: 'phrasing'},\n  {\n    character: '\\t',\n    inConstruct: ['codeFencedLangGraveAccent', 'codeFencedLangTilde']\n  },\n  {\n    character: '\\r',\n    inConstruct: [\n      'codeFencedLangGraveAccent',\n      'codeFencedLangTilde',\n      'codeFencedMetaGraveAccent',\n      'codeFencedMetaTilde',\n      'destinationLiteral',\n      'headingAtx'\n    ]\n  },\n  {\n    character: '\\n',\n    inConstruct: [\n      'codeFencedLangGraveAccent',\n      'codeFencedLangTilde',\n      'codeFencedMetaGraveAccent',\n      'codeFencedMetaTilde',\n      'destinationLiteral',\n      'headingAtx'\n    ]\n  },\n  {character: ' ', after: '[\\\\r\\\\n]', inConstruct: 'phrasing'},\n  {character: ' ', before: '[\\\\r\\\\n]', inConstruct: 'phrasing'},\n  {\n    character: ' ',\n    inConstruct: ['codeFencedLangGraveAccent', 'codeFencedLangTilde']\n  },\n  // An exclamation mark can start an image, if it is followed by a link or\n  // a link reference.\n  {\n    character: '!',\n    after: '\\\\[',\n    inConstruct: 'phrasing',\n    notInConstruct: fullPhrasingSpans\n  },\n  // A quote can break out of a title.\n  {character: '\"', inConstruct: 'titleQuote'},\n  // A number sign could start an ATX heading if it starts a line.\n  {atBreak: true, character: '#'},\n  {character: '#', inConstruct: 'headingAtx', after: '(?:[\\r\\n]|$)'},\n  // Dollar sign and percentage are not used in markdown.\n  // An ampersand could start a character reference.\n  {character: '&', after: '[#A-Za-z]', inConstruct: 'phrasing'},\n  // An apostrophe can break out of a title.\n  {character: \"'\", inConstruct: 'titleApostrophe'},\n  // A left paren could break out of a destination raw.\n  {character: '(', inConstruct: 'destinationRaw'},\n  // A left paren followed by `]` could make something into a link or image.\n  {\n    before: '\\\\]',\n    character: '(',\n    inConstruct: 'phrasing',\n    notInConstruct: fullPhrasingSpans\n  },\n  // A right paren could start a list item or break out of a destination\n  // raw.\n  {atBreak: true, before: '\\\\d+', character: ')'},\n  {character: ')', inConstruct: 'destinationRaw'},\n  // An asterisk can start thematic breaks, list items, emphasis, strong.\n  {atBreak: true, character: '*', after: '(?:[ \\t\\r\\n*])'},\n  {character: '*', inConstruct: 'phrasing', notInConstruct: fullPhrasingSpans},\n  // A plus sign could start a list item.\n  {atBreak: true, character: '+', after: '(?:[ \\t\\r\\n])'},\n  // A dash can start thematic breaks, list items, and setext heading\n  // underlines.\n  {atBreak: true, character: '-', after: '(?:[ \\t\\r\\n-])'},\n  // A dot could start a list item.\n  {atBreak: true, before: '\\\\d+', character: '.', after: '(?:[ \\t\\r\\n]|$)'},\n  // Slash, colon, and semicolon are not used in markdown for constructs.\n  // A less than can start html (flow or text) or an autolink.\n  // HTML could start with an exclamation mark (declaration, cdata, comment),\n  // slash (closing tag), question mark (instruction), or a letter (tag).\n  // An autolink also starts with a letter.\n  // Finally, it could break out of a destination literal.\n  {atBreak: true, character: '<', after: '[!/?A-Za-z]'},\n  {\n    character: '<',\n    after: '[!/?A-Za-z]',\n    inConstruct: 'phrasing',\n    notInConstruct: fullPhrasingSpans\n  },\n  {character: '<', inConstruct: 'destinationLiteral'},\n  // An equals to can start setext heading underlines.\n  {atBreak: true, character: '='},\n  // A greater than can start block quotes and it can break out of a\n  // destination literal.\n  {atBreak: true, character: '>'},\n  {character: '>', inConstruct: 'destinationLiteral'},\n  // Question mark and at sign are not used in markdown for constructs.\n  // A left bracket can start definitions, references, labels,\n  {atBreak: true, character: '['},\n  {character: '[', inConstruct: 'phrasing', notInConstruct: fullPhrasingSpans},\n  {character: '[', inConstruct: ['label', 'reference']},\n  // A backslash can start an escape (when followed by punctuation) or a\n  // hard break (when followed by an eol).\n  // Note: typical escapes are handled in `safe`!\n  {character: '\\\\', after: '[\\\\r\\\\n]', inConstruct: 'phrasing'},\n  // A right bracket can exit labels.\n  {character: ']', inConstruct: ['label', 'reference']},\n  // Caret is not used in markdown for constructs.\n  // An underscore can start emphasis, strong, or a thematic break.\n  {atBreak: true, character: '_'},\n  {character: '_', inConstruct: 'phrasing', notInConstruct: fullPhrasingSpans},\n  // A grave accent can start code (fenced or text), or it can break out of\n  // a grave accent code fence.\n  {atBreak: true, character: '`'},\n  {\n    character: '`',\n    inConstruct: ['codeFencedLangGraveAccent', 'codeFencedMetaGraveAccent']\n  },\n  {character: '`', inConstruct: 'phrasing', notInConstruct: fullPhrasingSpans},\n  // Left brace, vertical bar, right brace are not used in markdown for\n  // constructs.\n  // A tilde can start code (fenced).\n  {atBreak: true, character: '~'}\n]\n","/**\n * @import {AssociationId} from '../types.js'\n */\n\nimport {decodeString} from 'micromark-util-decode-string'\n\n/**\n * Get an identifier from an association to match it to others.\n *\n * Associations are nodes that match to something else through an ID:\n * <https://github.com/syntax-tree/mdast#association>.\n *\n * The `label` of an association is the string value: character escapes and\n * references work, and casing is intact.\n * The `identifier` is used to match one association to another:\n * controversially, character escapes and references don’t work in this\n * matching: `&copy;` does not match `©`, and `\\+` does not match `+`.\n *\n * But casing is ignored (and whitespace) is trimmed and collapsed: ` A\\nb`\n * matches `a b`.\n * So, we do prefer the label when figuring out how we’re going to serialize:\n * it has whitespace, casing, and we can ignore most useless character\n * escapes and all character references.\n *\n * @type {AssociationId}\n */\nexport function association(node) {\n  if (node.label || !node.identifier) {\n    return node.label || ''\n  }\n\n  return decodeString(node.identifier)\n}\n","/**\n * @import {CompilePattern} from '../types.js'\n */\n\n/**\n * @type {CompilePattern}\n */\nexport function compilePattern(pattern) {\n  if (!pattern._compiled) {\n    const before =\n      (pattern.atBreak ? '[\\\\r\\\\n][\\\\t ]*' : '') +\n      (pattern.before ? '(?:' + pattern.before + ')' : '')\n\n    pattern._compiled = new RegExp(\n      (before ? '(' + before + ')' : '') +\n        (/[|\\\\{}()[\\]^$+*?.-]/.test(pattern.character) ? '\\\\' : '') +\n        pattern.character +\n        (pattern.after ? '(?:' + pattern.after + ')' : ''),\n      'g'\n    )\n  }\n\n  return pattern._compiled\n}\n","/**\n * @import {Handle, Info, State} from 'mdast-util-to-markdown'\n * @import {PhrasingParents} from '../types.js'\n */\n\nimport {encodeCharacterReference} from './encode-character-reference.js'\n\n/**\n * Serialize the children of a parent that contains phrasing children.\n *\n * These children will be joined flush together.\n *\n * @param {PhrasingParents} parent\n *   Parent of flow nodes.\n * @param {State} state\n *   Info passed around about the current state.\n * @param {Info} info\n *   Info on where we are in the document we are generating.\n * @returns {string}\n *   Serialized children, joined together.\n */\nexport function containerPhrasing(parent, state, info) {\n  const indexStack = state.indexStack\n  const children = parent.children || []\n  /** @type {Array<string>} */\n  const results = []\n  let index = -1\n  let before = info.before\n  /** @type {string | undefined} */\n  let encodeAfter\n\n  indexStack.push(-1)\n  let tracker = state.createTracker(info)\n\n  while (++index < children.length) {\n    const child = children[index]\n    /** @type {string} */\n    let after\n\n    indexStack[indexStack.length - 1] = index\n\n    if (index + 1 < children.length) {\n      /** @type {Handle} */\n      // @ts-expect-error: hush, it’s actually a `zwitch`.\n      let handle = state.handle.handlers[children[index + 1].type]\n      /** @type {Handle} */\n      // @ts-expect-error: hush, it’s actually a `zwitch`.\n      if (handle && handle.peek) handle = handle.peek\n      after = handle\n        ? handle(children[index + 1], parent, state, {\n            before: '',\n            after: '',\n            ...tracker.current()\n          }).charAt(0)\n        : ''\n    } else {\n      after = info.after\n    }\n\n    // In some cases, html (text) can be found in phrasing right after an eol.\n    // When we’d serialize that, in most cases that would be seen as html\n    // (flow).\n    // As we can’t escape or so to prevent it from happening, we take a somewhat\n    // reasonable approach: replace that eol with a space.\n    // See: <https://github.com/syntax-tree/mdast-util-to-markdown/issues/15>\n    if (\n      results.length > 0 &&\n      (before === '\\r' || before === '\\n') &&\n      child.type === 'html'\n    ) {\n      results[results.length - 1] = results[results.length - 1].replace(\n        /(\\r?\\n|\\r)$/,\n        ' '\n      )\n      before = ' '\n\n      // To do: does this work to reset tracker?\n      tracker = state.createTracker(info)\n      tracker.move(results.join(''))\n    }\n\n    let value = state.handle(child, parent, state, {\n      ...tracker.current(),\n      after,\n      before\n    })\n\n    // If we had to encode the first character after the previous node and it’s\n    // still the same character,\n    // encode it.\n    if (encodeAfter && encodeAfter === value.slice(0, 1)) {\n      value =\n        encodeCharacterReference(encodeAfter.charCodeAt(0)) + value.slice(1)\n    }\n\n    const encodingInfo = state.attentionEncodeSurroundingInfo\n    state.attentionEncodeSurroundingInfo = undefined\n    encodeAfter = undefined\n\n    // If we have to encode the first character before the current node and\n    // it’s still the same character,\n    // encode it.\n    if (encodingInfo) {\n      if (\n        results.length > 0 &&\n        encodingInfo.before &&\n        before === results[results.length - 1].slice(-1)\n      ) {\n        results[results.length - 1] =\n          results[results.length - 1].slice(0, -1) +\n          encodeCharacterReference(before.charCodeAt(0))\n      }\n\n      if (encodingInfo.after) encodeAfter = after\n    }\n\n    tracker.move(value)\n    results.push(value)\n    before = value.slice(-1)\n  }\n\n  indexStack.pop()\n\n  return results.join('')\n}\n","/**\n * @import {State} from 'mdast-util-to-markdown'\n * @import {FlowChildren, FlowParents, TrackFields} from '../types.js'\n */\n\n/**\n * @param {FlowParents} parent\n *   Parent of flow nodes.\n * @param {State} state\n *   Info passed around about the current state.\n * @param {TrackFields} info\n *   Info on where we are in the document we are generating.\n * @returns {string}\n *   Serialized children, joined by (blank) lines.\n */\nexport function containerFlow(parent, state, info) {\n  const indexStack = state.indexStack\n  const children = parent.children || []\n  const tracker = state.createTracker(info)\n  /** @type {Array<string>} */\n  const results = []\n  let index = -1\n\n  indexStack.push(-1)\n\n  while (++index < children.length) {\n    const child = children[index]\n\n    indexStack[indexStack.length - 1] = index\n\n    results.push(\n      tracker.move(\n        state.handle(child, parent, state, {\n          before: '\\n',\n          after: '\\n',\n          ...tracker.current()\n        })\n      )\n    )\n\n    if (child.type !== 'list') {\n      state.bulletLastUsed = undefined\n    }\n\n    if (index < children.length - 1) {\n      results.push(\n        tracker.move(between(child, children[index + 1], parent, state))\n      )\n    }\n  }\n\n  indexStack.pop()\n\n  return results.join('')\n}\n\n/**\n * @param {FlowChildren} left\n * @param {FlowChildren} right\n * @param {FlowParents} parent\n * @param {State} state\n * @returns {string}\n */\nfunction between(left, right, parent, state) {\n  let index = state.join.length\n\n  while (index--) {\n    const result = state.join[index](left, right, parent, state)\n\n    if (result === true || result === 1) {\n      break\n    }\n\n    if (typeof result === 'number') {\n      return '\\n'.repeat(1 + result)\n    }\n\n    if (result === false) {\n      return '\\n\\n<!---->\\n\\n'\n    }\n  }\n\n  return '\\n\\n'\n}\n","/**\n * @import {IndentLines} from '../types.js'\n */\n\nconst eol = /\\r?\\n|\\r/g\n\n/**\n * @type {IndentLines}\n */\nexport function indentLines(value, map) {\n  /** @type {Array<string>} */\n  const result = []\n  let start = 0\n  let line = 0\n  /** @type {RegExpExecArray | null} */\n  let match\n\n  while ((match = eol.exec(value))) {\n    one(value.slice(start, match.index))\n    result.push(match[0])\n    start = match.index + match[0].length\n    line++\n  }\n\n  one(value.slice(start))\n\n  return result.join('')\n\n  /**\n   * @param {string} value\n   */\n  function one(value) {\n    result.push(map(value, line, !value))\n  }\n}\n","/**\n * @import {SafeConfig, State} from 'mdast-util-to-markdown'\n */\n\nimport {encodeCharacterReference} from './encode-character-reference.js'\nimport {patternInScope} from './pattern-in-scope.js'\n\n/**\n * Make a string safe for embedding in markdown constructs.\n *\n * In markdown, almost all punctuation characters can, in certain cases,\n * result in something.\n * Whether they do is highly subjective to where they happen and in what\n * they happen.\n *\n * To solve this, `mdast-util-to-markdown` tracks:\n *\n * * Characters before and after something;\n * * What “constructs” we are in.\n *\n * This information is then used by this function to escape or encode\n * special characters.\n *\n * @param {State} state\n *   Info passed around about the current state.\n * @param {string | null | undefined} input\n *   Raw value to make safe.\n * @param {SafeConfig} config\n *   Configuration.\n * @returns {string}\n *   Serialized markdown safe for embedding.\n */\nexport function safe(state, input, config) {\n  const value = (config.before || '') + (input || '') + (config.after || '')\n  /** @type {Array<number>} */\n  const positions = []\n  /** @type {Array<string>} */\n  const result = []\n  /** @type {Record<number, {before: boolean, after: boolean}>} */\n  const infos = {}\n  let index = -1\n\n  while (++index < state.unsafe.length) {\n    const pattern = state.unsafe[index]\n\n    if (!patternInScope(state.stack, pattern)) {\n      continue\n    }\n\n    const expression = state.compilePattern(pattern)\n    /** @type {RegExpExecArray | null} */\n    let match\n\n    while ((match = expression.exec(value))) {\n      const before = 'before' in pattern || Boolean(pattern.atBreak)\n      const after = 'after' in pattern\n      const position = match.index + (before ? match[1].length : 0)\n\n      if (positions.includes(position)) {\n        if (infos[position].before && !before) {\n          infos[position].before = false\n        }\n\n        if (infos[position].after && !after) {\n          infos[position].after = false\n        }\n      } else {\n        positions.push(position)\n        infos[position] = {before, after}\n      }\n    }\n  }\n\n  positions.sort(numerical)\n\n  let start = config.before ? config.before.length : 0\n  const end = value.length - (config.after ? config.after.length : 0)\n  index = -1\n\n  while (++index < positions.length) {\n    const position = positions[index]\n\n    // Character before or after matched:\n    if (position < start || position >= end) {\n      continue\n    }\n\n    // If this character is supposed to be escaped because it has a condition on\n    // the next character, and the next character is definitly being escaped,\n    // then skip this escape.\n    if (\n      (position + 1 < end &&\n        positions[index + 1] === position + 1 &&\n        infos[position].after &&\n        !infos[position + 1].before &&\n        !infos[position + 1].after) ||\n      (positions[index - 1] === position - 1 &&\n        infos[position].before &&\n        !infos[position - 1].before &&\n        !infos[position - 1].after)\n    ) {\n      continue\n    }\n\n    if (start !== position) {\n      // If we have to use a character reference, an ampersand would be more\n      // correct, but as backslashes only care about punctuation, either will\n      // do the trick\n      result.push(escapeBackslashes(value.slice(start, position), '\\\\'))\n    }\n\n    start = position\n\n    if (\n      /[!-/:-@[-`{-~]/.test(value.charAt(position)) &&\n      (!config.encode || !config.encode.includes(value.charAt(position)))\n    ) {\n      // Character escape.\n      result.push('\\\\')\n    } else {\n      // Character reference.\n      result.push(encodeCharacterReference(value.charCodeAt(position)))\n      start++\n    }\n  }\n\n  result.push(escapeBackslashes(value.slice(start, end), config.after))\n\n  return result.join('')\n}\n\n/**\n * @param {number} a\n * @param {number} b\n * @returns {number}\n */\nfunction numerical(a, b) {\n  return a - b\n}\n\n/**\n * @param {string} value\n * @param {string} after\n * @returns {string}\n */\nfunction escapeBackslashes(value, after) {\n  const expression = /\\\\(?=[!-/:-@[-`{-~])/g\n  /** @type {Array<number>} */\n  const positions = []\n  /** @type {Array<string>} */\n  const results = []\n  const whole = value + after\n  let index = -1\n  let start = 0\n  /** @type {RegExpExecArray | null} */\n  let match\n\n  while ((match = expression.exec(whole))) {\n    positions.push(match.index)\n  }\n\n  while (++index < positions.length) {\n    if (start !== positions[index]) {\n      results.push(value.slice(start, positions[index]))\n    }\n\n    results.push('\\\\')\n    start = positions[index]\n  }\n\n  results.push(value.slice(start))\n\n  return results.join('')\n}\n","/**\n * @import {CreateTracker, TrackCurrent, TrackMove, TrackShift} from '../types.js'\n */\n\n/**\n * Track positional info in the output.\n *\n * @type {CreateTracker}\n */\nexport function track(config) {\n  // Defaults are used to prevent crashes when older utilities somehow activate\n  // this code.\n  /* c8 ignore next 5 */\n  const options = config || {}\n  const now = options.now || {}\n  let lineShift = options.lineShift || 0\n  let line = now.line || 1\n  let column = now.column || 1\n\n  return {move, current, shift}\n\n  /**\n   * Get the current tracked info.\n   *\n   * @type {TrackCurrent}\n   */\n  function current() {\n    return {now: {line, column}, lineShift}\n  }\n\n  /**\n   * Define an increased line shift (the typical indent for lines).\n   *\n   * @type {TrackShift}\n   */\n  function shift(value) {\n    lineShift += value\n  }\n\n  /**\n   * Move past some generated markdown.\n   *\n   * @type {TrackMove}\n   */\n  function move(input) {\n    // eslint-disable-next-line unicorn/prefer-default-parameters\n    const value = input || ''\n    const chunks = value.split(/\\r?\\n|\\r/g)\n    const tail = chunks[chunks.length - 1]\n    line += chunks.length - 1\n    column =\n      chunks.length === 1 ? column + tail.length : 1 + tail.length + lineShift\n    return value\n  }\n}\n","/**\n * @import {Info, Join, Options, SafeConfig, State} from 'mdast-util-to-markdown'\n * @import {Nodes} from 'mdast'\n * @import {Enter, FlowParents, PhrasingParents, TrackFields} from './types.js'\n */\n\nimport {zwitch} from 'zwitch'\nimport {configure} from './configure.js'\nimport {handle as handlers} from './handle/index.js'\nimport {join} from './join.js'\nimport {unsafe} from './unsafe.js'\nimport {association} from './util/association.js'\nimport {compilePattern} from './util/compile-pattern.js'\nimport {containerPhrasing} from './util/container-phrasing.js'\nimport {containerFlow} from './util/container-flow.js'\nimport {indentLines} from './util/indent-lines.js'\nimport {safe} from './util/safe.js'\nimport {track} from './util/track.js'\n\n/**\n * Turn an mdast syntax tree into markdown.\n *\n * @param {Nodes} tree\n *   Tree to serialize.\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n * @returns {string}\n *   Serialized markdown representing `tree`.\n */\nexport function toMarkdown(tree, options) {\n  const settings = options || {}\n  /** @type {State} */\n  const state = {\n    associationId: association,\n    containerPhrasing: containerPhrasingBound,\n    containerFlow: containerFlowBound,\n    createTracker: track,\n    compilePattern,\n    enter,\n    // @ts-expect-error: GFM / frontmatter are typed in `mdast` but not defined\n    // here.\n    handlers: {...handlers},\n    // @ts-expect-error: add `handle` in a second.\n    handle: undefined,\n    indentLines,\n    indexStack: [],\n    join: [...join],\n    options: {},\n    safe: safeBound,\n    stack: [],\n    unsafe: [...unsafe]\n  }\n\n  configure(state, settings)\n\n  if (state.options.tightDefinitions) {\n    state.join.push(joinDefinition)\n  }\n\n  state.handle = zwitch('type', {\n    invalid,\n    unknown,\n    handlers: state.handlers\n  })\n\n  let result = state.handle(tree, undefined, state, {\n    before: '\\n',\n    after: '\\n',\n    now: {line: 1, column: 1},\n    lineShift: 0\n  })\n\n  if (\n    result &&\n    result.charCodeAt(result.length - 1) !== 10 &&\n    result.charCodeAt(result.length - 1) !== 13\n  ) {\n    result += '\\n'\n  }\n\n  return result\n\n  /** @type {Enter} */\n  function enter(name) {\n    state.stack.push(name)\n    return exit\n\n    /**\n     * @returns {undefined}\n     */\n    function exit() {\n      state.stack.pop()\n    }\n  }\n}\n\n/**\n * @param {unknown} value\n * @returns {never}\n */\nfunction invalid(value) {\n  throw new Error('Cannot handle value `' + value + '`, expected node')\n}\n\n/**\n * @param {unknown} value\n * @returns {never}\n */\nfunction unknown(value) {\n  // Always a node.\n  const node = /** @type {Nodes} */ (value)\n  throw new Error('Cannot handle unknown node `' + node.type + '`')\n}\n\n/** @type {Join} */\nfunction joinDefinition(left, right) {\n  // No blank line between adjacent definitions.\n  if (left.type === 'definition' && left.type === right.type) {\n    return 0\n  }\n}\n\n/**\n * Serialize the children of a parent that contains phrasing children.\n *\n * These children will be joined flush together.\n *\n * @this {State}\n *   Info passed around about the current state.\n * @param {PhrasingParents} parent\n *   Parent of flow nodes.\n * @param {Info} info\n *   Info on where we are in the document we are generating.\n * @returns {string}\n *   Serialized children, joined together.\n */\nfunction containerPhrasingBound(parent, info) {\n  return containerPhrasing(parent, this, info)\n}\n\n/**\n * Serialize the children of a parent that contains flow children.\n *\n * These children will typically be joined by blank lines.\n * What they are joined by exactly is defined by `Join` functions.\n *\n * @this {State}\n *   Info passed around about the current state.\n * @param {FlowParents} parent\n *   Parent of flow nodes.\n * @param {TrackFields} info\n *   Info on where we are in the document we are generating.\n * @returns {string}\n *   Serialized children, joined by (blank) lines.\n */\nfunction containerFlowBound(parent, info) {\n  return containerFlow(parent, this, info)\n}\n\n/**\n * Make a string safe for embedding in markdown constructs.\n *\n * In markdown, almost all punctuation characters can, in certain cases,\n * result in something.\n * Whether they do is highly subjective to where they happen and in what\n * they happen.\n *\n * To solve this, `mdast-util-to-markdown` tracks:\n *\n * * Characters before and after something;\n * * What “constructs” we are in.\n *\n * This information is then used by this function to escape or encode\n * special characters.\n *\n * @this {State}\n *   Info passed around about the current state.\n * @param {string | null | undefined} value\n *   Raw value to make safe.\n * @param {SafeConfig} config\n *   Configuration.\n * @returns {string}\n *   Serialized markdown safe for embedding.\n */\nfunction safeBound(value, config) {\n  return safe(this, value, config)\n}\n","/**\n * @typedef {import('mdast').Root} Root\n * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownOptions\n * @typedef {import('unified').Compiler<Root, string>} Compiler\n * @typedef {import('unified').Processor<undefined, undefined, undefined, Root, string>} Processor\n */\n\n/**\n * @typedef {Omit<ToMarkdownOptions, 'extensions'>} Options\n */\n\nimport {toMarkdown} from 'mdast-util-to-markdown'\n\n/**\n * Add support for serializing to markdown.\n *\n * @param {Readonly<Options> | null | undefined} [options]\n *   Configuration (optional).\n * @returns {undefined}\n *   Nothing.\n */\nexport default function remarkStringify(options) {\n  /** @type {Processor} */\n  // @ts-expect-error: TS in JSDoc generates wrong types if `this` is typed regularly.\n  const self = this\n\n  self.compiler = compiler\n\n  /**\n   * @type {Compiler}\n   */\n  function compiler(tree) {\n    return toMarkdown(tree, {\n      ...self.data('settings'),\n      ...options,\n      // Note: this option is not in the readme.\n      // The goal is for it to be set by plugins on `data` instead of being\n      // passed by users.\n      extensions: self.data('toMarkdownExtensions') || []\n    })\n  }\n}\n","/**\n * Throw a given error.\n *\n * @param {Error|null|undefined} [error]\n *   Maybe error.\n * @returns {asserts error is null|undefined}\n */\nexport function bail(error) {\n  if (error) {\n    throw error\n  }\n}\n","/**\n * @typedef {import('trough').Pipeline} Pipeline\n *\n * @typedef {import('unist').Node} Node\n *\n * @typedef {import('vfile').Compatible} Compatible\n * @typedef {import('vfile').Value} Value\n *\n * @typedef {import('../index.js').CompileResultMap} CompileResultMap\n * @typedef {import('../index.js').Data} Data\n * @typedef {import('../index.js').Settings} Settings\n */\n\n/**\n * @typedef {CompileResultMap[keyof CompileResultMap]} CompileResults\n *   Acceptable results from compilers.\n *\n *   To register custom results, add them to\n *   {@linkcode CompileResultMap}.\n */\n\n/**\n * @template {Node} [Tree=Node]\n *   The node that the compiler receives (default: `Node`).\n * @template {CompileResults} [Result=CompileResults]\n *   The thing that the compiler yields (default: `CompileResults`).\n * @callback Compiler\n *   A **compiler** handles the compiling of a syntax tree to something else\n *   (in most cases, text) (TypeScript type).\n *\n *   It is used in the stringify phase and called with a {@linkcode Node}\n *   and {@linkcode VFile} representation of the document to compile.\n *   It should return the textual representation of the given tree (typically\n *   `string`).\n *\n *   > **Note**: unified typically compiles by serializing: most compilers\n *   > return `string` (or `Uint8Array`).\n *   > Some compilers, such as the one configured with\n *   > [`rehype-react`][rehype-react], return other values (in this case, a\n *   > React tree).\n *   > If you’re using a compiler that doesn’t serialize, expect different\n *   > result values.\n *   >\n *   > To register custom results in TypeScript, add them to\n *   > {@linkcode CompileResultMap}.\n *\n *   [rehype-react]: https://github.com/rehypejs/rehype-react\n * @param {Tree} tree\n *   Tree to compile.\n * @param {VFile} file\n *   File associated with `tree`.\n * @returns {Result}\n *   New content: compiled text (`string` or `Uint8Array`, for `file.value`) or\n *   something else (for `file.result`).\n */\n\n/**\n * @template {Node} [Tree=Node]\n *   The node that the parser yields (default: `Node`)\n * @callback Parser\n *   A **parser** handles the parsing of text to a syntax tree.\n *\n *   It is used in the parse phase and is called with a `string` and\n *   {@linkcode VFile} of the document to parse.\n *   It must return the syntax tree representation of the given file\n *   ({@linkcode Node}).\n * @param {string} document\n *   Document to parse.\n * @param {VFile} file\n *   File associated with `document`.\n * @returns {Tree}\n *   Node representing the given file.\n */\n\n/**\n * @typedef {(\n *   Plugin<Array<any>, any, any> |\n *   PluginTuple<Array<any>, any, any> |\n *   Preset\n * )} Pluggable\n *   Union of the different ways to add plugins and settings.\n */\n\n/**\n * @typedef {Array<Pluggable>} PluggableList\n *   List of plugins and presets.\n */\n\n// Note: we can’t use `callback` yet as it messes up `this`:\n//  <https://github.com/microsoft/TypeScript/issues/55197>.\n/**\n * @template {Array<unknown>} [PluginParameters=[]]\n *   Arguments passed to the plugin (default: `[]`, the empty tuple).\n * @template {Node | string | undefined} [Input=Node]\n *   Value that is expected as input (default: `Node`).\n *\n *   *   If the plugin returns a {@linkcode Transformer}, this\n *       should be the node it expects.\n *   *   If the plugin sets a {@linkcode Parser}, this should be\n *       `string`.\n *   *   If the plugin sets a {@linkcode Compiler}, this should be the\n *       node it expects.\n * @template [Output=Input]\n *   Value that is yielded as output (default: `Input`).\n *\n *   *   If the plugin returns a {@linkcode Transformer}, this\n *       should be the node that that yields.\n *   *   If the plugin sets a {@linkcode Parser}, this should be the\n *       node that it yields.\n *   *   If the plugin sets a {@linkcode Compiler}, this should be\n *       result it yields.\n * @typedef {(\n *   (this: Processor, ...parameters: PluginParameters) =>\n *     Input extends string ? // Parser.\n *        Output extends Node | undefined ? undefined | void : never :\n *     Output extends CompileResults ? // Compiler.\n *        Input extends Node | undefined ? undefined | void : never :\n *     Transformer<\n *       Input extends Node ? Input : Node,\n *       Output extends Node ? Output : Node\n *     > | undefined | void\n * )} Plugin\n *   Single plugin.\n *\n *   Plugins configure the processors they are applied on in the following\n *   ways:\n *\n *   *   they change the processor, such as the parser, the compiler, or by\n *       configuring data\n *   *   they specify how to handle trees and files\n *\n *   In practice, they are functions that can receive options and configure the\n *   processor (`this`).\n *\n *   > **Note**: plugins are called when the processor is *frozen*, not when\n *   > they are applied.\n */\n\n/**\n * Tuple of a plugin and its configuration.\n *\n * The first item is a plugin, the rest are its parameters.\n *\n * @template {Array<unknown>} [TupleParameters=[]]\n *   Arguments passed to the plugin (default: `[]`, the empty tuple).\n * @template {Node | string | undefined} [Input=undefined]\n *   Value that is expected as input (optional).\n *\n *   *   If the plugin returns a {@linkcode Transformer}, this\n *       should be the node it expects.\n *   *   If the plugin sets a {@linkcode Parser}, this should be\n *       `string`.\n *   *   If the plugin sets a {@linkcode Compiler}, this should be the\n *       node it expects.\n * @template [Output=undefined] (optional).\n *   Value that is yielded as output.\n *\n *   *   If the plugin returns a {@linkcode Transformer}, this\n *       should be the node that that yields.\n *   *   If the plugin sets a {@linkcode Parser}, this should be the\n *       node that it yields.\n *   *   If the plugin sets a {@linkcode Compiler}, this should be\n *       result it yields.\n * @typedef {(\n *   [\n *     plugin: Plugin<TupleParameters, Input, Output>,\n *     ...parameters: TupleParameters\n *   ]\n * )} PluginTuple\n */\n\n/**\n * @typedef Preset\n *   Sharable configuration.\n *\n *   They can contain plugins and settings.\n * @property {PluggableList | undefined} [plugins]\n *   List of plugins and presets (optional).\n * @property {Settings | undefined} [settings]\n *   Shared settings for parsers and compilers (optional).\n */\n\n/**\n * @template {VFile} [File=VFile]\n *   The file that the callback receives (default: `VFile`).\n * @callback ProcessCallback\n *   Callback called when the process is done.\n *\n *   Called with either an error or a result.\n * @param {Error | undefined} [error]\n *   Fatal error (optional).\n * @param {File | undefined} [file]\n *   Processed file (optional).\n * @returns {undefined}\n *   Nothing.\n */\n\n/**\n * @template {Node} [Tree=Node]\n *   The tree that the callback receives (default: `Node`).\n * @callback RunCallback\n *   Callback called when transformers are done.\n *\n *   Called with either an error or results.\n * @param {Error | undefined} [error]\n *   Fatal error (optional).\n * @param {Tree | undefined} [tree]\n *   Transformed tree (optional).\n * @param {VFile | undefined} [file]\n *   File (optional).\n * @returns {undefined}\n *   Nothing.\n */\n\n/**\n * @template {Node} [Output=Node]\n *   Node type that the transformer yields (default: `Node`).\n * @callback TransformCallback\n *   Callback passed to transforms.\n *\n *   If the signature of a `transformer` accepts a third argument, the\n *   transformer may perform asynchronous operations, and must call it.\n * @param {Error | undefined} [error]\n *   Fatal error to stop the process (optional).\n * @param {Output | undefined} [tree]\n *   New, changed, tree (optional).\n * @param {VFile | undefined} [file]\n *   New, changed, file (optional).\n * @returns {undefined}\n *   Nothing.\n */\n\n/**\n * @template {Node} [Input=Node]\n *   Node type that the transformer expects (default: `Node`).\n * @template {Node} [Output=Input]\n *   Node type that the transformer yields (default: `Input`).\n * @callback Transformer\n *   Transformers handle syntax trees and files.\n *\n *   They are functions that are called each time a syntax tree and file are\n *   passed through the run phase.\n *   When an error occurs in them (either because it’s thrown, returned,\n *   rejected, or passed to `next`), the process stops.\n *\n *   The run phase is handled by [`trough`][trough], see its documentation for\n *   the exact semantics of these functions.\n *\n *   > **Note**: you should likely ignore `next`: don’t accept it.\n *   > it supports callback-style async work.\n *   > But promises are likely easier to reason about.\n *\n *   [trough]: https://github.com/wooorm/trough#function-fninput-next\n * @param {Input} tree\n *   Tree to handle.\n * @param {VFile} file\n *   File to handle.\n * @param {TransformCallback<Output>} next\n *   Callback.\n * @returns {(\n *   Promise<Output | undefined | void> |\n *   Promise<never> | // For some reason this is needed separately.\n *   Output |\n *   Error |\n *   undefined |\n *   void\n * )}\n *   If you accept `next`, nothing.\n *   Otherwise:\n *\n *   *   `Error` — fatal error to stop the process\n *   *   `Promise<undefined>` or `undefined` — the next transformer keeps using\n *       same tree\n *   *   `Promise<Node>` or `Node` — new, changed, tree\n */\n\n/**\n * @template {Node | undefined} ParseTree\n *   Output of `parse`.\n * @template {Node | undefined} HeadTree\n *   Input for `run`.\n * @template {Node | undefined} TailTree\n *   Output for `run`.\n * @template {Node | undefined} CompileTree\n *   Input of `stringify`.\n * @template {CompileResults | undefined} CompileResult\n *   Output of `stringify`.\n * @template {Node | string | undefined} Input\n *   Input of plugin.\n * @template Output\n *   Output of plugin (optional).\n * @typedef {(\n *   Input extends string\n *     ? Output extends Node | undefined\n *       ? // Parser.\n *         Processor<\n *           Output extends undefined ? ParseTree : Output,\n *           HeadTree,\n *           TailTree,\n *           CompileTree,\n *           CompileResult\n *         >\n *       : // Unknown.\n *         Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>\n *     : Output extends CompileResults\n *     ? Input extends Node | undefined\n *       ? // Compiler.\n *         Processor<\n *           ParseTree,\n *           HeadTree,\n *           TailTree,\n *           Input extends undefined ? CompileTree : Input,\n *           Output extends undefined ? CompileResult : Output\n *         >\n *       : // Unknown.\n *         Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>\n *     : Input extends Node | undefined\n *     ? Output extends Node | undefined\n *       ? // Transform.\n *         Processor<\n *           ParseTree,\n *           HeadTree extends undefined ? Input : HeadTree,\n *           Output extends undefined ? TailTree : Output,\n *           CompileTree,\n *           CompileResult\n *         >\n *       : // Unknown.\n *         Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>\n *     : // Unknown.\n *       Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>\n * )} UsePlugin\n *   Create a processor based on the input/output of a {@link Plugin plugin}.\n */\n\n/**\n * @template {CompileResults | undefined} Result\n *   Node type that the transformer yields.\n * @typedef {(\n *   Result extends Value | undefined ?\n *     VFile :\n *     VFile & {result: Result}\n *   )} VFileWithOutput\n *   Type to generate a {@linkcode VFile} corresponding to a compiler result.\n *\n *   If a result that is not acceptable on a `VFile` is used, that will\n *   be stored on the `result` field of {@linkcode VFile}.\n */\n\nimport {bail} from 'bail'\nimport extend from 'extend'\nimport {ok as assert} from 'devlop'\nimport isPlainObj from 'is-plain-obj'\nimport {trough} from 'trough'\nimport {VFile} from 'vfile'\nimport {CallableInstance} from './callable-instance.js'\n\n// To do: next major: drop `Compiler`, `Parser`: prefer lowercase.\n\n// To do: we could start yielding `never` in TS when a parser is missing and\n// `parse` is called.\n// Currently, we allow directly setting `processor.parser`, which is untyped.\n\nconst own = {}.hasOwnProperty\n\n/**\n * @template {Node | undefined} [ParseTree=undefined]\n *   Output of `parse` (optional).\n * @template {Node | undefined} [HeadTree=undefined]\n *   Input for `run` (optional).\n * @template {Node | undefined} [TailTree=undefined]\n *   Output for `run` (optional).\n * @template {Node | undefined} [CompileTree=undefined]\n *   Input of `stringify` (optional).\n * @template {CompileResults | undefined} [CompileResult=undefined]\n *   Output of `stringify` (optional).\n * @extends {CallableInstance<[], Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>>}\n */\nexport class Processor extends CallableInstance {\n  /**\n   * Create a processor.\n   */\n  constructor() {\n    // If `Processor()` is called (w/o new), `copy` is called instead.\n    super('copy')\n\n    /**\n     * Compiler to use (deprecated).\n     *\n     * @deprecated\n     *   Use `compiler` instead.\n     * @type {(\n     *   Compiler<\n     *     CompileTree extends undefined ? Node : CompileTree,\n     *     CompileResult extends undefined ? CompileResults : CompileResult\n     *   > |\n     *   undefined\n     * )}\n     */\n    this.Compiler = undefined\n\n    /**\n     * Parser to use (deprecated).\n     *\n     * @deprecated\n     *   Use `parser` instead.\n     * @type {(\n     *   Parser<ParseTree extends undefined ? Node : ParseTree> |\n     *   undefined\n     * )}\n     */\n    this.Parser = undefined\n\n    // Note: the following fields are considered private.\n    // However, they are needed for tests, and TSC generates an untyped\n    // `private freezeIndex` field for, which trips `type-coverage` up.\n    // Instead, we use `@deprecated` to visualize that they shouldn’t be used.\n    /**\n     * Internal list of configured plugins.\n     *\n     * @deprecated\n     *   This is a private internal property and should not be used.\n     * @type {Array<PluginTuple<Array<unknown>>>}\n     */\n    this.attachers = []\n\n    /**\n     * Compiler to use.\n     *\n     * @type {(\n     *   Compiler<\n     *     CompileTree extends undefined ? Node : CompileTree,\n     *     CompileResult extends undefined ? CompileResults : CompileResult\n     *   > |\n     *   undefined\n     * )}\n     */\n    this.compiler = undefined\n\n    /**\n     * Internal state to track where we are while freezing.\n     *\n     * @deprecated\n     *   This is a private internal property and should not be used.\n     * @type {number}\n     */\n    this.freezeIndex = -1\n\n    /**\n     * Internal state to track whether we’re frozen.\n     *\n     * @deprecated\n     *   This is a private internal property and should not be used.\n     * @type {boolean | undefined}\n     */\n    this.frozen = undefined\n\n    /**\n     * Internal state.\n     *\n     * @deprecated\n     *   This is a private internal property and should not be used.\n     * @type {Data}\n     */\n    this.namespace = {}\n\n    /**\n     * Parser to use.\n     *\n     * @type {(\n     *   Parser<ParseTree extends undefined ? Node : ParseTree> |\n     *   undefined\n     * )}\n     */\n    this.parser = undefined\n\n    /**\n     * Internal list of configured transformers.\n     *\n     * @deprecated\n     *   This is a private internal property and should not be used.\n     * @type {Pipeline}\n     */\n    this.transformers = trough()\n  }\n\n  /**\n   * Copy a processor.\n   *\n   * @deprecated\n   *   This is a private internal method and should not be used.\n   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}\n   *   New *unfrozen* processor ({@linkcode Processor}) that is\n   *   configured to work the same as its ancestor.\n   *   When the descendant processor is configured in the future it does not\n   *   affect the ancestral processor.\n   */\n  copy() {\n    // Cast as the type parameters will be the same after attaching.\n    const destination =\n      /** @type {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>} */ (\n        new Processor()\n      )\n    let index = -1\n\n    while (++index < this.attachers.length) {\n      const attacher = this.attachers[index]\n      destination.use(...attacher)\n    }\n\n    destination.data(extend(true, {}, this.namespace))\n\n    return destination\n  }\n\n  /**\n   * Configure the processor with info available to all plugins.\n   * Information is stored in an object.\n   *\n   * Typically, options can be given to a specific plugin, but sometimes it\n   * makes sense to have information shared with several plugins.\n   * For example, a list of HTML elements that are self-closing, which is\n   * needed during all phases.\n   *\n   * > **Note**: setting information cannot occur on *frozen* processors.\n   * > Call the processor first to create a new unfrozen processor.\n   *\n   * > **Note**: to register custom data in TypeScript, augment the\n   * > {@linkcode Data} interface.\n   *\n   * @example\n   *   This example show how to get and set info:\n   *\n   *   ```js\n   *   import {unified} from 'unified'\n   *\n   *   const processor = unified().data('alpha', 'bravo')\n   *\n   *   processor.data('alpha') // => 'bravo'\n   *\n   *   processor.data() // => {alpha: 'bravo'}\n   *\n   *   processor.data({charlie: 'delta'})\n   *\n   *   processor.data() // => {charlie: 'delta'}\n   *   ```\n   *\n   * @template {keyof Data} Key\n   *\n   * @overload\n   * @returns {Data}\n   *\n   * @overload\n   * @param {Data} dataset\n   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}\n   *\n   * @overload\n   * @param {Key} key\n   * @returns {Data[Key]}\n   *\n   * @overload\n   * @param {Key} key\n   * @param {Data[Key]} value\n   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}\n   *\n   * @param {Data | Key} [key]\n   *   Key to get or set, or entire dataset to set, or nothing to get the\n   *   entire dataset (optional).\n   * @param {Data[Key]} [value]\n   *   Value to set (optional).\n   * @returns {unknown}\n   *   The current processor when setting, the value at `key` when getting, or\n   *   the entire dataset when getting without key.\n   */\n  data(key, value) {\n    if (typeof key === 'string') {\n      // Set `key`.\n      if (arguments.length === 2) {\n        assertUnfrozen('data', this.frozen)\n        this.namespace[key] = value\n        return this\n      }\n\n      // Get `key`.\n      return (own.call(this.namespace, key) && this.namespace[key]) || undefined\n    }\n\n    // Set space.\n    if (key) {\n      assertUnfrozen('data', this.frozen)\n      this.namespace = key\n      return this\n    }\n\n    // Get space.\n    return this.namespace\n  }\n\n  /**\n   * Freeze a processor.\n   *\n   * Frozen processors are meant to be extended and not to be configured\n   * directly.\n   *\n   * When a processor is frozen it cannot be unfrozen.\n   * New processors working the same way can be created by calling the\n   * processor.\n   *\n   * It’s possible to freeze processors explicitly by calling `.freeze()`.\n   * Processors freeze automatically when `.parse()`, `.run()`, `.runSync()`,\n   * `.stringify()`, `.process()`, or `.processSync()` are called.\n   *\n   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}\n   *   The current processor.\n   */\n  freeze() {\n    if (this.frozen) {\n      return this\n    }\n\n    // Cast so that we can type plugins easier.\n    // Plugins are supposed to be usable on different processors, not just on\n    // this exact processor.\n    const self = /** @type {Processor} */ (/** @type {unknown} */ (this))\n\n    while (++this.freezeIndex < this.attachers.length) {\n      const [attacher, ...options] = this.attachers[this.freezeIndex]\n\n      if (options[0] === false) {\n        continue\n      }\n\n      if (options[0] === true) {\n        options[0] = undefined\n      }\n\n      const transformer = attacher.call(self, ...options)\n\n      if (typeof transformer === 'function') {\n        this.transformers.use(transformer)\n      }\n    }\n\n    this.frozen = true\n    this.freezeIndex = Number.POSITIVE_INFINITY\n\n    return this\n  }\n\n  /**\n   * Parse text to a syntax tree.\n   *\n   * > **Note**: `parse` freezes the processor if not already *frozen*.\n   *\n   * > **Note**: `parse` performs the parse phase, not the run phase or other\n   * > phases.\n   *\n   * @param {Compatible | undefined} [file]\n   *   file to parse (optional); typically `string` or `VFile`; any value\n   *   accepted as `x` in `new VFile(x)`.\n   * @returns {ParseTree extends undefined ? Node : ParseTree}\n   *   Syntax tree representing `file`.\n   */\n  parse(file) {\n    this.freeze()\n    const realFile = vfile(file)\n    const parser = this.parser || this.Parser\n    assertParser('parse', parser)\n    return parser(String(realFile), realFile)\n  }\n\n  /**\n   * Process the given file as configured on the processor.\n   *\n   * > **Note**: `process` freezes the processor if not already *frozen*.\n   *\n   * > **Note**: `process` performs the parse, run, and stringify phases.\n   *\n   * @overload\n   * @param {Compatible | undefined} file\n   * @param {ProcessCallback<VFileWithOutput<CompileResult>>} done\n   * @returns {undefined}\n   *\n   * @overload\n   * @param {Compatible | undefined} [file]\n   * @returns {Promise<VFileWithOutput<CompileResult>>}\n   *\n   * @param {Compatible | undefined} [file]\n   *   File (optional); typically `string` or `VFile`]; any value accepted as\n   *   `x` in `new VFile(x)`.\n   * @param {ProcessCallback<VFileWithOutput<CompileResult>> | undefined} [done]\n   *   Callback (optional).\n   * @returns {Promise<VFile> | undefined}\n   *   Nothing if `done` is given.\n   *   Otherwise a promise, rejected with a fatal error or resolved with the\n   *   processed file.\n   *\n   *   The parsed, transformed, and compiled value is available at\n   *   `file.value` (see note).\n   *\n   *   > **Note**: unified typically compiles by serializing: most\n   *   > compilers return `string` (or `Uint8Array`).\n   *   > Some compilers, such as the one configured with\n   *   > [`rehype-react`][rehype-react], return other values (in this case, a\n   *   > React tree).\n   *   > If you’re using a compiler that doesn’t serialize, expect different\n   *   > result values.\n   *   >\n   *   > To register custom results in TypeScript, add them to\n   *   > {@linkcode CompileResultMap}.\n   *\n   *   [rehype-react]: https://github.com/rehypejs/rehype-react\n   */\n  process(file, done) {\n    const self = this\n\n    this.freeze()\n    assertParser('process', this.parser || this.Parser)\n    assertCompiler('process', this.compiler || this.Compiler)\n\n    return done ? executor(undefined, done) : new Promise(executor)\n\n    // Note: `void`s needed for TS.\n    /**\n     * @param {((file: VFileWithOutput<CompileResult>) => undefined | void) | undefined} resolve\n     * @param {(error: Error | undefined) => undefined | void} reject\n     * @returns {undefined}\n     */\n    function executor(resolve, reject) {\n      const realFile = vfile(file)\n      // Assume `ParseTree` (the result of the parser) matches `HeadTree` (the\n      // input of the first transform).\n      const parseTree =\n        /** @type {HeadTree extends undefined ? Node : HeadTree} */ (\n          /** @type {unknown} */ (self.parse(realFile))\n        )\n\n      self.run(parseTree, realFile, function (error, tree, file) {\n        if (error || !tree || !file) {\n          return realDone(error)\n        }\n\n        // Assume `TailTree` (the output of the last transform) matches\n        // `CompileTree` (the input of the compiler).\n        const compileTree =\n          /** @type {CompileTree extends undefined ? Node : CompileTree} */ (\n            /** @type {unknown} */ (tree)\n          )\n\n        const compileResult = self.stringify(compileTree, file)\n\n        if (looksLikeAValue(compileResult)) {\n          file.value = compileResult\n        } else {\n          file.result = compileResult\n        }\n\n        realDone(error, /** @type {VFileWithOutput<CompileResult>} */ (file))\n      })\n\n      /**\n       * @param {Error | undefined} error\n       * @param {VFileWithOutput<CompileResult> | undefined} [file]\n       * @returns {undefined}\n       */\n      function realDone(error, file) {\n        if (error || !file) {\n          reject(error)\n        } else if (resolve) {\n          resolve(file)\n        } else {\n          assert(done, '`done` is defined if `resolve` is not')\n          done(undefined, file)\n        }\n      }\n    }\n  }\n\n  /**\n   * Process the given file as configured on the processor.\n   *\n   * An error is thrown if asynchronous transforms are configured.\n   *\n   * > **Note**: `processSync` freezes the processor if not already *frozen*.\n   *\n   * > **Note**: `processSync` performs the parse, run, and stringify phases.\n   *\n   * @param {Compatible | undefined} [file]\n   *   File (optional); typically `string` or `VFile`; any value accepted as\n   *   `x` in `new VFile(x)`.\n   * @returns {VFileWithOutput<CompileResult>}\n   *   The processed file.\n   *\n   *   The parsed, transformed, and compiled value is available at\n   *   `file.value` (see note).\n   *\n   *   > **Note**: unified typically compiles by serializing: most\n   *   > compilers return `string` (or `Uint8Array`).\n   *   > Some compilers, such as the one configured with\n   *   > [`rehype-react`][rehype-react], return other values (in this case, a\n   *   > React tree).\n   *   > If you’re using a compiler that doesn’t serialize, expect different\n   *   > result values.\n   *   >\n   *   > To register custom results in TypeScript, add them to\n   *   > {@linkcode CompileResultMap}.\n   *\n   *   [rehype-react]: https://github.com/rehypejs/rehype-react\n   */\n  processSync(file) {\n    /** @type {boolean} */\n    let complete = false\n    /** @type {VFileWithOutput<CompileResult> | undefined} */\n    let result\n\n    this.freeze()\n    assertParser('processSync', this.parser || this.Parser)\n    assertCompiler('processSync', this.compiler || this.Compiler)\n\n    this.process(file, realDone)\n    assertDone('processSync', 'process', complete)\n    assert(result, 'we either bailed on an error or have a tree')\n\n    return result\n\n    /**\n     * @type {ProcessCallback<VFileWithOutput<CompileResult>>}\n     */\n    function realDone(error, file) {\n      complete = true\n      bail(error)\n      result = file\n    }\n  }\n\n  /**\n   * Run *transformers* on a syntax tree.\n   *\n   * > **Note**: `run` freezes the processor if not already *frozen*.\n   *\n   * > **Note**: `run` performs the run phase, not other phases.\n   *\n   * @overload\n   * @param {HeadTree extends undefined ? Node : HeadTree} tree\n   * @param {RunCallback<TailTree extends undefined ? Node : TailTree>} done\n   * @returns {undefined}\n   *\n   * @overload\n   * @param {HeadTree extends undefined ? Node : HeadTree} tree\n   * @param {Compatible | undefined} file\n   * @param {RunCallback<TailTree extends undefined ? Node : TailTree>} done\n   * @returns {undefined}\n   *\n   * @overload\n   * @param {HeadTree extends undefined ? Node : HeadTree} tree\n   * @param {Compatible | undefined} [file]\n   * @returns {Promise<TailTree extends undefined ? Node : TailTree>}\n   *\n   * @param {HeadTree extends undefined ? Node : HeadTree} tree\n   *   Tree to transform and inspect.\n   * @param {(\n   *   RunCallback<TailTree extends undefined ? Node : TailTree> |\n   *   Compatible\n   * )} [file]\n   *   File associated with `node` (optional); any value accepted as `x` in\n   *   `new VFile(x)`.\n   * @param {RunCallback<TailTree extends undefined ? Node : TailTree>} [done]\n   *   Callback (optional).\n   * @returns {Promise<TailTree extends undefined ? Node : TailTree> | undefined}\n   *   Nothing if `done` is given.\n   *   Otherwise, a promise rejected with a fatal error or resolved with the\n   *   transformed tree.\n   */\n  run(tree, file, done) {\n    assertNode(tree)\n    this.freeze()\n\n    const transformers = this.transformers\n\n    if (!done && typeof file === 'function') {\n      done = file\n      file = undefined\n    }\n\n    return done ? executor(undefined, done) : new Promise(executor)\n\n    // Note: `void`s needed for TS.\n    /**\n     * @param {(\n     *   ((tree: TailTree extends undefined ? Node : TailTree) => undefined | void) |\n     *   undefined\n     * )} resolve\n     * @param {(error: Error) => undefined | void} reject\n     * @returns {undefined}\n     */\n    function executor(resolve, reject) {\n      assert(\n        typeof file !== 'function',\n        '`file` can’t be a `done` anymore, we checked'\n      )\n      const realFile = vfile(file)\n      transformers.run(tree, realFile, realDone)\n\n      /**\n       * @param {Error | undefined} error\n       * @param {Node} outputTree\n       * @param {VFile} file\n       * @returns {undefined}\n       */\n      function realDone(error, outputTree, file) {\n        const resultingTree =\n          /** @type {TailTree extends undefined ? Node : TailTree} */ (\n            outputTree || tree\n          )\n\n        if (error) {\n          reject(error)\n        } else if (resolve) {\n          resolve(resultingTree)\n        } else {\n          assert(done, '`done` is defined if `resolve` is not')\n          done(undefined, resultingTree, file)\n        }\n      }\n    }\n  }\n\n  /**\n   * Run *transformers* on a syntax tree.\n   *\n   * An error is thrown if asynchronous transforms are configured.\n   *\n   * > **Note**: `runSync` freezes the processor if not already *frozen*.\n   *\n   * > **Note**: `runSync` performs the run phase, not other phases.\n   *\n   * @param {HeadTree extends undefined ? Node : HeadTree} tree\n   *   Tree to transform and inspect.\n   * @param {Compatible | undefined} [file]\n   *   File associated with `node` (optional); any value accepted as `x` in\n   *   `new VFile(x)`.\n   * @returns {TailTree extends undefined ? Node : TailTree}\n   *   Transformed tree.\n   */\n  runSync(tree, file) {\n    /** @type {boolean} */\n    let complete = false\n    /** @type {(TailTree extends undefined ? Node : TailTree) | undefined} */\n    let result\n\n    this.run(tree, file, realDone)\n\n    assertDone('runSync', 'run', complete)\n    assert(result, 'we either bailed on an error or have a tree')\n    return result\n\n    /**\n     * @type {RunCallback<TailTree extends undefined ? Node : TailTree>}\n     */\n    function realDone(error, tree) {\n      bail(error)\n      result = tree\n      complete = true\n    }\n  }\n\n  /**\n   * Compile a syntax tree.\n   *\n   * > **Note**: `stringify` freezes the processor if not already *frozen*.\n   *\n   * > **Note**: `stringify` performs the stringify phase, not the run phase\n   * > or other phases.\n   *\n   * @param {CompileTree extends undefined ? Node : CompileTree} tree\n   *   Tree to compile.\n   * @param {Compatible | undefined} [file]\n   *   File associated with `node` (optional); any value accepted as `x` in\n   *   `new VFile(x)`.\n   * @returns {CompileResult extends undefined ? Value : CompileResult}\n   *   Textual representation of the tree (see note).\n   *\n   *   > **Note**: unified typically compiles by serializing: most compilers\n   *   > return `string` (or `Uint8Array`).\n   *   > Some compilers, such as the one configured with\n   *   > [`rehype-react`][rehype-react], return other values (in this case, a\n   *   > React tree).\n   *   > If you’re using a compiler that doesn’t serialize, expect different\n   *   > result values.\n   *   >\n   *   > To register custom results in TypeScript, add them to\n   *   > {@linkcode CompileResultMap}.\n   *\n   *   [rehype-react]: https://github.com/rehypejs/rehype-react\n   */\n  stringify(tree, file) {\n    this.freeze()\n    const realFile = vfile(file)\n    const compiler = this.compiler || this.Compiler\n    assertCompiler('stringify', compiler)\n    assertNode(tree)\n\n    return compiler(tree, realFile)\n  }\n\n  /**\n   * Configure the processor to use a plugin, a list of usable values, or a\n   * preset.\n   *\n   * If the processor is already using a plugin, the previous plugin\n   * configuration is changed based on the options that are passed in.\n   * In other words, the plugin is not added a second time.\n   *\n   * > **Note**: `use` cannot be called on *frozen* processors.\n   * > Call the processor first to create a new unfrozen processor.\n   *\n   * @example\n   *   There are many ways to pass plugins to `.use()`.\n   *   This example gives an overview:\n   *\n   *   ```js\n   *   import {unified} from 'unified'\n   *\n   *   unified()\n   *     // Plugin with options:\n   *     .use(pluginA, {x: true, y: true})\n   *     // Passing the same plugin again merges configuration (to `{x: true, y: false, z: true}`):\n   *     .use(pluginA, {y: false, z: true})\n   *     // Plugins:\n   *     .use([pluginB, pluginC])\n   *     // Two plugins, the second with options:\n   *     .use([pluginD, [pluginE, {}]])\n   *     // Preset with plugins and settings:\n   *     .use({plugins: [pluginF, [pluginG, {}]], settings: {position: false}})\n   *     // Settings only:\n   *     .use({settings: {position: false}})\n   *   ```\n   *\n   * @template {Array<unknown>} [Parameters=[]]\n   * @template {Node | string | undefined} [Input=undefined]\n   * @template [Output=Input]\n   *\n   * @overload\n   * @param {Preset | null | undefined} [preset]\n   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}\n   *\n   * @overload\n   * @param {PluggableList} list\n   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}\n   *\n   * @overload\n   * @param {Plugin<Parameters, Input, Output>} plugin\n   * @param {...(Parameters | [boolean])} parameters\n   * @returns {UsePlugin<ParseTree, HeadTree, TailTree, CompileTree, CompileResult, Input, Output>}\n   *\n   * @param {PluggableList | Plugin | Preset | null | undefined} value\n   *   Usable value.\n   * @param {...unknown} parameters\n   *   Parameters, when a plugin is given as a usable value.\n   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}\n   *   Current processor.\n   */\n  use(value, ...parameters) {\n    const attachers = this.attachers\n    const namespace = this.namespace\n\n    assertUnfrozen('use', this.frozen)\n\n    if (value === null || value === undefined) {\n      // Empty.\n    } else if (typeof value === 'function') {\n      addPlugin(value, parameters)\n    } else if (typeof value === 'object') {\n      if (Array.isArray(value)) {\n        addList(value)\n      } else {\n        addPreset(value)\n      }\n    } else {\n      throw new TypeError('Expected usable value, not `' + value + '`')\n    }\n\n    return this\n\n    /**\n     * @param {Pluggable} value\n     * @returns {undefined}\n     */\n    function add(value) {\n      if (typeof value === 'function') {\n        addPlugin(value, [])\n      } else if (typeof value === 'object') {\n        if (Array.isArray(value)) {\n          const [plugin, ...parameters] =\n            /** @type {PluginTuple<Array<unknown>>} */ (value)\n          addPlugin(plugin, parameters)\n        } else {\n          addPreset(value)\n        }\n      } else {\n        throw new TypeError('Expected usable value, not `' + value + '`')\n      }\n    }\n\n    /**\n     * @param {Preset} result\n     * @returns {undefined}\n     */\n    function addPreset(result) {\n      if (!('plugins' in result) && !('settings' in result)) {\n        throw new Error(\n          'Expected usable value but received an empty preset, which is probably a mistake: presets typically come with `plugins` and sometimes with `settings`, but this has neither'\n        )\n      }\n\n      addList(result.plugins)\n\n      if (result.settings) {\n        namespace.settings = extend(true, namespace.settings, result.settings)\n      }\n    }\n\n    /**\n     * @param {PluggableList | null | undefined} plugins\n     * @returns {undefined}\n     */\n    function addList(plugins) {\n      let index = -1\n\n      if (plugins === null || plugins === undefined) {\n        // Empty.\n      } else if (Array.isArray(plugins)) {\n        while (++index < plugins.length) {\n          const thing = plugins[index]\n          add(thing)\n        }\n      } else {\n        throw new TypeError('Expected a list of plugins, not `' + plugins + '`')\n      }\n    }\n\n    /**\n     * @param {Plugin} plugin\n     * @param {Array<unknown>} parameters\n     * @returns {undefined}\n     */\n    function addPlugin(plugin, parameters) {\n      let index = -1\n      let entryIndex = -1\n\n      while (++index < attachers.length) {\n        if (attachers[index][0] === plugin) {\n          entryIndex = index\n          break\n        }\n      }\n\n      if (entryIndex === -1) {\n        attachers.push([plugin, ...parameters])\n      }\n      // Only set if there was at least a `primary` value, otherwise we’d change\n      // `arguments.length`.\n      else if (parameters.length > 0) {\n        let [primary, ...rest] = parameters\n        const currentPrimary = attachers[entryIndex][1]\n        if (isPlainObj(currentPrimary) && isPlainObj(primary)) {\n          primary = extend(true, currentPrimary, primary)\n        }\n\n        attachers[entryIndex] = [plugin, primary, ...rest]\n      }\n    }\n  }\n}\n\n// Note: this returns a *callable* instance.\n// That’s why it’s documented as a function.\n/**\n * Create a new processor.\n *\n * @example\n *   This example shows how a new processor can be created (from `remark`) and linked\n *   to **stdin**(4) and **stdout**(4).\n *\n *   ```js\n *   import process from 'node:process'\n *   import concatStream from 'concat-stream'\n *   import {remark} from 'remark'\n *\n *   process.stdin.pipe(\n *     concatStream(function (buf) {\n *       process.stdout.write(String(remark().processSync(buf)))\n *     })\n *   )\n *   ```\n *\n * @returns\n *   New *unfrozen* processor (`processor`).\n *\n *   This processor is configured to work the same as its ancestor.\n *   When the descendant processor is configured in the future it does not\n *   affect the ancestral processor.\n */\nexport const unified = new Processor().freeze()\n\n/**\n * Assert a parser is available.\n *\n * @param {string} name\n * @param {unknown} value\n * @returns {asserts value is Parser}\n */\nfunction assertParser(name, value) {\n  if (typeof value !== 'function') {\n    throw new TypeError('Cannot `' + name + '` without `parser`')\n  }\n}\n\n/**\n * Assert a compiler is available.\n *\n * @param {string} name\n * @param {unknown} value\n * @returns {asserts value is Compiler}\n */\nfunction assertCompiler(name, value) {\n  if (typeof value !== 'function') {\n    throw new TypeError('Cannot `' + name + '` without `compiler`')\n  }\n}\n\n/**\n * Assert the processor is not frozen.\n *\n * @param {string} name\n * @param {unknown} frozen\n * @returns {asserts frozen is false}\n */\nfunction assertUnfrozen(name, frozen) {\n  if (frozen) {\n    throw new Error(\n      'Cannot call `' +\n        name +\n        '` on a frozen processor.\\nCreate a new processor first, by calling it: use `processor()` instead of `processor`.'\n    )\n  }\n}\n\n/**\n * Assert `node` is a unist node.\n *\n * @param {unknown} node\n * @returns {asserts node is Node}\n */\nfunction assertNode(node) {\n  // `isPlainObj` unfortunately uses `any` instead of `unknown`.\n  // type-coverage:ignore-next-line\n  if (!isPlainObj(node) || typeof node.type !== 'string') {\n    throw new TypeError('Expected node, got `' + node + '`')\n    // Fine.\n  }\n}\n\n/**\n * Assert that `complete` is `true`.\n *\n * @param {string} name\n * @param {string} asyncName\n * @param {unknown} complete\n * @returns {asserts complete is true}\n */\nfunction assertDone(name, asyncName, complete) {\n  if (!complete) {\n    throw new Error(\n      '`' + name + '` finished async. Use `' + asyncName + '` instead'\n    )\n  }\n}\n\n/**\n * @param {Compatible | undefined} [value]\n * @returns {VFile}\n */\nfunction vfile(value) {\n  return looksLikeAVFile(value) ? value : new VFile(value)\n}\n\n/**\n * @param {Compatible | undefined} [value]\n * @returns {value is VFile}\n */\nfunction looksLikeAVFile(value) {\n  return Boolean(\n    value &&\n      typeof value === 'object' &&\n      'message' in value &&\n      'messages' in value\n  )\n}\n\n/**\n * @param {unknown} [value]\n * @returns {value is Value}\n */\nfunction looksLikeAValue(value) {\n  return typeof value === 'string' || isUint8Array(value)\n}\n\n/**\n * Assert `value` is an `Uint8Array`.\n *\n * @param {unknown} value\n *   thing.\n * @returns {value is Uint8Array}\n *   Whether `value` is an `Uint8Array`.\n */\nfunction isUint8Array(value) {\n  return Boolean(\n    value &&\n      typeof value === 'object' &&\n      'byteLength' in value &&\n      'byteOffset' in value\n  )\n}\n","export function deprecate(fn) {\n  return fn\n}\n\nexport function equal() {}\n\nexport function ok() {}\n\nexport function unreachable() {}\n","export default function isPlainObject(value) {\n\tif (typeof value !== 'object' || value === null) {\n\t\treturn false;\n\t}\n\n\tconst prototype = Object.getPrototypeOf(value);\n\treturn (prototype === null || prototype === Object.prototype || Object.getPrototypeOf(prototype) === null) && !(Symbol.toStringTag in value) && !(Symbol.iterator in value);\n}\n","// To do: remove `void`s\n// To do: remove `null` from output of our APIs, allow it as user APIs.\n\n/**\n * @typedef {(error?: Error | null | undefined, ...output: Array<any>) => void} Callback\n *   Callback.\n *\n * @typedef {(...input: Array<any>) => any} Middleware\n *   Ware.\n *\n * @typedef Pipeline\n *   Pipeline.\n * @property {Run} run\n *   Run the pipeline.\n * @property {Use} use\n *   Add middleware.\n *\n * @typedef {(...input: Array<any>) => void} Run\n *   Call all middleware.\n *\n *   Calls `done` on completion with either an error or the output of the\n *   last middleware.\n *\n *   > 👉 **Note**: as the length of input defines whether async functions get a\n *   > `next` function,\n *   > it’s recommended to keep `input` at one value normally.\n\n *\n * @typedef {(fn: Middleware) => Pipeline} Use\n *   Add middleware.\n */\n\n/**\n * Create new middleware.\n *\n * @returns {Pipeline}\n *   Pipeline.\n */\nexport function trough() {\n  /** @type {Array<Middleware>} */\n  const fns = []\n  /** @type {Pipeline} */\n  const pipeline = {run, use}\n\n  return pipeline\n\n  /** @type {Run} */\n  function run(...values) {\n    let middlewareIndex = -1\n    /** @type {Callback} */\n    const callback = values.pop()\n\n    if (typeof callback !== 'function') {\n      throw new TypeError('Expected function as last argument, not ' + callback)\n    }\n\n    next(null, ...values)\n\n    /**\n     * Run the next `fn`, or we’re done.\n     *\n     * @param {Error | null | undefined} error\n     * @param {Array<any>} output\n     */\n    function next(error, ...output) {\n      const fn = fns[++middlewareIndex]\n      let index = -1\n\n      if (error) {\n        callback(error)\n        return\n      }\n\n      // Copy non-nullish input into values.\n      while (++index < values.length) {\n        if (output[index] === null || output[index] === undefined) {\n          output[index] = values[index]\n        }\n      }\n\n      // Save the newly created `output` for the next call.\n      values = output\n\n      // Next or done.\n      if (fn) {\n        wrap(fn, next)(...output)\n      } else {\n        callback(null, ...output)\n      }\n    }\n  }\n\n  /** @type {Use} */\n  function use(middelware) {\n    if (typeof middelware !== 'function') {\n      throw new TypeError(\n        'Expected `middelware` to be a function, not ' + middelware\n      )\n    }\n\n    fns.push(middelware)\n    return pipeline\n  }\n}\n\n/**\n * Wrap `middleware` into a uniform interface.\n *\n * You can pass all input to the resulting function.\n * `callback` is then called with the output of `middleware`.\n *\n * If `middleware` accepts more arguments than the later given in input,\n * an extra `done` function is passed to it after that input,\n * which must be called by `middleware`.\n *\n * The first value in `input` is the main input value.\n * All other input values are the rest input values.\n * The values given to `callback` are the input values,\n * merged with every non-nullish output value.\n *\n * * if `middleware` throws an error,\n *   returns a promise that is rejected,\n *   or calls the given `done` function with an error,\n *   `callback` is called with that error\n * * if `middleware` returns a value or returns a promise that is resolved,\n *   that value is the main output value\n * * if `middleware` calls `done`,\n *   all non-nullish values except for the first one (the error) overwrite the\n *   output values\n *\n * @param {Middleware} middleware\n *   Function to wrap.\n * @param {Callback} callback\n *   Callback called with the output of `middleware`.\n * @returns {Run}\n *   Wrapped middleware.\n */\nexport function wrap(middleware, callback) {\n  /** @type {boolean} */\n  let called\n\n  return wrapped\n\n  /**\n   * Call `middleware`.\n   * @this {any}\n   * @param {Array<any>} parameters\n   * @returns {void}\n   */\n  function wrapped(...parameters) {\n    const fnExpectsCallback = middleware.length > parameters.length\n    /** @type {any} */\n    let result\n\n    if (fnExpectsCallback) {\n      parameters.push(done)\n    }\n\n    try {\n      result = middleware.apply(this, parameters)\n    } catch (error) {\n      const exception = /** @type {Error} */ (error)\n\n      // Well, this is quite the pickle.\n      // `middleware` received a callback and called it synchronously, but that\n      // threw an error.\n      // The only thing left to do is to throw the thing instead.\n      if (fnExpectsCallback && called) {\n        throw exception\n      }\n\n      return done(exception)\n    }\n\n    if (!fnExpectsCallback) {\n      if (result && result.then && typeof result.then === 'function') {\n        result.then(then, done)\n      } else if (result instanceof Error) {\n        done(result)\n      } else {\n        then(result)\n      }\n    }\n  }\n\n  /**\n   * Call `callback`, only once.\n   *\n   * @type {Callback}\n   */\n  function done(error, ...output) {\n    if (!called) {\n      called = true\n      callback(error, ...output)\n    }\n  }\n\n  /**\n   * Call `done` with one value.\n   *\n   * @param {any} [value]\n   */\n  function then(value) {\n    done(null, value)\n  }\n}\n","/**\n * @import {Node, Point, Position} from 'unist'\n */\n\n/**\n * @typedef {object & {type: string, position?: Position | undefined}} NodeLike\n *\n * @typedef Options\n *   Configuration.\n * @property {Array<Node> | null | undefined} [ancestors]\n *   Stack of (inclusive) ancestor nodes surrounding the message (optional).\n * @property {Error | null | undefined} [cause]\n *   Original error cause of the message (optional).\n * @property {Point | Position | null | undefined} [place]\n *   Place of message (optional).\n * @property {string | null | undefined} [ruleId]\n *   Category of message (optional, example: `'my-rule'`).\n * @property {string | null | undefined} [source]\n *   Namespace of who sent the message (optional, example: `'my-package'`).\n */\n\nimport {stringifyPosition} from 'unist-util-stringify-position'\n\n/**\n * Message.\n */\nexport class VFileMessage extends Error {\n  /**\n   * Create a message for `reason`.\n   *\n   * > 🪦 **Note**: also has obsolete signatures.\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Options | null | undefined} [options]\n   * @returns\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Node | NodeLike | null | undefined} parent\n   * @param {string | null | undefined} [origin]\n   * @returns\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Point | Position | null | undefined} place\n   * @param {string | null | undefined} [origin]\n   * @returns\n   *\n   * @overload\n   * @param {string} reason\n   * @param {string | null | undefined} [origin]\n   * @returns\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {Node | NodeLike | null | undefined} parent\n   * @param {string | null | undefined} [origin]\n   * @returns\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {Point | Position | null | undefined} place\n   * @param {string | null | undefined} [origin]\n   * @returns\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {string | null | undefined} [origin]\n   * @returns\n   *\n   * @param {Error | VFileMessage | string} causeOrReason\n   *   Reason for message, should use markdown.\n   * @param {Node | NodeLike | Options | Point | Position | string | null | undefined} [optionsOrParentOrPlace]\n   *   Configuration (optional).\n   * @param {string | null | undefined} [origin]\n   *   Place in code where the message originates (example:\n   *   `'my-package:my-rule'` or `'my-rule'`).\n   * @returns\n   *   Instance of `VFileMessage`.\n   */\n  // eslint-disable-next-line complexity\n  constructor(causeOrReason, optionsOrParentOrPlace, origin) {\n    super()\n\n    if (typeof optionsOrParentOrPlace === 'string') {\n      origin = optionsOrParentOrPlace\n      optionsOrParentOrPlace = undefined\n    }\n\n    /** @type {string} */\n    let reason = ''\n    /** @type {Options} */\n    let options = {}\n    let legacyCause = false\n\n    if (optionsOrParentOrPlace) {\n      // Point.\n      if (\n        'line' in optionsOrParentOrPlace &&\n        'column' in optionsOrParentOrPlace\n      ) {\n        options = {place: optionsOrParentOrPlace}\n      }\n      // Position.\n      else if (\n        'start' in optionsOrParentOrPlace &&\n        'end' in optionsOrParentOrPlace\n      ) {\n        options = {place: optionsOrParentOrPlace}\n      }\n      // Node.\n      else if ('type' in optionsOrParentOrPlace) {\n        options = {\n          ancestors: [optionsOrParentOrPlace],\n          place: optionsOrParentOrPlace.position\n        }\n      }\n      // Options.\n      else {\n        options = {...optionsOrParentOrPlace}\n      }\n    }\n\n    if (typeof causeOrReason === 'string') {\n      reason = causeOrReason\n    }\n    // Error.\n    else if (!options.cause && causeOrReason) {\n      legacyCause = true\n      reason = causeOrReason.message\n      options.cause = causeOrReason\n    }\n\n    if (!options.ruleId && !options.source && typeof origin === 'string') {\n      const index = origin.indexOf(':')\n\n      if (index === -1) {\n        options.ruleId = origin\n      } else {\n        options.source = origin.slice(0, index)\n        options.ruleId = origin.slice(index + 1)\n      }\n    }\n\n    if (!options.place && options.ancestors && options.ancestors) {\n      const parent = options.ancestors[options.ancestors.length - 1]\n\n      if (parent) {\n        options.place = parent.position\n      }\n    }\n\n    const start =\n      options.place && 'start' in options.place\n        ? options.place.start\n        : options.place\n\n    /**\n     * Stack of ancestor nodes surrounding the message.\n     *\n     * @type {Array<Node> | undefined}\n     */\n    this.ancestors = options.ancestors || undefined\n\n    /**\n     * Original error cause of the message.\n     *\n     * @type {Error | undefined}\n     */\n    this.cause = options.cause || undefined\n\n    /**\n     * Starting column of message.\n     *\n     * @type {number | undefined}\n     */\n    this.column = start ? start.column : undefined\n\n    /**\n     * State of problem.\n     *\n     * * `true` — error, file not usable\n     * * `false` — warning, change may be needed\n     * * `undefined` — change likely not needed\n     *\n     * @type {boolean | null | undefined}\n     */\n    this.fatal = undefined\n\n    /**\n     * Path of a file (used throughout the `VFile` ecosystem).\n     *\n     * @type {string | undefined}\n     */\n    this.file = ''\n\n    // Field from `Error`.\n    /**\n     * Reason for message.\n     *\n     * @type {string}\n     */\n    this.message = reason\n\n    /**\n     * Starting line of error.\n     *\n     * @type {number | undefined}\n     */\n    this.line = start ? start.line : undefined\n\n    // Field from `Error`.\n    /**\n     * Serialized positional info of message.\n     *\n     * On normal errors, this would be something like `ParseError`, buit in\n     * `VFile` messages we use this space to show where an error happened.\n     */\n    this.name = stringifyPosition(options.place) || '1:1'\n\n    /**\n     * Place of message.\n     *\n     * @type {Point | Position | undefined}\n     */\n    this.place = options.place || undefined\n\n    /**\n     * Reason for message, should use markdown.\n     *\n     * @type {string}\n     */\n    this.reason = this.message\n\n    /**\n     * Category of message (example: `'my-rule'`).\n     *\n     * @type {string | undefined}\n     */\n    this.ruleId = options.ruleId || undefined\n\n    /**\n     * Namespace of message (example: `'my-package'`).\n     *\n     * @type {string | undefined}\n     */\n    this.source = options.source || undefined\n\n    // Field from `Error`.\n    /**\n     * Stack of message.\n     *\n     * This is used by normal errors to show where something happened in\n     * programming code, irrelevant for `VFile` messages,\n     *\n     * @type {string}\n     */\n    this.stack =\n      legacyCause && options.cause && typeof options.cause.stack === 'string'\n        ? options.cause.stack\n        : ''\n\n    // The following fields are “well known”.\n    // Not standard.\n    // Feel free to add other non-standard fields to your messages.\n\n    /**\n     * Specify the source value that’s being reported, which is deemed\n     * incorrect.\n     *\n     * @type {string | undefined}\n     */\n    this.actual = undefined\n\n    /**\n     * Suggest acceptable values that can be used instead of `actual`.\n     *\n     * @type {Array<string> | undefined}\n     */\n    this.expected = undefined\n\n    /**\n     * Long form description of the message (you should use markdown).\n     *\n     * @type {string | undefined}\n     */\n    this.note = undefined\n\n    /**\n     * Link to docs for the message.\n     *\n     * > 👉 **Note**: this must be an absolute URL that can be passed as `x`\n     * > to `new URL(x)`.\n     *\n     * @type {string | undefined}\n     */\n    this.url = undefined\n  }\n}\n\nVFileMessage.prototype.file = ''\nVFileMessage.prototype.name = ''\nVFileMessage.prototype.reason = ''\nVFileMessage.prototype.message = ''\nVFileMessage.prototype.stack = ''\nVFileMessage.prototype.column = undefined\nVFileMessage.prototype.line = undefined\nVFileMessage.prototype.ancestors = undefined\nVFileMessage.prototype.cause = undefined\nVFileMessage.prototype.fatal = undefined\nVFileMessage.prototype.place = undefined\nVFileMessage.prototype.ruleId = undefined\nVFileMessage.prototype.source = undefined\n","/**\n * Checks if a value has the shape of a WHATWG URL object.\n *\n * Using a symbol or instanceof would not be able to recognize URL objects\n * coming from other implementations (e.g. in Electron), so instead we are\n * checking some well known properties for a lack of a better test.\n *\n * We use `href` and `protocol` as they are the only properties that are\n * easy to retrieve and calculate due to the lazy nature of the getters.\n *\n * We check for auth attribute to distinguish legacy url instance with\n * WHATWG URL instance.\n *\n * @param {unknown} fileUrlOrPath\n *   File path or URL.\n * @returns {fileUrlOrPath is URL}\n *   Whether it’s a URL.\n */\n// From: <https://github.com/nodejs/node/blob/6a3403c/lib/internal/url.js#L720>\nexport function isUrl(fileUrlOrPath) {\n  return Boolean(\n    fileUrlOrPath !== null &&\n      typeof fileUrlOrPath === 'object' &&\n      'href' in fileUrlOrPath &&\n      fileUrlOrPath.href &&\n      'protocol' in fileUrlOrPath &&\n      fileUrlOrPath.protocol &&\n      // @ts-expect-error: indexing is fine.\n      fileUrlOrPath.auth === undefined\n  )\n}\n","/**\n * @import {Node, Point, Position} from 'unist'\n * @import {Options as MessageOptions} from 'vfile-message'\n * @import {Compatible, Data, Map, Options, Value} from 'vfile'\n */\n\n/**\n * @typedef {object & {type: string, position?: Position | undefined}} NodeLike\n */\n\nimport {VFileMessage} from 'vfile-message'\nimport {minpath} from '#minpath'\nimport {minproc} from '#minproc'\nimport {urlToPath, isUrl} from '#minurl'\n\n/**\n * Order of setting (least specific to most), we need this because otherwise\n * `{stem: 'a', path: '~/b.js'}` would throw, as a path is needed before a\n * stem can be set.\n */\nconst order = /** @type {const} */ ([\n  'history',\n  'path',\n  'basename',\n  'stem',\n  'extname',\n  'dirname'\n])\n\nexport class VFile {\n  /**\n   * Create a new virtual file.\n   *\n   * `options` is treated as:\n   *\n   * *   `string` or `Uint8Array` — `{value: options}`\n   * *   `URL` — `{path: options}`\n   * *   `VFile` — shallow copies its data over to the new file\n   * *   `object` — all fields are shallow copied over to the new file\n   *\n   * Path related fields are set in the following order (least specific to\n   * most specific): `history`, `path`, `basename`, `stem`, `extname`,\n   * `dirname`.\n   *\n   * You cannot set `dirname` or `extname` without setting either `history`,\n   * `path`, `basename`, or `stem` too.\n   *\n   * @param {Compatible | null | undefined} [value]\n   *   File value.\n   * @returns\n   *   New instance.\n   */\n  constructor(value) {\n    /** @type {Options | VFile} */\n    let options\n\n    if (!value) {\n      options = {}\n    } else if (isUrl(value)) {\n      options = {path: value}\n    } else if (typeof value === 'string' || isUint8Array(value)) {\n      options = {value}\n    } else {\n      options = value\n    }\n\n    /* eslint-disable no-unused-expressions */\n\n    /**\n     * Base of `path` (default: `process.cwd()` or `'/'` in browsers).\n     *\n     * @type {string}\n     */\n    // Prevent calling `cwd` (which could be expensive) if it’s not needed;\n    // the empty string will be overridden in the next block.\n    this.cwd = 'cwd' in options ? '' : minproc.cwd()\n\n    /**\n     * Place to store custom info (default: `{}`).\n     *\n     * It’s OK to store custom data directly on the file but moving it to\n     * `data` is recommended.\n     *\n     * @type {Data}\n     */\n    this.data = {}\n\n    /**\n     * List of file paths the file moved between.\n     *\n     * The first is the original path and the last is the current path.\n     *\n     * @type {Array<string>}\n     */\n    this.history = []\n\n    /**\n     * List of messages associated with the file.\n     *\n     * @type {Array<VFileMessage>}\n     */\n    this.messages = []\n\n    /**\n     * Raw value.\n     *\n     * @type {Value}\n     */\n    this.value\n\n    // The below are non-standard, they are “well-known”.\n    // As in, used in several tools.\n    /**\n     * Source map.\n     *\n     * This type is equivalent to the `RawSourceMap` type from the `source-map`\n     * module.\n     *\n     * @type {Map | null | undefined}\n     */\n    this.map\n\n    /**\n     * Custom, non-string, compiled, representation.\n     *\n     * This is used by unified to store non-string results.\n     * One example is when turning markdown into React nodes.\n     *\n     * @type {unknown}\n     */\n    this.result\n\n    /**\n     * Whether a file was saved to disk.\n     *\n     * This is used by vfile reporters.\n     *\n     * @type {boolean}\n     */\n    this.stored\n    /* eslint-enable no-unused-expressions */\n\n    // Set path related properties in the correct order.\n    let index = -1\n\n    while (++index < order.length) {\n      const field = order[index]\n\n      // Note: we specifically use `in` instead of `hasOwnProperty` to accept\n      // `vfile`s too.\n      if (\n        field in options &&\n        options[field] !== undefined &&\n        options[field] !== null\n      ) {\n        // @ts-expect-error: TS doesn’t understand basic reality.\n        this[field] = field === 'history' ? [...options[field]] : options[field]\n      }\n    }\n\n    /** @type {string} */\n    let field\n\n    // Set non-path related properties.\n    for (field in options) {\n      // @ts-expect-error: fine to set other things.\n      if (!order.includes(field)) {\n        // @ts-expect-error: fine to set other things.\n        this[field] = options[field]\n      }\n    }\n  }\n\n  /**\n   * Get the basename (including extname) (example: `'index.min.js'`).\n   *\n   * @returns {string | undefined}\n   *   Basename.\n   */\n  get basename() {\n    return typeof this.path === 'string'\n      ? minpath.basename(this.path)\n      : undefined\n  }\n\n  /**\n   * Set basename (including extname) (`'index.min.js'`).\n   *\n   * Cannot contain path separators (`'/'` on unix, macOS, and browsers, `'\\'`\n   * on windows).\n   * Cannot be nullified (use `file.path = file.dirname` instead).\n   *\n   * @param {string} basename\n   *   Basename.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  set basename(basename) {\n    assertNonEmpty(basename, 'basename')\n    assertPart(basename, 'basename')\n    this.path = minpath.join(this.dirname || '', basename)\n  }\n\n  /**\n   * Get the parent path (example: `'~'`).\n   *\n   * @returns {string | undefined}\n   *   Dirname.\n   */\n  get dirname() {\n    return typeof this.path === 'string'\n      ? minpath.dirname(this.path)\n      : undefined\n  }\n\n  /**\n   * Set the parent path (example: `'~'`).\n   *\n   * Cannot be set if there’s no `path` yet.\n   *\n   * @param {string | undefined} dirname\n   *   Dirname.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  set dirname(dirname) {\n    assertPath(this.basename, 'dirname')\n    this.path = minpath.join(dirname || '', this.basename)\n  }\n\n  /**\n   * Get the extname (including dot) (example: `'.js'`).\n   *\n   * @returns {string | undefined}\n   *   Extname.\n   */\n  get extname() {\n    return typeof this.path === 'string'\n      ? minpath.extname(this.path)\n      : undefined\n  }\n\n  /**\n   * Set the extname (including dot) (example: `'.js'`).\n   *\n   * Cannot contain path separators (`'/'` on unix, macOS, and browsers, `'\\'`\n   * on windows).\n   * Cannot be set if there’s no `path` yet.\n   *\n   * @param {string | undefined} extname\n   *   Extname.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  set extname(extname) {\n    assertPart(extname, 'extname')\n    assertPath(this.dirname, 'extname')\n\n    if (extname) {\n      if (extname.codePointAt(0) !== 46 /* `.` */) {\n        throw new Error('`extname` must start with `.`')\n      }\n\n      if (extname.includes('.', 1)) {\n        throw new Error('`extname` cannot contain multiple dots')\n      }\n    }\n\n    this.path = minpath.join(this.dirname, this.stem + (extname || ''))\n  }\n\n  /**\n   * Get the full path (example: `'~/index.min.js'`).\n   *\n   * @returns {string}\n   *   Path.\n   */\n  get path() {\n    return this.history[this.history.length - 1]\n  }\n\n  /**\n   * Set the full path (example: `'~/index.min.js'`).\n   *\n   * Cannot be nullified.\n   * You can set a file URL (a `URL` object with a `file:` protocol) which will\n   * be turned into a path with `url.fileURLToPath`.\n   *\n   * @param {URL | string} path\n   *   Path.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  set path(path) {\n    if (isUrl(path)) {\n      path = urlToPath(path)\n    }\n\n    assertNonEmpty(path, 'path')\n\n    if (this.path !== path) {\n      this.history.push(path)\n    }\n  }\n\n  /**\n   * Get the stem (basename w/o extname) (example: `'index.min'`).\n   *\n   * @returns {string | undefined}\n   *   Stem.\n   */\n  get stem() {\n    return typeof this.path === 'string'\n      ? minpath.basename(this.path, this.extname)\n      : undefined\n  }\n\n  /**\n   * Set the stem (basename w/o extname) (example: `'index.min'`).\n   *\n   * Cannot contain path separators (`'/'` on unix, macOS, and browsers, `'\\'`\n   * on windows).\n   * Cannot be nullified (use `file.path = file.dirname` instead).\n   *\n   * @param {string} stem\n   *   Stem.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  set stem(stem) {\n    assertNonEmpty(stem, 'stem')\n    assertPart(stem, 'stem')\n    this.path = minpath.join(this.dirname || '', stem + (this.extname || ''))\n  }\n\n  // Normal prototypal methods.\n  /**\n   * Create a fatal message for `reason` associated with the file.\n   *\n   * The `fatal` field of the message is set to `true` (error; file not usable)\n   * and the `file` field is set to the current file path.\n   * The message is added to the `messages` field on `file`.\n   *\n   * > 🪦 **Note**: also has obsolete signatures.\n   *\n   * @overload\n   * @param {string} reason\n   * @param {MessageOptions | null | undefined} [options]\n   * @returns {never}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Node | NodeLike | null | undefined} parent\n   * @param {string | null | undefined} [origin]\n   * @returns {never}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Point | Position | null | undefined} place\n   * @param {string | null | undefined} [origin]\n   * @returns {never}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {string | null | undefined} [origin]\n   * @returns {never}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {Node | NodeLike | null | undefined} parent\n   * @param {string | null | undefined} [origin]\n   * @returns {never}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {Point | Position | null | undefined} place\n   * @param {string | null | undefined} [origin]\n   * @returns {never}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {string | null | undefined} [origin]\n   * @returns {never}\n   *\n   * @param {Error | VFileMessage | string} causeOrReason\n   *   Reason for message, should use markdown.\n   * @param {Node | NodeLike | MessageOptions | Point | Position | string | null | undefined} [optionsOrParentOrPlace]\n   *   Configuration (optional).\n   * @param {string | null | undefined} [origin]\n   *   Place in code where the message originates (example:\n   *   `'my-package:my-rule'` or `'my-rule'`).\n   * @returns {never}\n   *   Never.\n   * @throws {VFileMessage}\n   *   Message.\n   */\n  fail(causeOrReason, optionsOrParentOrPlace, origin) {\n    // @ts-expect-error: the overloads are fine.\n    const message = this.message(causeOrReason, optionsOrParentOrPlace, origin)\n\n    message.fatal = true\n\n    throw message\n  }\n\n  /**\n   * Create an info message for `reason` associated with the file.\n   *\n   * The `fatal` field of the message is set to `undefined` (info; change\n   * likely not needed) and the `file` field is set to the current file path.\n   * The message is added to the `messages` field on `file`.\n   *\n   * > 🪦 **Note**: also has obsolete signatures.\n   *\n   * @overload\n   * @param {string} reason\n   * @param {MessageOptions | null | undefined} [options]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Node | NodeLike | null | undefined} parent\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Point | Position | null | undefined} place\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {Node | NodeLike | null | undefined} parent\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {Point | Position | null | undefined} place\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @param {Error | VFileMessage | string} causeOrReason\n   *   Reason for message, should use markdown.\n   * @param {Node | NodeLike | MessageOptions | Point | Position | string | null | undefined} [optionsOrParentOrPlace]\n   *   Configuration (optional).\n   * @param {string | null | undefined} [origin]\n   *   Place in code where the message originates (example:\n   *   `'my-package:my-rule'` or `'my-rule'`).\n   * @returns {VFileMessage}\n   *   Message.\n   */\n  info(causeOrReason, optionsOrParentOrPlace, origin) {\n    // @ts-expect-error: the overloads are fine.\n    const message = this.message(causeOrReason, optionsOrParentOrPlace, origin)\n\n    message.fatal = undefined\n\n    return message\n  }\n\n  /**\n   * Create a message for `reason` associated with the file.\n   *\n   * The `fatal` field of the message is set to `false` (warning; change may be\n   * needed) and the `file` field is set to the current file path.\n   * The message is added to the `messages` field on `file`.\n   *\n   * > 🪦 **Note**: also has obsolete signatures.\n   *\n   * @overload\n   * @param {string} reason\n   * @param {MessageOptions | null | undefined} [options]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Node | NodeLike | null | undefined} parent\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Point | Position | null | undefined} place\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {Node | NodeLike | null | undefined} parent\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {Point | Position | null | undefined} place\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @param {Error | VFileMessage | string} causeOrReason\n   *   Reason for message, should use markdown.\n   * @param {Node | NodeLike | MessageOptions | Point | Position | string | null | undefined} [optionsOrParentOrPlace]\n   *   Configuration (optional).\n   * @param {string | null | undefined} [origin]\n   *   Place in code where the message originates (example:\n   *   `'my-package:my-rule'` or `'my-rule'`).\n   * @returns {VFileMessage}\n   *   Message.\n   */\n  message(causeOrReason, optionsOrParentOrPlace, origin) {\n    const message = new VFileMessage(\n      // @ts-expect-error: the overloads are fine.\n      causeOrReason,\n      optionsOrParentOrPlace,\n      origin\n    )\n\n    if (this.path) {\n      message.name = this.path + ':' + message.name\n      message.file = this.path\n    }\n\n    message.fatal = false\n\n    this.messages.push(message)\n\n    return message\n  }\n\n  /**\n   * Serialize the file.\n   *\n   * > **Note**: which encodings are supported depends on the engine.\n   * > For info on Node.js, see:\n   * > <https://nodejs.org/api/util.html#whatwg-supported-encodings>.\n   *\n   * @param {string | null | undefined} [encoding='utf8']\n   *   Character encoding to understand `value` as when it’s a `Uint8Array`\n   *   (default: `'utf-8'`).\n   * @returns {string}\n   *   Serialized file.\n   */\n  toString(encoding) {\n    if (this.value === undefined) {\n      return ''\n    }\n\n    if (typeof this.value === 'string') {\n      return this.value\n    }\n\n    const decoder = new TextDecoder(encoding || undefined)\n    return decoder.decode(this.value)\n  }\n}\n\n/**\n * Assert that `part` is not a path (as in, does not contain `path.sep`).\n *\n * @param {string | null | undefined} part\n *   File path part.\n * @param {string} name\n *   Part name.\n * @returns {undefined}\n *   Nothing.\n */\nfunction assertPart(part, name) {\n  if (part && part.includes(minpath.sep)) {\n    throw new Error(\n      '`' + name + '` cannot be a path: did not expect `' + minpath.sep + '`'\n    )\n  }\n}\n\n/**\n * Assert that `part` is not empty.\n *\n * @param {string | undefined} part\n *   Thing.\n * @param {string} name\n *   Part name.\n * @returns {asserts part is string}\n *   Nothing.\n */\nfunction assertNonEmpty(part, name) {\n  if (!part) {\n    throw new Error('`' + name + '` cannot be empty')\n  }\n}\n\n/**\n * Assert `path` exists.\n *\n * @param {string | undefined} path\n *   Path.\n * @param {string} name\n *   Dependency name.\n * @returns {asserts path is string}\n *   Nothing.\n */\nfunction assertPath(path, name) {\n  if (!path) {\n    throw new Error('Setting `' + name + '` requires `path` to be set too')\n  }\n}\n\n/**\n * Assert `value` is an `Uint8Array`.\n *\n * @param {unknown} value\n *   thing.\n * @returns {value is Uint8Array}\n *   Whether `value` is an `Uint8Array`.\n */\nfunction isUint8Array(value) {\n  return Boolean(\n    value &&\n      typeof value === 'object' &&\n      'byteLength' in value &&\n      'byteOffset' in value\n  )\n}\n","export const CallableInstance =\n  /**\n   * @type {new <Parameters extends Array<unknown>, Result>(property: string | symbol) => (...parameters: Parameters) => Result}\n   */\n  (\n    /** @type {unknown} */\n    (\n      /**\n       * @this {Function}\n       * @param {string | symbol} property\n       * @returns {(...parameters: Array<unknown>) => unknown}\n       */\n      function (property) {\n        const self = this\n        const constr = self.constructor\n        const proto = /** @type {Record<string | symbol, Function>} */ (\n          // Prototypes do exist.\n          // type-coverage:ignore-next-line\n          constr.prototype\n        )\n        const value = proto[property]\n        /** @type {(...parameters: Array<unknown>) => unknown} */\n        const apply = function () {\n          return value.apply(apply, arguments)\n        }\n\n        Object.setPrototypeOf(apply, proto)\n\n        // Not needed for us in `unified`: we only call this on the `copy`\n        // function,\n        // and we don't need to add its fields (`length`, `name`)\n        // over.\n        // See also: GH-246.\n        // const names = Object.getOwnPropertyNames(value)\n        //\n        // for (const p of names) {\n        //   const descriptor = Object.getOwnPropertyDescriptor(value, p)\n        //   if (descriptor) Object.defineProperty(apply, p, descriptor)\n        // }\n\n        return apply\n      }\n    )\n  )\n","// Note: types exposed from `index.d.ts`\nimport remarkParse from 'remark-parse'\nimport remarkStringify from 'remark-stringify'\nimport {unified} from 'unified'\n\n/**\n * Create a new unified processor that already uses `remark-parse` and\n * `remark-stringify`.\n */\nexport const remark = unified().use(remarkParse).use(remarkStringify).freeze()\n","/**\n * Count how often a character (or substring) is used in a string.\n *\n * @param {string} value\n *   Value to search in.\n * @param {string} character\n *   Character (or substring) to look for.\n * @return {number}\n *   Number of times `character` occurred in `value`.\n */\nexport function ccount(value, character) {\n  const source = String(value)\n\n  if (typeof character !== 'string') {\n    throw new TypeError('Expected character')\n  }\n\n  let count = 0\n  let index = source.indexOf(character)\n\n  while (index !== -1) {\n    count++\n    index = source.indexOf(character, index + character.length)\n  }\n\n  return count\n}\n","export default function escapeStringRegexp(string) {\n\tif (typeof string !== 'string') {\n\t\tthrow new TypeError('Expected a string');\n\t}\n\n\t// Escape characters with special meaning either inside or outside character sets.\n\t// Use a simple backslash escape when it’s always valid, and a `\\xnn` escape when the simpler form would be disallowed by Unicode patterns’ stricter grammar.\n\treturn string\n\t\t.replace(/[|\\\\{}()[\\]^$+*?.]/g, '\\\\$&')\n\t\t.replace(/-/g, '\\\\x2d');\n}\n","/**\n * @import {Nodes, Parents, PhrasingContent, Root, Text} from 'mdast'\n * @import {BuildVisitor, Test, VisitorResult} from 'unist-util-visit-parents'\n */\n\n/**\n * @typedef RegExpMatchObject\n *   Info on the match.\n * @property {number} index\n *   The index of the search at which the result was found.\n * @property {string} input\n *   A copy of the search string in the text node.\n * @property {[...Array<Parents>, Text]} stack\n *   All ancestors of the text node, where the last node is the text itself.\n *\n * @typedef {RegExp | string} Find\n *   Pattern to find.\n *\n *   Strings are escaped and then turned into global expressions.\n *\n * @typedef {Array<FindAndReplaceTuple>} FindAndReplaceList\n *   Several find and replaces, in array form.\n *\n * @typedef {[Find, Replace?]} FindAndReplaceTuple\n *   Find and replace in tuple form.\n *\n * @typedef {ReplaceFunction | string | null | undefined} Replace\n *   Thing to replace with.\n *\n * @callback ReplaceFunction\n *   Callback called when a search matches.\n * @param {...any} parameters\n *   The parameters are the result of corresponding search expression:\n *\n *   * `value` (`string`) — whole match\n *   * `...capture` (`Array<string>`) — matches from regex capture groups\n *   * `match` (`RegExpMatchObject`) — info on the match\n * @returns {Array<PhrasingContent> | PhrasingContent | string | false | null | undefined}\n *   Thing to replace with.\n *\n *   * when `null`, `undefined`, `''`, remove the match\n *   * …or when `false`, do not replace at all\n *   * …or when `string`, replace with a text node of that value\n *   * …or when `Node` or `Array<Node>`, replace with those nodes\n *\n * @typedef {[RegExp, ReplaceFunction]} Pair\n *   Normalized find and replace.\n *\n * @typedef {Array<Pair>} Pairs\n *   All find and replaced.\n *\n * @typedef Options\n *   Configuration.\n * @property {Test | null | undefined} [ignore]\n *   Test for which nodes to ignore (optional).\n */\n\nimport escape from 'escape-string-regexp'\nimport {visitParents} from 'unist-util-visit-parents'\nimport {convert} from 'unist-util-is'\n\n/**\n * Find patterns in a tree and replace them.\n *\n * The algorithm searches the tree in *preorder* for complete values in `Text`\n * nodes.\n * Partial matches are not supported.\n *\n * @param {Nodes} tree\n *   Tree to change.\n * @param {FindAndReplaceList | FindAndReplaceTuple} list\n *   Patterns to find.\n * @param {Options | null | undefined} [options]\n *   Configuration (when `find` is not `Find`).\n * @returns {undefined}\n *   Nothing.\n */\nexport function findAndReplace(tree, list, options) {\n  const settings = options || {}\n  const ignored = convert(settings.ignore || [])\n  const pairs = toPairs(list)\n  let pairIndex = -1\n\n  while (++pairIndex < pairs.length) {\n    visitParents(tree, 'text', visitor)\n  }\n\n  /** @type {BuildVisitor<Root, 'text'>} */\n  function visitor(node, parents) {\n    let index = -1\n    /** @type {Parents | undefined} */\n    let grandparent\n\n    while (++index < parents.length) {\n      const parent = parents[index]\n      /** @type {Array<Nodes> | undefined} */\n      const siblings = grandparent ? grandparent.children : undefined\n\n      if (\n        ignored(\n          parent,\n          siblings ? siblings.indexOf(parent) : undefined,\n          grandparent\n        )\n      ) {\n        return\n      }\n\n      grandparent = parent\n    }\n\n    if (grandparent) {\n      return handler(node, parents)\n    }\n  }\n\n  /**\n   * Handle a text node which is not in an ignored parent.\n   *\n   * @param {Text} node\n   *   Text node.\n   * @param {Array<Parents>} parents\n   *   Parents.\n   * @returns {VisitorResult}\n   *   Result.\n   */\n  function handler(node, parents) {\n    const parent = parents[parents.length - 1]\n    const find = pairs[pairIndex][0]\n    const replace = pairs[pairIndex][1]\n    let start = 0\n    /** @type {Array<Nodes>} */\n    const siblings = parent.children\n    const index = siblings.indexOf(node)\n    let change = false\n    /** @type {Array<PhrasingContent>} */\n    let nodes = []\n\n    find.lastIndex = 0\n\n    let match = find.exec(node.value)\n\n    while (match) {\n      const position = match.index\n      /** @type {RegExpMatchObject} */\n      const matchObject = {\n        index: match.index,\n        input: match.input,\n        stack: [...parents, node]\n      }\n      let value = replace(...match, matchObject)\n\n      if (typeof value === 'string') {\n        value = value.length > 0 ? {type: 'text', value} : undefined\n      }\n\n      // It wasn’t a match after all.\n      if (value === false) {\n        // False acts as if there was no match.\n        // So we need to reset `lastIndex`, which currently being at the end of\n        // the current match, to the beginning.\n        find.lastIndex = position + 1\n      } else {\n        if (start !== position) {\n          nodes.push({\n            type: 'text',\n            value: node.value.slice(start, position)\n          })\n        }\n\n        if (Array.isArray(value)) {\n          nodes.push(...value)\n        } else if (value) {\n          nodes.push(value)\n        }\n\n        start = position + match[0].length\n        change = true\n      }\n\n      if (!find.global) {\n        break\n      }\n\n      match = find.exec(node.value)\n    }\n\n    if (change) {\n      if (start < node.value.length) {\n        nodes.push({type: 'text', value: node.value.slice(start)})\n      }\n\n      parent.children.splice(index, 1, ...nodes)\n    } else {\n      nodes = [node]\n    }\n\n    return index + nodes.length\n  }\n}\n\n/**\n * Turn a tuple or a list of tuples into pairs.\n *\n * @param {FindAndReplaceList | FindAndReplaceTuple} tupleOrList\n *   Schema.\n * @returns {Pairs}\n *   Clean pairs.\n */\nfunction toPairs(tupleOrList) {\n  /** @type {Pairs} */\n  const result = []\n\n  if (!Array.isArray(tupleOrList)) {\n    throw new TypeError('Expected find and replace tuple or list of tuples')\n  }\n\n  /** @type {FindAndReplaceList} */\n  // @ts-expect-error: correct.\n  const list =\n    !tupleOrList[0] || Array.isArray(tupleOrList[0])\n      ? tupleOrList\n      : [tupleOrList]\n\n  let index = -1\n\n  while (++index < list.length) {\n    const tuple = list[index]\n    result.push([toExpression(tuple[0]), toFunction(tuple[1])])\n  }\n\n  return result\n}\n\n/**\n * Turn a find into an expression.\n *\n * @param {Find} find\n *   Find.\n * @returns {RegExp}\n *   Expression.\n */\nfunction toExpression(find) {\n  return typeof find === 'string' ? new RegExp(escape(find), 'g') : find\n}\n\n/**\n * Turn a replace into a function.\n *\n * @param {Replace} replace\n *   Replace.\n * @returns {ReplaceFunction}\n *   Function.\n */\nfunction toFunction(replace) {\n  return typeof replace === 'function'\n    ? replace\n    : function () {\n        return replace\n      }\n}\n","/**\n * @import {RegExpMatchObject, ReplaceFunction} from 'mdast-util-find-and-replace'\n * @import {CompileContext, Extension as FromMarkdownExtension, Handle as FromMarkdownHandle, Transform as FromMarkdownTransform} from 'mdast-util-from-markdown'\n * @import {ConstructName, Options as ToMarkdownExtension} from 'mdast-util-to-markdown'\n * @import {Link, PhrasingContent} from 'mdast'\n */\n\nimport {ccount} from 'ccount'\nimport {ok as assert} from 'devlop'\nimport {unicodePunctuation, unicodeWhitespace} from 'micromark-util-character'\nimport {findAndReplace} from 'mdast-util-find-and-replace'\n\n/** @type {ConstructName} */\nconst inConstruct = 'phrasing'\n/** @type {Array<ConstructName>} */\nconst notInConstruct = ['autolink', 'link', 'image', 'label']\n\n/**\n * Create an extension for `mdast-util-from-markdown` to enable GFM autolink\n * literals in markdown.\n *\n * @returns {FromMarkdownExtension}\n *   Extension for `mdast-util-to-markdown` to enable GFM autolink literals.\n */\nexport function gfmAutolinkLiteralFromMarkdown() {\n  return {\n    transforms: [transformGfmAutolinkLiterals],\n    enter: {\n      literalAutolink: enterLiteralAutolink,\n      literalAutolinkEmail: enterLiteralAutolinkValue,\n      literalAutolinkHttp: enterLiteralAutolinkValue,\n      literalAutolinkWww: enterLiteralAutolinkValue\n    },\n    exit: {\n      literalAutolink: exitLiteralAutolink,\n      literalAutolinkEmail: exitLiteralAutolinkEmail,\n      literalAutolinkHttp: exitLiteralAutolinkHttp,\n      literalAutolinkWww: exitLiteralAutolinkWww\n    }\n  }\n}\n\n/**\n * Create an extension for `mdast-util-to-markdown` to enable GFM autolink\n * literals in markdown.\n *\n * @returns {ToMarkdownExtension}\n *   Extension for `mdast-util-to-markdown` to enable GFM autolink literals.\n */\nexport function gfmAutolinkLiteralToMarkdown() {\n  return {\n    unsafe: [\n      {\n        character: '@',\n        before: '[+\\\\-.\\\\w]',\n        after: '[\\\\-.\\\\w]',\n        inConstruct,\n        notInConstruct\n      },\n      {\n        character: '.',\n        before: '[Ww]',\n        after: '[\\\\-.\\\\w]',\n        inConstruct,\n        notInConstruct\n      },\n      {\n        character: ':',\n        before: '[ps]',\n        after: '\\\\/',\n        inConstruct,\n        notInConstruct\n      }\n    ]\n  }\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterLiteralAutolink(token) {\n  this.enter({type: 'link', title: null, url: '', children: []}, token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterLiteralAutolinkValue(token) {\n  this.config.enter.autolinkProtocol.call(this, token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitLiteralAutolinkHttp(token) {\n  this.config.exit.autolinkProtocol.call(this, token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitLiteralAutolinkWww(token) {\n  this.config.exit.data.call(this, token)\n  const node = this.stack[this.stack.length - 1]\n  assert(node.type === 'link')\n  node.url = 'http://' + this.sliceSerialize(token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitLiteralAutolinkEmail(token) {\n  this.config.exit.autolinkEmail.call(this, token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitLiteralAutolink(token) {\n  this.exit(token)\n}\n\n/** @type {FromMarkdownTransform} */\nfunction transformGfmAutolinkLiterals(tree) {\n  findAndReplace(\n    tree,\n    [\n      [/(https?:\\/\\/|www(?=\\.))([-.\\w]+)([^ \\t\\r\\n]*)/gi, findUrl],\n      [/(?<=^|\\s|\\p{P}|\\p{S})([-.\\w+]+)@([-\\w]+(?:\\.[-\\w]+)+)/gu, findEmail]\n    ],\n    {ignore: ['link', 'linkReference']}\n  )\n}\n\n/**\n * @type {ReplaceFunction}\n * @param {string} _\n * @param {string} protocol\n * @param {string} domain\n * @param {string} path\n * @param {RegExpMatchObject} match\n * @returns {Array<PhrasingContent> | Link | false}\n */\n// eslint-disable-next-line max-params\nfunction findUrl(_, protocol, domain, path, match) {\n  let prefix = ''\n\n  // Not an expected previous character.\n  if (!previous(match)) {\n    return false\n  }\n\n  // Treat `www` as part of the domain.\n  if (/^w/i.test(protocol)) {\n    domain = protocol + domain\n    protocol = ''\n    prefix = 'http://'\n  }\n\n  if (!isCorrectDomain(domain)) {\n    return false\n  }\n\n  const parts = splitUrl(domain + path)\n\n  if (!parts[0]) return false\n\n  /** @type {Link} */\n  const result = {\n    type: 'link',\n    title: null,\n    url: prefix + protocol + parts[0],\n    children: [{type: 'text', value: protocol + parts[0]}]\n  }\n\n  if (parts[1]) {\n    return [result, {type: 'text', value: parts[1]}]\n  }\n\n  return result\n}\n\n/**\n * @type {ReplaceFunction}\n * @param {string} _\n * @param {string} atext\n * @param {string} label\n * @param {RegExpMatchObject} match\n * @returns {Link | false}\n */\nfunction findEmail(_, atext, label, match) {\n  if (\n    // Not an expected previous character.\n    !previous(match, true) ||\n    // Label ends in not allowed character.\n    /[-\\d_]$/.test(label)\n  ) {\n    return false\n  }\n\n  return {\n    type: 'link',\n    title: null,\n    url: 'mailto:' + atext + '@' + label,\n    children: [{type: 'text', value: atext + '@' + label}]\n  }\n}\n\n/**\n * @param {string} domain\n * @returns {boolean}\n */\nfunction isCorrectDomain(domain) {\n  const parts = domain.split('.')\n\n  if (\n    parts.length < 2 ||\n    (parts[parts.length - 1] &&\n      (/_/.test(parts[parts.length - 1]) ||\n        !/[a-zA-Z\\d]/.test(parts[parts.length - 1]))) ||\n    (parts[parts.length - 2] &&\n      (/_/.test(parts[parts.length - 2]) ||\n        !/[a-zA-Z\\d]/.test(parts[parts.length - 2])))\n  ) {\n    return false\n  }\n\n  return true\n}\n\n/**\n * @param {string} url\n * @returns {[string, string | undefined]}\n */\nfunction splitUrl(url) {\n  const trailExec = /[!\"&'),.:;<>?\\]}]+$/.exec(url)\n\n  if (!trailExec) {\n    return [url, undefined]\n  }\n\n  url = url.slice(0, trailExec.index)\n\n  let trail = trailExec[0]\n  let closingParenIndex = trail.indexOf(')')\n  const openingParens = ccount(url, '(')\n  let closingParens = ccount(url, ')')\n\n  while (closingParenIndex !== -1 && openingParens > closingParens) {\n    url += trail.slice(0, closingParenIndex + 1)\n    trail = trail.slice(closingParenIndex + 1)\n    closingParenIndex = trail.indexOf(')')\n    closingParens++\n  }\n\n  return [url, trail]\n}\n\n/**\n * @param {RegExpMatchObject} match\n * @param {boolean | null | undefined} [email=false]\n * @returns {boolean}\n */\nfunction previous(match, email) {\n  const code = match.input.charCodeAt(match.index - 1)\n\n  return (\n    (match.index === 0 ||\n      unicodeWhitespace(code) ||\n      unicodePunctuation(code)) &&\n    // If it’s an email, the previous character should not be a slash.\n    (!email || code !== 47)\n  )\n}\n","/**\n * @import {\n *   CompileContext,\n *   Extension as FromMarkdownExtension,\n *   Handle as FromMarkdownHandle\n * } from 'mdast-util-from-markdown'\n * @import {ToMarkdownOptions} from 'mdast-util-gfm-footnote'\n * @import {\n *   Handle as ToMarkdownHandle,\n *   Map,\n *   Options as ToMarkdownExtension\n * } from 'mdast-util-to-markdown'\n * @import {FootnoteDefinition, FootnoteReference} from 'mdast'\n */\n\nimport {ok as assert} from 'devlop'\nimport {normalizeIdentifier} from 'micromark-util-normalize-identifier'\n\nfootnoteReference.peek = footnoteReferencePeek\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterFootnoteCallString() {\n  this.buffer()\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterFootnoteCall(token) {\n  this.enter({type: 'footnoteReference', identifier: '', label: ''}, token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterFootnoteDefinitionLabelString() {\n  this.buffer()\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterFootnoteDefinition(token) {\n  this.enter(\n    {type: 'footnoteDefinition', identifier: '', label: '', children: []},\n    token\n  )\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitFootnoteCallString(token) {\n  const label = this.resume()\n  const node = this.stack[this.stack.length - 1]\n  assert(node.type === 'footnoteReference')\n  node.identifier = normalizeIdentifier(\n    this.sliceSerialize(token)\n  ).toLowerCase()\n  node.label = label\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitFootnoteCall(token) {\n  this.exit(token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitFootnoteDefinitionLabelString(token) {\n  const label = this.resume()\n  const node = this.stack[this.stack.length - 1]\n  assert(node.type === 'footnoteDefinition')\n  node.identifier = normalizeIdentifier(\n    this.sliceSerialize(token)\n  ).toLowerCase()\n  node.label = label\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitFootnoteDefinition(token) {\n  this.exit(token)\n}\n\n/** @type {ToMarkdownHandle} */\nfunction footnoteReferencePeek() {\n  return '['\n}\n\n/**\n * @type {ToMarkdownHandle}\n * @param {FootnoteReference} node\n */\nfunction footnoteReference(node, _, state, info) {\n  const tracker = state.createTracker(info)\n  let value = tracker.move('[^')\n  const exit = state.enter('footnoteReference')\n  const subexit = state.enter('reference')\n  value += tracker.move(\n    state.safe(state.associationId(node), {after: ']', before: value})\n  )\n  subexit()\n  exit()\n  value += tracker.move(']')\n  return value\n}\n\n/**\n * Create an extension for `mdast-util-from-markdown` to enable GFM footnotes\n * in markdown.\n *\n * @returns {FromMarkdownExtension}\n *   Extension for `mdast-util-from-markdown`.\n */\nexport function gfmFootnoteFromMarkdown() {\n  return {\n    enter: {\n      gfmFootnoteCallString: enterFootnoteCallString,\n      gfmFootnoteCall: enterFootnoteCall,\n      gfmFootnoteDefinitionLabelString: enterFootnoteDefinitionLabelString,\n      gfmFootnoteDefinition: enterFootnoteDefinition\n    },\n    exit: {\n      gfmFootnoteCallString: exitFootnoteCallString,\n      gfmFootnoteCall: exitFootnoteCall,\n      gfmFootnoteDefinitionLabelString: exitFootnoteDefinitionLabelString,\n      gfmFootnoteDefinition: exitFootnoteDefinition\n    }\n  }\n}\n\n/**\n * Create an extension for `mdast-util-to-markdown` to enable GFM footnotes\n * in markdown.\n *\n * @param {ToMarkdownOptions | null | undefined} [options]\n *   Configuration (optional).\n * @returns {ToMarkdownExtension}\n *   Extension for `mdast-util-to-markdown`.\n */\nexport function gfmFootnoteToMarkdown(options) {\n  // To do: next major: change default.\n  let firstLineBlank = false\n\n  if (options && options.firstLineBlank) {\n    firstLineBlank = true\n  }\n\n  return {\n    handlers: {footnoteDefinition, footnoteReference},\n    // This is on by default already.\n    unsafe: [{character: '[', inConstruct: ['label', 'phrasing', 'reference']}]\n  }\n\n  /**\n   * @type {ToMarkdownHandle}\n   * @param {FootnoteDefinition} node\n   */\n  function footnoteDefinition(node, _, state, info) {\n    const tracker = state.createTracker(info)\n    let value = tracker.move('[^')\n    const exit = state.enter('footnoteDefinition')\n    const subexit = state.enter('label')\n    value += tracker.move(\n      state.safe(state.associationId(node), {before: value, after: ']'})\n    )\n    subexit()\n\n    value += tracker.move(']:')\n\n    if (node.children && node.children.length > 0) {\n      tracker.shift(4)\n\n      value += tracker.move(\n        (firstLineBlank ? '\\n' : ' ') +\n          state.indentLines(\n            state.containerFlow(node, tracker.current()),\n            firstLineBlank ? mapAll : mapExceptFirst\n          )\n      )\n    }\n\n    exit()\n\n    return value\n  }\n}\n\n/** @type {Map} */\nfunction mapExceptFirst(line, index, blank) {\n  return index === 0 ? line : mapAll(line, index, blank)\n}\n\n/** @type {Map} */\nfunction mapAll(line, index, blank) {\n  return (blank ? '' : '    ') + line\n}\n","/**\n * @typedef {import('mdast').Delete} Delete\n *\n * @typedef {import('mdast-util-from-markdown').CompileContext} CompileContext\n * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension\n * @typedef {import('mdast-util-from-markdown').Handle} FromMarkdownHandle\n *\n * @typedef {import('mdast-util-to-markdown').ConstructName} ConstructName\n * @typedef {import('mdast-util-to-markdown').Handle} ToMarkdownHandle\n * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownExtension\n */\n\n/**\n * List of constructs that occur in phrasing (paragraphs, headings), but cannot\n * contain strikethrough.\n * So they sort of cancel each other out.\n * Note: could use a better name.\n *\n * Note: keep in sync with: <https://github.com/syntax-tree/mdast-util-to-markdown/blob/8ce8dbf/lib/unsafe.js#L14>\n *\n * @type {Array<ConstructName>}\n */\nconst constructsWithoutStrikethrough = [\n  'autolink',\n  'destinationLiteral',\n  'destinationRaw',\n  'reference',\n  'titleQuote',\n  'titleApostrophe'\n]\n\nhandleDelete.peek = peekDelete\n\n/**\n * Create an extension for `mdast-util-from-markdown` to enable GFM\n * strikethrough in markdown.\n *\n * @returns {FromMarkdownExtension}\n *   Extension for `mdast-util-from-markdown` to enable GFM strikethrough.\n */\nexport function gfmStrikethroughFromMarkdown() {\n  return {\n    canContainEols: ['delete'],\n    enter: {strikethrough: enterStrikethrough},\n    exit: {strikethrough: exitStrikethrough}\n  }\n}\n\n/**\n * Create an extension for `mdast-util-to-markdown` to enable GFM\n * strikethrough in markdown.\n *\n * @returns {ToMarkdownExtension}\n *   Extension for `mdast-util-to-markdown` to enable GFM strikethrough.\n */\nexport function gfmStrikethroughToMarkdown() {\n  return {\n    unsafe: [\n      {\n        character: '~',\n        inConstruct: 'phrasing',\n        notInConstruct: constructsWithoutStrikethrough\n      }\n    ],\n    handlers: {delete: handleDelete}\n  }\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterStrikethrough(token) {\n  this.enter({type: 'delete', children: []}, token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitStrikethrough(token) {\n  this.exit(token)\n}\n\n/**\n * @type {ToMarkdownHandle}\n * @param {Delete} node\n */\nfunction handleDelete(node, _, state, info) {\n  const tracker = state.createTracker(info)\n  const exit = state.enter('strikethrough')\n  let value = tracker.move('~~')\n  value += state.containerPhrasing(node, {\n    ...tracker.current(),\n    before: value,\n    after: '~'\n  })\n  value += tracker.move('~~')\n  exit()\n  return value\n}\n\n/** @type {ToMarkdownHandle} */\nfunction peekDelete() {\n  return '~'\n}\n","// To do: next major: remove.\n/**\n * @typedef {Options} MarkdownTableOptions\n *   Configuration.\n */\n\n/**\n * @typedef Options\n *   Configuration.\n * @property {boolean | null | undefined} [alignDelimiters=true]\n *   Whether to align the delimiters (default: `true`);\n *   they are aligned by default:\n *\n *   ```markdown\n *   | Alpha | B     |\n *   | ----- | ----- |\n *   | C     | Delta |\n *   ```\n *\n *   Pass `false` to make them staggered:\n *\n *   ```markdown\n *   | Alpha | B |\n *   | - | - |\n *   | C | Delta |\n *   ```\n * @property {ReadonlyArray<string | null | undefined> | string | null | undefined} [align]\n *   How to align columns (default: `''`);\n *   one style for all columns or styles for their respective columns;\n *   each style is either `'l'` (left), `'r'` (right), or `'c'` (center);\n *   other values are treated as `''`, which doesn’t place the colon in the\n *   alignment row but does align left;\n *   *only the lowercased first character is used, so `Right` is fine.*\n * @property {boolean | null | undefined} [delimiterEnd=true]\n *   Whether to end each row with the delimiter (default: `true`).\n *\n *   > 👉 **Note**: please don’t use this: it could create fragile structures\n *   > that aren’t understandable to some markdown parsers.\n *\n *   When `true`, there are ending delimiters:\n *\n *   ```markdown\n *   | Alpha | B     |\n *   | ----- | ----- |\n *   | C     | Delta |\n *   ```\n *\n *   When `false`, there are no ending delimiters:\n *\n *   ```markdown\n *   | Alpha | B\n *   | ----- | -----\n *   | C     | Delta\n *   ```\n * @property {boolean | null | undefined} [delimiterStart=true]\n *   Whether to begin each row with the delimiter (default: `true`).\n *\n *   > 👉 **Note**: please don’t use this: it could create fragile structures\n *   > that aren’t understandable to some markdown parsers.\n *\n *   When `true`, there are starting delimiters:\n *\n *   ```markdown\n *   | Alpha | B     |\n *   | ----- | ----- |\n *   | C     | Delta |\n *   ```\n *\n *   When `false`, there are no starting delimiters:\n *\n *   ```markdown\n *   Alpha | B     |\n *   ----- | ----- |\n *   C     | Delta |\n *   ```\n * @property {boolean | null | undefined} [padding=true]\n *   Whether to add a space of padding between delimiters and cells\n *   (default: `true`).\n *\n *   When `true`, there is padding:\n *\n *   ```markdown\n *   | Alpha | B     |\n *   | ----- | ----- |\n *   | C     | Delta |\n *   ```\n *\n *   When `false`, there is no padding:\n *\n *   ```markdown\n *   |Alpha|B    |\n *   |-----|-----|\n *   |C    |Delta|\n *   ```\n * @property {((value: string) => number) | null | undefined} [stringLength]\n *   Function to detect the length of table cell content (optional);\n *   this is used when aligning the delimiters (`|`) between table cells;\n *   full-width characters and emoji mess up delimiter alignment when viewing\n *   the markdown source;\n *   to fix this, you can pass this function,\n *   which receives the cell content and returns its “visible” size;\n *   note that what is and isn’t visible depends on where the text is displayed.\n *\n *   Without such a function, the following:\n *\n *   ```js\n *   markdownTable([\n *     ['Alpha', 'Bravo'],\n *     ['中文', 'Charlie'],\n *     ['👩‍❤️‍👩', 'Delta']\n *   ])\n *   ```\n *\n *   Yields:\n *\n *   ```markdown\n *   | Alpha | Bravo |\n *   | - | - |\n *   | 中文 | Charlie |\n *   | 👩‍❤️‍👩 | Delta |\n *   ```\n *\n *   With [`string-width`](https://github.com/sindresorhus/string-width):\n *\n *   ```js\n *   import stringWidth from 'string-width'\n *\n *   markdownTable(\n *     [\n *       ['Alpha', 'Bravo'],\n *       ['中文', 'Charlie'],\n *       ['👩‍❤️‍👩', 'Delta']\n *     ],\n *     {stringLength: stringWidth}\n *   )\n *   ```\n *\n *   Yields:\n *\n *   ```markdown\n *   | Alpha | Bravo   |\n *   | ----- | ------- |\n *   | 中文  | Charlie |\n *   | 👩‍❤️‍👩    | Delta   |\n *   ```\n */\n\n/**\n * @param {string} value\n *   Cell value.\n * @returns {number}\n *   Cell size.\n */\nfunction defaultStringLength(value) {\n  return value.length\n}\n\n/**\n * Generate a markdown\n * ([GFM](https://docs.github.com/en/github/writing-on-github/working-with-advanced-formatting/organizing-information-with-tables))\n * table.\n *\n * @param {ReadonlyArray<ReadonlyArray<string | null | undefined>>} table\n *   Table data (matrix of strings).\n * @param {Readonly<Options> | null | undefined} [options]\n *   Configuration (optional).\n * @returns {string}\n *   Result.\n */\nexport function markdownTable(table, options) {\n  const settings = options || {}\n  // To do: next major: change to spread.\n  const align = (settings.align || []).concat()\n  const stringLength = settings.stringLength || defaultStringLength\n  /** @type {Array<number>} Character codes as symbols for alignment per column. */\n  const alignments = []\n  /** @type {Array<Array<string>>} Cells per row. */\n  const cellMatrix = []\n  /** @type {Array<Array<number>>} Sizes of each cell per row. */\n  const sizeMatrix = []\n  /** @type {Array<number>} */\n  const longestCellByColumn = []\n  let mostCellsPerRow = 0\n  let rowIndex = -1\n\n  // This is a superfluous loop if we don’t align delimiters, but otherwise we’d\n  // do superfluous work when aligning, so optimize for aligning.\n  while (++rowIndex < table.length) {\n    /** @type {Array<string>} */\n    const row = []\n    /** @type {Array<number>} */\n    const sizes = []\n    let columnIndex = -1\n\n    if (table[rowIndex].length > mostCellsPerRow) {\n      mostCellsPerRow = table[rowIndex].length\n    }\n\n    while (++columnIndex < table[rowIndex].length) {\n      const cell = serialize(table[rowIndex][columnIndex])\n\n      if (settings.alignDelimiters !== false) {\n        const size = stringLength(cell)\n        sizes[columnIndex] = size\n\n        if (\n          longestCellByColumn[columnIndex] === undefined ||\n          size > longestCellByColumn[columnIndex]\n        ) {\n          longestCellByColumn[columnIndex] = size\n        }\n      }\n\n      row.push(cell)\n    }\n\n    cellMatrix[rowIndex] = row\n    sizeMatrix[rowIndex] = sizes\n  }\n\n  // Figure out which alignments to use.\n  let columnIndex = -1\n\n  if (typeof align === 'object' && 'length' in align) {\n    while (++columnIndex < mostCellsPerRow) {\n      alignments[columnIndex] = toAlignment(align[columnIndex])\n    }\n  } else {\n    const code = toAlignment(align)\n\n    while (++columnIndex < mostCellsPerRow) {\n      alignments[columnIndex] = code\n    }\n  }\n\n  // Inject the alignment row.\n  columnIndex = -1\n  /** @type {Array<string>} */\n  const row = []\n  /** @type {Array<number>} */\n  const sizes = []\n\n  while (++columnIndex < mostCellsPerRow) {\n    const code = alignments[columnIndex]\n    let before = ''\n    let after = ''\n\n    if (code === 99 /* `c` */) {\n      before = ':'\n      after = ':'\n    } else if (code === 108 /* `l` */) {\n      before = ':'\n    } else if (code === 114 /* `r` */) {\n      after = ':'\n    }\n\n    // There *must* be at least one hyphen-minus in each alignment cell.\n    let size =\n      settings.alignDelimiters === false\n        ? 1\n        : Math.max(\n            1,\n            longestCellByColumn[columnIndex] - before.length - after.length\n          )\n\n    const cell = before + '-'.repeat(size) + after\n\n    if (settings.alignDelimiters !== false) {\n      size = before.length + size + after.length\n\n      if (size > longestCellByColumn[columnIndex]) {\n        longestCellByColumn[columnIndex] = size\n      }\n\n      sizes[columnIndex] = size\n    }\n\n    row[columnIndex] = cell\n  }\n\n  // Inject the alignment row.\n  cellMatrix.splice(1, 0, row)\n  sizeMatrix.splice(1, 0, sizes)\n\n  rowIndex = -1\n  /** @type {Array<string>} */\n  const lines = []\n\n  while (++rowIndex < cellMatrix.length) {\n    const row = cellMatrix[rowIndex]\n    const sizes = sizeMatrix[rowIndex]\n    columnIndex = -1\n    /** @type {Array<string>} */\n    const line = []\n\n    while (++columnIndex < mostCellsPerRow) {\n      const cell = row[columnIndex] || ''\n      let before = ''\n      let after = ''\n\n      if (settings.alignDelimiters !== false) {\n        const size =\n          longestCellByColumn[columnIndex] - (sizes[columnIndex] || 0)\n        const code = alignments[columnIndex]\n\n        if (code === 114 /* `r` */) {\n          before = ' '.repeat(size)\n        } else if (code === 99 /* `c` */) {\n          if (size % 2) {\n            before = ' '.repeat(size / 2 + 0.5)\n            after = ' '.repeat(size / 2 - 0.5)\n          } else {\n            before = ' '.repeat(size / 2)\n            after = before\n          }\n        } else {\n          after = ' '.repeat(size)\n        }\n      }\n\n      if (settings.delimiterStart !== false && !columnIndex) {\n        line.push('|')\n      }\n\n      if (\n        settings.padding !== false &&\n        // Don’t add the opening space if we’re not aligning and the cell is\n        // empty: there will be a closing space.\n        !(settings.alignDelimiters === false && cell === '') &&\n        (settings.delimiterStart !== false || columnIndex)\n      ) {\n        line.push(' ')\n      }\n\n      if (settings.alignDelimiters !== false) {\n        line.push(before)\n      }\n\n      line.push(cell)\n\n      if (settings.alignDelimiters !== false) {\n        line.push(after)\n      }\n\n      if (settings.padding !== false) {\n        line.push(' ')\n      }\n\n      if (\n        settings.delimiterEnd !== false ||\n        columnIndex !== mostCellsPerRow - 1\n      ) {\n        line.push('|')\n      }\n    }\n\n    lines.push(\n      settings.delimiterEnd === false\n        ? line.join('').replace(/ +$/, '')\n        : line.join('')\n    )\n  }\n\n  return lines.join('\\n')\n}\n\n/**\n * @param {string | null | undefined} [value]\n *   Value to serialize.\n * @returns {string}\n *   Result.\n */\nfunction serialize(value) {\n  return value === null || value === undefined ? '' : String(value)\n}\n\n/**\n * @param {string | null | undefined} value\n *   Value.\n * @returns {number}\n *   Alignment.\n */\nfunction toAlignment(value) {\n  const code = typeof value === 'string' ? value.codePointAt(0) : 0\n\n  return code === 67 /* `C` */ || code === 99 /* `c` */\n    ? 99 /* `c` */\n    : code === 76 /* `L` */ || code === 108 /* `l` */\n      ? 108 /* `l` */\n      : code === 82 /* `R` */ || code === 114 /* `r` */\n        ? 114 /* `r` */\n        : 0\n}\n","/**\n * @typedef {import('mdast').InlineCode} InlineCode\n * @typedef {import('mdast').Table} Table\n * @typedef {import('mdast').TableCell} TableCell\n * @typedef {import('mdast').TableRow} TableRow\n *\n * @typedef {import('markdown-table').Options} MarkdownTableOptions\n *\n * @typedef {import('mdast-util-from-markdown').CompileContext} CompileContext\n * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension\n * @typedef {import('mdast-util-from-markdown').Handle} FromMarkdownHandle\n *\n * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownExtension\n * @typedef {import('mdast-util-to-markdown').Handle} ToMarkdownHandle\n * @typedef {import('mdast-util-to-markdown').State} State\n * @typedef {import('mdast-util-to-markdown').Info} Info\n */\n\n/**\n * @typedef Options\n *   Configuration.\n * @property {boolean | null | undefined} [tableCellPadding=true]\n *   Whether to add a space of padding between delimiters and cells (default:\n *   `true`).\n * @property {boolean | null | undefined} [tablePipeAlign=true]\n *   Whether to align the delimiters (default: `true`).\n * @property {MarkdownTableOptions['stringLength'] | null | undefined} [stringLength]\n *   Function to detect the length of table cell content, used when aligning\n *   the delimiters between cells (optional).\n */\n\nimport {ok as assert} from 'devlop'\nimport {markdownTable} from 'markdown-table'\nimport {defaultHandlers} from 'mdast-util-to-markdown'\n\n/**\n * Create an extension for `mdast-util-from-markdown` to enable GFM tables in\n * markdown.\n *\n * @returns {FromMarkdownExtension}\n *   Extension for `mdast-util-from-markdown` to enable GFM tables.\n */\nexport function gfmTableFromMarkdown() {\n  return {\n    enter: {\n      table: enterTable,\n      tableData: enterCell,\n      tableHeader: enterCell,\n      tableRow: enterRow\n    },\n    exit: {\n      codeText: exitCodeText,\n      table: exitTable,\n      tableData: exit,\n      tableHeader: exit,\n      tableRow: exit\n    }\n  }\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterTable(token) {\n  const align = token._align\n  assert(align, 'expected `_align` on table')\n  this.enter(\n    {\n      type: 'table',\n      align: align.map(function (d) {\n        return d === 'none' ? null : d\n      }),\n      children: []\n    },\n    token\n  )\n  this.data.inTable = true\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitTable(token) {\n  this.exit(token)\n  this.data.inTable = undefined\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterRow(token) {\n  this.enter({type: 'tableRow', children: []}, token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exit(token) {\n  this.exit(token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterCell(token) {\n  this.enter({type: 'tableCell', children: []}, token)\n}\n\n// Overwrite the default code text data handler to unescape escaped pipes when\n// they are in tables.\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitCodeText(token) {\n  let value = this.resume()\n\n  if (this.data.inTable) {\n    value = value.replace(/\\\\([\\\\|])/g, replace)\n  }\n\n  const node = this.stack[this.stack.length - 1]\n  assert(node.type === 'inlineCode')\n  node.value = value\n  this.exit(token)\n}\n\n/**\n * @param {string} $0\n * @param {string} $1\n * @returns {string}\n */\nfunction replace($0, $1) {\n  // Pipes work, backslashes don’t (but can’t escape pipes).\n  return $1 === '|' ? $1 : $0\n}\n\n/**\n * Create an extension for `mdast-util-to-markdown` to enable GFM tables in\n * markdown.\n *\n * @param {Options | null | undefined} [options]\n *   Configuration.\n * @returns {ToMarkdownExtension}\n *   Extension for `mdast-util-to-markdown` to enable GFM tables.\n */\nexport function gfmTableToMarkdown(options) {\n  const settings = options || {}\n  const padding = settings.tableCellPadding\n  const alignDelimiters = settings.tablePipeAlign\n  const stringLength = settings.stringLength\n  const around = padding ? ' ' : '|'\n\n  return {\n    unsafe: [\n      {character: '\\r', inConstruct: 'tableCell'},\n      {character: '\\n', inConstruct: 'tableCell'},\n      // A pipe, when followed by a tab or space (padding), or a dash or colon\n      // (unpadded delimiter row), could result in a table.\n      {atBreak: true, character: '|', after: '[\\t :-]'},\n      // A pipe in a cell must be encoded.\n      {character: '|', inConstruct: 'tableCell'},\n      // A colon must be followed by a dash, in which case it could start a\n      // delimiter row.\n      {atBreak: true, character: ':', after: '-'},\n      // A delimiter row can also start with a dash, when followed by more\n      // dashes, a colon, or a pipe.\n      // This is a stricter version than the built in check for lists, thematic\n      // breaks, and setex heading underlines though:\n      // <https://github.com/syntax-tree/mdast-util-to-markdown/blob/51a2038/lib/unsafe.js#L57>\n      {atBreak: true, character: '-', after: '[:|-]'}\n    ],\n    handlers: {\n      inlineCode: inlineCodeWithTable,\n      table: handleTable,\n      tableCell: handleTableCell,\n      tableRow: handleTableRow\n    }\n  }\n\n  /**\n   * @type {ToMarkdownHandle}\n   * @param {Table} node\n   */\n  function handleTable(node, _, state, info) {\n    return serializeData(handleTableAsData(node, state, info), node.align)\n  }\n\n  /**\n   * This function isn’t really used normally, because we handle rows at the\n   * table level.\n   * But, if someone passes in a table row, this ensures we make somewhat sense.\n   *\n   * @type {ToMarkdownHandle}\n   * @param {TableRow} node\n   */\n  function handleTableRow(node, _, state, info) {\n    const row = handleTableRowAsData(node, state, info)\n    const value = serializeData([row])\n    // `markdown-table` will always add an align row\n    return value.slice(0, value.indexOf('\\n'))\n  }\n\n  /**\n   * @type {ToMarkdownHandle}\n   * @param {TableCell} node\n   */\n  function handleTableCell(node, _, state, info) {\n    const exit = state.enter('tableCell')\n    const subexit = state.enter('phrasing')\n    const value = state.containerPhrasing(node, {\n      ...info,\n      before: around,\n      after: around\n    })\n    subexit()\n    exit()\n    return value\n  }\n\n  /**\n   * @param {Array<Array<string>>} matrix\n   * @param {Array<string | null | undefined> | null | undefined} [align]\n   */\n  function serializeData(matrix, align) {\n    return markdownTable(matrix, {\n      align,\n      // @ts-expect-error: `markdown-table` types should support `null`.\n      alignDelimiters,\n      // @ts-expect-error: `markdown-table` types should support `null`.\n      padding,\n      // @ts-expect-error: `markdown-table` types should support `null`.\n      stringLength\n    })\n  }\n\n  /**\n   * @param {Table} node\n   * @param {State} state\n   * @param {Info} info\n   */\n  function handleTableAsData(node, state, info) {\n    const children = node.children\n    let index = -1\n    /** @type {Array<Array<string>>} */\n    const result = []\n    const subexit = state.enter('table')\n\n    while (++index < children.length) {\n      result[index] = handleTableRowAsData(children[index], state, info)\n    }\n\n    subexit()\n\n    return result\n  }\n\n  /**\n   * @param {TableRow} node\n   * @param {State} state\n   * @param {Info} info\n   */\n  function handleTableRowAsData(node, state, info) {\n    const children = node.children\n    let index = -1\n    /** @type {Array<string>} */\n    const result = []\n    const subexit = state.enter('tableRow')\n\n    while (++index < children.length) {\n      // Note: the positional info as used here is incorrect.\n      // Making it correct would be impossible due to aligning cells?\n      // And it would need copy/pasting `markdown-table` into this project.\n      result[index] = handleTableCell(children[index], node, state, info)\n    }\n\n    subexit()\n\n    return result\n  }\n\n  /**\n   * @type {ToMarkdownHandle}\n   * @param {InlineCode} node\n   */\n  function inlineCodeWithTable(node, parent, state) {\n    let value = defaultHandlers.inlineCode(node, parent, state)\n\n    if (state.stack.includes('tableCell')) {\n      value = value.replace(/\\|/g, '\\\\$&')\n    }\n\n    return value\n  }\n}\n","/**\n * @typedef {import('mdast').ListItem} ListItem\n * @typedef {import('mdast').Paragraph} Paragraph\n * @typedef {import('mdast-util-from-markdown').CompileContext} CompileContext\n * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension\n * @typedef {import('mdast-util-from-markdown').Handle} FromMarkdownHandle\n * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownExtension\n * @typedef {import('mdast-util-to-markdown').Handle} ToMarkdownHandle\n */\n\nimport {ok as assert} from 'devlop'\nimport {defaultHandlers} from 'mdast-util-to-markdown'\n\n/**\n * Create an extension for `mdast-util-from-markdown` to enable GFM task\n * list items in markdown.\n *\n * @returns {FromMarkdownExtension}\n *   Extension for `mdast-util-from-markdown` to enable GFM task list items.\n */\nexport function gfmTaskListItemFromMarkdown() {\n  return {\n    exit: {\n      taskListCheckValueChecked: exitCheck,\n      taskListCheckValueUnchecked: exitCheck,\n      paragraph: exitParagraphWithTaskListItem\n    }\n  }\n}\n\n/**\n * Create an extension for `mdast-util-to-markdown` to enable GFM task list\n * items in markdown.\n *\n * @returns {ToMarkdownExtension}\n *   Extension for `mdast-util-to-markdown` to enable GFM task list items.\n */\nexport function gfmTaskListItemToMarkdown() {\n  return {\n    unsafe: [{atBreak: true, character: '-', after: '[:|-]'}],\n    handlers: {listItem: listItemWithTaskListItem}\n  }\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitCheck(token) {\n  // We’re always in a paragraph, in a list item.\n  const node = this.stack[this.stack.length - 2]\n  assert(node.type === 'listItem')\n  node.checked = token.type === 'taskListCheckValueChecked'\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitParagraphWithTaskListItem(token) {\n  const parent = this.stack[this.stack.length - 2]\n\n  if (\n    parent &&\n    parent.type === 'listItem' &&\n    typeof parent.checked === 'boolean'\n  ) {\n    const node = this.stack[this.stack.length - 1]\n    assert(node.type === 'paragraph')\n    const head = node.children[0]\n\n    if (head && head.type === 'text') {\n      const siblings = parent.children\n      let index = -1\n      /** @type {Paragraph | undefined} */\n      let firstParaghraph\n\n      while (++index < siblings.length) {\n        const sibling = siblings[index]\n        if (sibling.type === 'paragraph') {\n          firstParaghraph = sibling\n          break\n        }\n      }\n\n      if (firstParaghraph === node) {\n        // Must start with a space or a tab.\n        head.value = head.value.slice(1)\n\n        if (head.value.length === 0) {\n          node.children.shift()\n        } else if (\n          node.position &&\n          head.position &&\n          typeof head.position.start.offset === 'number'\n        ) {\n          head.position.start.column++\n          head.position.start.offset++\n          node.position.start = Object.assign({}, head.position.start)\n        }\n      }\n    }\n  }\n\n  this.exit(token)\n}\n\n/**\n * @type {ToMarkdownHandle}\n * @param {ListItem} node\n */\nfunction listItemWithTaskListItem(node, parent, state, info) {\n  const head = node.children[0]\n  const checkable =\n    typeof node.checked === 'boolean' && head && head.type === 'paragraph'\n  const checkbox = '[' + (node.checked ? 'x' : ' ') + '] '\n  const tracker = state.createTracker(info)\n\n  if (checkable) {\n    tracker.move(checkbox)\n  }\n\n  let value = defaultHandlers.listItem(node, parent, state, {\n    ...info,\n    ...tracker.current()\n  })\n\n  if (checkable) {\n    value = value.replace(/^(?:[*+-]|\\d+\\.)([\\r\\n]| {1,3})/, check)\n  }\n\n  return value\n\n  /**\n   * @param {string} $0\n   * @returns {string}\n   */\n  function check($0) {\n    return $0 + checkbox\n  }\n}\n","/**\n * @import {Extension as FromMarkdownExtension} from 'mdast-util-from-markdown'\n * @import {Options} from 'mdast-util-gfm'\n * @import {Options as ToMarkdownExtension} from 'mdast-util-to-markdown'\n */\n\nimport {\n  gfmAutolinkLiteralFromMarkdown,\n  gfmAutolinkLiteralToMarkdown\n} from 'mdast-util-gfm-autolink-literal'\nimport {\n  gfmFootnoteFromMarkdown,\n  gfmFootnoteToMarkdown\n} from 'mdast-util-gfm-footnote'\nimport {\n  gfmStrikethroughFromMarkdown,\n  gfmStrikethroughToMarkdown\n} from 'mdast-util-gfm-strikethrough'\nimport {gfmTableFromMarkdown, gfmTableToMarkdown} from 'mdast-util-gfm-table'\nimport {\n  gfmTaskListItemFromMarkdown,\n  gfmTaskListItemToMarkdown\n} from 'mdast-util-gfm-task-list-item'\n\n/**\n * Create an extension for `mdast-util-from-markdown` to enable GFM (autolink\n * literals, footnotes, strikethrough, tables, tasklists).\n *\n * @returns {Array<FromMarkdownExtension>}\n *   Extension for `mdast-util-from-markdown` to enable GFM (autolink literals,\n *   footnotes, strikethrough, tables, tasklists).\n */\nexport function gfmFromMarkdown() {\n  return [\n    gfmAutolinkLiteralFromMarkdown(),\n    gfmFootnoteFromMarkdown(),\n    gfmStrikethroughFromMarkdown(),\n    gfmTableFromMarkdown(),\n    gfmTaskListItemFromMarkdown()\n  ]\n}\n\n/**\n * Create an extension for `mdast-util-to-markdown` to enable GFM (autolink\n * literals, footnotes, strikethrough, tables, tasklists).\n *\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n * @returns {ToMarkdownExtension}\n *   Extension for `mdast-util-to-markdown` to enable GFM (autolink literals,\n *   footnotes, strikethrough, tables, tasklists).\n */\nexport function gfmToMarkdown(options) {\n  return {\n    extensions: [\n      gfmAutolinkLiteralToMarkdown(),\n      gfmFootnoteToMarkdown(options),\n      gfmStrikethroughToMarkdown(),\n      gfmTableToMarkdown(options),\n      gfmTaskListItemToMarkdown()\n    ]\n  }\n}\n","/**\n * @import {Code, ConstructRecord, Event, Extension, Previous, State, TokenizeContext, Tokenizer} from 'micromark-util-types'\n */\n\nimport { asciiAlpha, asciiAlphanumeric, asciiControl, markdownLineEndingOrSpace, unicodePunctuation, unicodeWhitespace } from 'micromark-util-character';\nconst wwwPrefix = {\n  tokenize: tokenizeWwwPrefix,\n  partial: true\n};\nconst domain = {\n  tokenize: tokenizeDomain,\n  partial: true\n};\nconst path = {\n  tokenize: tokenizePath,\n  partial: true\n};\nconst trail = {\n  tokenize: tokenizeTrail,\n  partial: true\n};\nconst emailDomainDotTrail = {\n  tokenize: tokenizeEmailDomainDotTrail,\n  partial: true\n};\nconst wwwAutolink = {\n  name: 'wwwAutolink',\n  tokenize: tokenizeWwwAutolink,\n  previous: previousWww\n};\nconst protocolAutolink = {\n  name: 'protocolAutolink',\n  tokenize: tokenizeProtocolAutolink,\n  previous: previousProtocol\n};\nconst emailAutolink = {\n  name: 'emailAutolink',\n  tokenize: tokenizeEmailAutolink,\n  previous: previousEmail\n};\n\n/** @type {ConstructRecord} */\nconst text = {};\n\n/**\n * Create an extension for `micromark` to support GitHub autolink literal\n * syntax.\n *\n * @returns {Extension}\n *   Extension for `micromark` that can be passed in `extensions` to enable GFM\n *   autolink literal syntax.\n */\nexport function gfmAutolinkLiteral() {\n  return {\n    text\n  };\n}\n\n/** @type {Code} */\nlet code = 48;\n\n// Add alphanumerics.\nwhile (code < 123) {\n  text[code] = emailAutolink;\n  code++;\n  if (code === 58) code = 65;else if (code === 91) code = 97;\n}\ntext[43] = emailAutolink;\ntext[45] = emailAutolink;\ntext[46] = emailAutolink;\ntext[95] = emailAutolink;\ntext[72] = [emailAutolink, protocolAutolink];\ntext[104] = [emailAutolink, protocolAutolink];\ntext[87] = [emailAutolink, wwwAutolink];\ntext[119] = [emailAutolink, wwwAutolink];\n\n// To do: perform email autolink literals on events, afterwards.\n// That’s where `markdown-rs` and `cmark-gfm` perform it.\n// It should look for `@`, then for atext backwards, and then for a label\n// forwards.\n// To do: `mailto:`, `xmpp:` protocol as prefix.\n\n/**\n * Email autolink literal.\n *\n * ```markdown\n * > | a contact@example.org b\n *       ^^^^^^^^^^^^^^^^^^^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeEmailAutolink(effects, ok, nok) {\n  const self = this;\n  /** @type {boolean | undefined} */\n  let dot;\n  /** @type {boolean} */\n  let data;\n  return start;\n\n  /**\n   * Start of email autolink literal.\n   *\n   * ```markdown\n   * > | a contact@example.org b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (!gfmAtext(code) || !previousEmail.call(self, self.previous) || previousUnbalanced(self.events)) {\n      return nok(code);\n    }\n    effects.enter('literalAutolink');\n    effects.enter('literalAutolinkEmail');\n    return atext(code);\n  }\n\n  /**\n   * In email atext.\n   *\n   * ```markdown\n   * > | a contact@example.org b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atext(code) {\n    if (gfmAtext(code)) {\n      effects.consume(code);\n      return atext;\n    }\n    if (code === 64) {\n      effects.consume(code);\n      return emailDomain;\n    }\n    return nok(code);\n  }\n\n  /**\n   * In email domain.\n   *\n   * The reference code is a bit overly complex as it handles the `@`, of which\n   * there may be just one.\n   * Source: <https://github.com/github/cmark-gfm/blob/ef1cfcb/extensions/autolink.c#L318>\n   *\n   * ```markdown\n   * > | a contact@example.org b\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailDomain(code) {\n    // Dot followed by alphanumerical (not `-` or `_`).\n    if (code === 46) {\n      return effects.check(emailDomainDotTrail, emailDomainAfter, emailDomainDot)(code);\n    }\n\n    // Alphanumerical, `-`, and `_`.\n    if (code === 45 || code === 95 || asciiAlphanumeric(code)) {\n      data = true;\n      effects.consume(code);\n      return emailDomain;\n    }\n\n    // To do: `/` if xmpp.\n\n    // Note: normally we’d truncate trailing punctuation from the link.\n    // However, email autolink literals cannot contain any of those markers,\n    // except for `.`, but that can only occur if it isn’t trailing.\n    // So we can ignore truncating!\n    return emailDomainAfter(code);\n  }\n\n  /**\n   * In email domain, on dot that is not a trail.\n   *\n   * ```markdown\n   * > | a contact@example.org b\n   *                      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailDomainDot(code) {\n    effects.consume(code);\n    dot = true;\n    return emailDomain;\n  }\n\n  /**\n   * After email domain.\n   *\n   * ```markdown\n   * > | a contact@example.org b\n   *                          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailDomainAfter(code) {\n    // Domain must not be empty, must include a dot, and must end in alphabetical.\n    // Source: <https://github.com/github/cmark-gfm/blob/ef1cfcb/extensions/autolink.c#L332>.\n    if (data && dot && asciiAlpha(self.previous)) {\n      effects.exit('literalAutolinkEmail');\n      effects.exit('literalAutolink');\n      return ok(code);\n    }\n    return nok(code);\n  }\n}\n\n/**\n * `www` autolink literal.\n *\n * ```markdown\n * > | a www.example.org b\n *       ^^^^^^^^^^^^^^^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeWwwAutolink(effects, ok, nok) {\n  const self = this;\n  return wwwStart;\n\n  /**\n   * Start of www autolink literal.\n   *\n   * ```markdown\n   * > | www.example.com/a?b#c\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function wwwStart(code) {\n    if (code !== 87 && code !== 119 || !previousWww.call(self, self.previous) || previousUnbalanced(self.events)) {\n      return nok(code);\n    }\n    effects.enter('literalAutolink');\n    effects.enter('literalAutolinkWww');\n    // Note: we *check*, so we can discard the `www.` we parsed.\n    // If it worked, we consider it as a part of the domain.\n    return effects.check(wwwPrefix, effects.attempt(domain, effects.attempt(path, wwwAfter), nok), nok)(code);\n  }\n\n  /**\n   * After a www autolink literal.\n   *\n   * ```markdown\n   * > | www.example.com/a?b#c\n   *                          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function wwwAfter(code) {\n    effects.exit('literalAutolinkWww');\n    effects.exit('literalAutolink');\n    return ok(code);\n  }\n}\n\n/**\n * Protocol autolink literal.\n *\n * ```markdown\n * > | a https://example.org b\n *       ^^^^^^^^^^^^^^^^^^^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeProtocolAutolink(effects, ok, nok) {\n  const self = this;\n  let buffer = '';\n  let seen = false;\n  return protocolStart;\n\n  /**\n   * Start of protocol autolink literal.\n   *\n   * ```markdown\n   * > | https://example.com/a?b#c\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function protocolStart(code) {\n    if ((code === 72 || code === 104) && previousProtocol.call(self, self.previous) && !previousUnbalanced(self.events)) {\n      effects.enter('literalAutolink');\n      effects.enter('literalAutolinkHttp');\n      buffer += String.fromCodePoint(code);\n      effects.consume(code);\n      return protocolPrefixInside;\n    }\n    return nok(code);\n  }\n\n  /**\n   * In protocol.\n   *\n   * ```markdown\n   * > | https://example.com/a?b#c\n   *     ^^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function protocolPrefixInside(code) {\n    // `5` is size of `https`\n    if (asciiAlpha(code) && buffer.length < 5) {\n      // @ts-expect-error: definitely number.\n      buffer += String.fromCodePoint(code);\n      effects.consume(code);\n      return protocolPrefixInside;\n    }\n    if (code === 58) {\n      const protocol = buffer.toLowerCase();\n      if (protocol === 'http' || protocol === 'https') {\n        effects.consume(code);\n        return protocolSlashesInside;\n      }\n    }\n    return nok(code);\n  }\n\n  /**\n   * In slashes.\n   *\n   * ```markdown\n   * > | https://example.com/a?b#c\n   *           ^^\n   * ```\n   *\n   * @type {State}\n   */\n  function protocolSlashesInside(code) {\n    if (code === 47) {\n      effects.consume(code);\n      if (seen) {\n        return afterProtocol;\n      }\n      seen = true;\n      return protocolSlashesInside;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After protocol, before domain.\n   *\n   * ```markdown\n   * > | https://example.com/a?b#c\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function afterProtocol(code) {\n    // To do: this is different from `markdown-rs`:\n    // https://github.com/wooorm/markdown-rs/blob/b3a921c761309ae00a51fe348d8a43adbc54b518/src/construct/gfm_autolink_literal.rs#L172-L182\n    return code === null || asciiControl(code) || markdownLineEndingOrSpace(code) || unicodeWhitespace(code) || unicodePunctuation(code) ? nok(code) : effects.attempt(domain, effects.attempt(path, protocolAfter), nok)(code);\n  }\n\n  /**\n   * After a protocol autolink literal.\n   *\n   * ```markdown\n   * > | https://example.com/a?b#c\n   *                              ^\n   * ```\n   *\n   * @type {State}\n   */\n  function protocolAfter(code) {\n    effects.exit('literalAutolinkHttp');\n    effects.exit('literalAutolink');\n    return ok(code);\n  }\n}\n\n/**\n * `www` prefix.\n *\n * ```markdown\n * > | a www.example.org b\n *       ^^^^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeWwwPrefix(effects, ok, nok) {\n  let size = 0;\n  return wwwPrefixInside;\n\n  /**\n   * In www prefix.\n   *\n   * ```markdown\n   * > | www.example.com\n   *     ^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function wwwPrefixInside(code) {\n    if ((code === 87 || code === 119) && size < 3) {\n      size++;\n      effects.consume(code);\n      return wwwPrefixInside;\n    }\n    if (code === 46 && size === 3) {\n      effects.consume(code);\n      return wwwPrefixAfter;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After www prefix.\n   *\n   * ```markdown\n   * > | www.example.com\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function wwwPrefixAfter(code) {\n    // If there is *anything*, we can link.\n    return code === null ? nok(code) : ok(code);\n  }\n}\n\n/**\n * Domain.\n *\n * ```markdown\n * > | a https://example.org b\n *               ^^^^^^^^^^^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeDomain(effects, ok, nok) {\n  /** @type {boolean | undefined} */\n  let underscoreInLastSegment;\n  /** @type {boolean | undefined} */\n  let underscoreInLastLastSegment;\n  /** @type {boolean | undefined} */\n  let seen;\n  return domainInside;\n\n  /**\n   * In domain.\n   *\n   * ```markdown\n   * > | https://example.com/a\n   *             ^^^^^^^^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function domainInside(code) {\n    // Check whether this marker, which is a trailing punctuation\n    // marker, optionally followed by more trailing markers, and then\n    // followed by an end.\n    if (code === 46 || code === 95) {\n      return effects.check(trail, domainAfter, domainAtPunctuation)(code);\n    }\n\n    // GH documents that only alphanumerics (other than `-`, `.`, and `_`) can\n    // occur, which sounds like ASCII only, but they also support `www.點看.com`,\n    // so that’s Unicode.\n    // Instead of some new production for Unicode alphanumerics, markdown\n    // already has that for Unicode punctuation and whitespace, so use those.\n    // Source: <https://github.com/github/cmark-gfm/blob/ef1cfcb/extensions/autolink.c#L12>.\n    if (code === null || markdownLineEndingOrSpace(code) || unicodeWhitespace(code) || code !== 45 && unicodePunctuation(code)) {\n      return domainAfter(code);\n    }\n    seen = true;\n    effects.consume(code);\n    return domainInside;\n  }\n\n  /**\n   * In domain, at potential trailing punctuation, that was not trailing.\n   *\n   * ```markdown\n   * > | https://example.com\n   *                    ^\n   * ```\n   *\n   * @type {State}\n   */\n  function domainAtPunctuation(code) {\n    // There is an underscore in the last segment of the domain\n    if (code === 95) {\n      underscoreInLastSegment = true;\n    }\n    // Otherwise, it’s a `.`: save the last segment underscore in the\n    // penultimate segment slot.\n    else {\n      underscoreInLastLastSegment = underscoreInLastSegment;\n      underscoreInLastSegment = undefined;\n    }\n    effects.consume(code);\n    return domainInside;\n  }\n\n  /**\n   * After domain.\n   *\n   * ```markdown\n   * > | https://example.com/a\n   *                        ^\n   * ```\n   *\n   * @type {State} */\n  function domainAfter(code) {\n    // Note: that’s GH says a dot is needed, but it’s not true:\n    // <https://github.com/github/cmark-gfm/issues/279>\n    if (underscoreInLastLastSegment || underscoreInLastSegment || !seen) {\n      return nok(code);\n    }\n    return ok(code);\n  }\n}\n\n/**\n * Path.\n *\n * ```markdown\n * > | a https://example.org/stuff b\n *                          ^^^^^^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizePath(effects, ok) {\n  let sizeOpen = 0;\n  let sizeClose = 0;\n  return pathInside;\n\n  /**\n   * In path.\n   *\n   * ```markdown\n   * > | https://example.com/a\n   *                        ^^\n   * ```\n   *\n   * @type {State}\n   */\n  function pathInside(code) {\n    if (code === 40) {\n      sizeOpen++;\n      effects.consume(code);\n      return pathInside;\n    }\n\n    // To do: `markdown-rs` also needs this.\n    // If this is a paren, and there are less closings than openings,\n    // we don’t check for a trail.\n    if (code === 41 && sizeClose < sizeOpen) {\n      return pathAtPunctuation(code);\n    }\n\n    // Check whether this trailing punctuation marker is optionally\n    // followed by more trailing markers, and then followed\n    // by an end.\n    if (code === 33 || code === 34 || code === 38 || code === 39 || code === 41 || code === 42 || code === 44 || code === 46 || code === 58 || code === 59 || code === 60 || code === 63 || code === 93 || code === 95 || code === 126) {\n      return effects.check(trail, ok, pathAtPunctuation)(code);\n    }\n    if (code === null || markdownLineEndingOrSpace(code) || unicodeWhitespace(code)) {\n      return ok(code);\n    }\n    effects.consume(code);\n    return pathInside;\n  }\n\n  /**\n   * In path, at potential trailing punctuation, that was not trailing.\n   *\n   * ```markdown\n   * > | https://example.com/a\"b\n   *                          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function pathAtPunctuation(code) {\n    // Count closing parens.\n    if (code === 41) {\n      sizeClose++;\n    }\n    effects.consume(code);\n    return pathInside;\n  }\n}\n\n/**\n * Trail.\n *\n * This calls `ok` if this *is* the trail, followed by an end, which means\n * the entire trail is not part of the link.\n * It calls `nok` if this *is* part of the link.\n *\n * ```markdown\n * > | https://example.com\").\n *                        ^^^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeTrail(effects, ok, nok) {\n  return trail;\n\n  /**\n   * In trail of domain or path.\n   *\n   * ```markdown\n   * > | https://example.com\").\n   *                        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function trail(code) {\n    // Regular trailing punctuation.\n    if (code === 33 || code === 34 || code === 39 || code === 41 || code === 42 || code === 44 || code === 46 || code === 58 || code === 59 || code === 63 || code === 95 || code === 126) {\n      effects.consume(code);\n      return trail;\n    }\n\n    // `&` followed by one or more alphabeticals and then a `;`, is\n    // as a whole considered as trailing punctuation.\n    // In all other cases, it is considered as continuation of the URL.\n    if (code === 38) {\n      effects.consume(code);\n      return trailCharacterReferenceStart;\n    }\n\n    // Needed because we allow literals after `[`, as we fix:\n    // <https://github.com/github/cmark-gfm/issues/278>.\n    // Check that it is not followed by `(` or `[`.\n    if (code === 93) {\n      effects.consume(code);\n      return trailBracketAfter;\n    }\n    if (\n    // `<` is an end.\n    code === 60 ||\n    // So is whitespace.\n    code === null || markdownLineEndingOrSpace(code) || unicodeWhitespace(code)) {\n      return ok(code);\n    }\n    return nok(code);\n  }\n\n  /**\n   * In trail, after `]`.\n   *\n   * > 👉 **Note**: this deviates from `cmark-gfm` to fix a bug.\n   * > See end of <https://github.com/github/cmark-gfm/issues/278> for more.\n   *\n   * ```markdown\n   * > | https://example.com](\n   *                         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function trailBracketAfter(code) {\n    // Whitespace or something that could start a resource or reference is the end.\n    // Switch back to trail otherwise.\n    if (code === null || code === 40 || code === 91 || markdownLineEndingOrSpace(code) || unicodeWhitespace(code)) {\n      return ok(code);\n    }\n    return trail(code);\n  }\n\n  /**\n   * In character-reference like trail, after `&`.\n   *\n   * ```markdown\n   * > | https://example.com&amp;).\n   *                         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function trailCharacterReferenceStart(code) {\n    // When non-alpha, it’s not a trail.\n    return asciiAlpha(code) ? trailCharacterReferenceInside(code) : nok(code);\n  }\n\n  /**\n   * In character-reference like trail.\n   *\n   * ```markdown\n   * > | https://example.com&amp;).\n   *                         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function trailCharacterReferenceInside(code) {\n    // Switch back to trail if this is well-formed.\n    if (code === 59) {\n      effects.consume(code);\n      return trail;\n    }\n    if (asciiAlpha(code)) {\n      effects.consume(code);\n      return trailCharacterReferenceInside;\n    }\n\n    // It’s not a trail.\n    return nok(code);\n  }\n}\n\n/**\n * Dot in email domain trail.\n *\n * This calls `ok` if this *is* the trail, followed by an end, which means\n * the trail is not part of the link.\n * It calls `nok` if this *is* part of the link.\n *\n * ```markdown\n * > | contact@example.org.\n *                        ^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeEmailDomainDotTrail(effects, ok, nok) {\n  return start;\n\n  /**\n   * Dot.\n   *\n   * ```markdown\n   * > | contact@example.org.\n   *                    ^   ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // Must be dot.\n    effects.consume(code);\n    return after;\n  }\n\n  /**\n   * After dot.\n   *\n   * ```markdown\n   * > | contact@example.org.\n   *                     ^   ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    // Not a trail if alphanumeric.\n    return asciiAlphanumeric(code) ? nok(code) : ok(code);\n  }\n}\n\n/**\n * See:\n * <https://github.com/github/cmark-gfm/blob/ef1cfcb/extensions/autolink.c#L156>.\n *\n * @type {Previous}\n */\nfunction previousWww(code) {\n  return code === null || code === 40 || code === 42 || code === 95 || code === 91 || code === 93 || code === 126 || markdownLineEndingOrSpace(code);\n}\n\n/**\n * See:\n * <https://github.com/github/cmark-gfm/blob/ef1cfcb/extensions/autolink.c#L214>.\n *\n * @type {Previous}\n */\nfunction previousProtocol(code) {\n  return !asciiAlpha(code);\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Previous}\n */\nfunction previousEmail(code) {\n  // Do not allow a slash “inside” atext.\n  // The reference code is a bit weird, but that’s what it results in.\n  // Source: <https://github.com/github/cmark-gfm/blob/ef1cfcb/extensions/autolink.c#L307>.\n  // Other than slash, every preceding character is allowed.\n  return !(code === 47 || gfmAtext(code));\n}\n\n/**\n * @param {Code} code\n * @returns {boolean}\n */\nfunction gfmAtext(code) {\n  return code === 43 || code === 45 || code === 46 || code === 95 || asciiAlphanumeric(code);\n}\n\n/**\n * @param {Array<Event>} events\n * @returns {boolean}\n */\nfunction previousUnbalanced(events) {\n  let index = events.length;\n  let result = false;\n  while (index--) {\n    const token = events[index][1];\n    if ((token.type === 'labelLink' || token.type === 'labelImage') && !token._balanced) {\n      result = true;\n      break;\n    }\n\n    // If we’ve seen this token, and it was marked as not having any unbalanced\n    // bracket before it, we can exit.\n    if (token._gfmAutolinkLiteralWalkedInto) {\n      result = false;\n      break;\n    }\n  }\n  if (events.length > 0 && !result) {\n    // Mark the last token as “walked into” w/o finding\n    // anything.\n    events[events.length - 1][1]._gfmAutolinkLiteralWalkedInto = true;\n  }\n  return result;\n}","const characterReferences = {'\"': 'quot', '&': 'amp', '<': 'lt', '>': 'gt'}\n\n/**\n * Encode only the dangerous HTML characters.\n *\n * This ensures that certain characters which have special meaning in HTML are\n * dealt with.\n * Technically, we can skip `>` and `\"` in many cases, but CM includes them.\n *\n * @param {string} value\n *   Value to encode.\n * @returns {string}\n *   Encoded value.\n */\nexport function encode(value) {\n  return value.replace(/[\"&<>]/g, replace)\n\n  /**\n   * @param {string} value\n   *   Value to replace.\n   * @returns {string}\n   *   Encoded value.\n   */\n  function replace(value) {\n    return (\n      '&' +\n      characterReferences[\n        /** @type {keyof typeof characterReferences} */ (value)\n      ] +\n      ';'\n    )\n  }\n}\n","import { asciiAlphanumeric } from 'micromark-util-character';\nimport { encode } from 'micromark-util-encode';\n/**\n * Make a value safe for injection as a URL.\n *\n * This encodes unsafe characters with percent-encoding and skips already\n * encoded sequences (see `normalizeUri`).\n * Further unsafe characters are encoded as character references (see\n * `micromark-util-encode`).\n *\n * A regex of allowed protocols can be given, in which case the URL is\n * sanitized.\n * For example, `/^(https?|ircs?|mailto|xmpp)$/i` can be used for `a[href]`, or\n * `/^https?$/i` for `img[src]` (this is what `github.com` allows).\n * If the URL includes an unknown protocol (one not matched by `protocol`, such\n * as a dangerous example, `javascript:`), the value is ignored.\n *\n * @param {string | null | undefined} url\n *   URI to sanitize.\n * @param {RegExp | null | undefined} [protocol]\n *   Allowed protocols.\n * @returns {string}\n *   Sanitized URI.\n */\nexport function sanitizeUri(url, protocol) {\n  const value = encode(normalizeUri(url || ''));\n  if (!protocol) {\n    return value;\n  }\n  const colon = value.indexOf(':');\n  const questionMark = value.indexOf('?');\n  const numberSign = value.indexOf('#');\n  const slash = value.indexOf('/');\n  if (\n  // If there is no protocol, it’s relative.\n  colon < 0 ||\n  // If the first colon is after a `?`, `#`, or `/`, it’s not a protocol.\n  slash > -1 && colon > slash || questionMark > -1 && colon > questionMark || numberSign > -1 && colon > numberSign ||\n  // It is a protocol, it should be allowed.\n  protocol.test(value.slice(0, colon))) {\n    return value;\n  }\n  return '';\n}\n\n/**\n * Normalize a URL.\n *\n * Encode unsafe characters with percent-encoding, skipping already encoded\n * sequences.\n *\n * @param {string} value\n *   URI to normalize.\n * @returns {string}\n *   Normalized URI.\n */\nexport function normalizeUri(value) {\n  /** @type {Array<string>} */\n  const result = [];\n  let index = -1;\n  let start = 0;\n  let skip = 0;\n  while (++index < value.length) {\n    const code = value.charCodeAt(index);\n    /** @type {string} */\n    let replace = '';\n\n    // A correct percent encoded value.\n    if (code === 37 && asciiAlphanumeric(value.charCodeAt(index + 1)) && asciiAlphanumeric(value.charCodeAt(index + 2))) {\n      skip = 2;\n    }\n    // ASCII.\n    else if (code < 128) {\n      if (!/[!#$&-;=?-Z_a-z~]/.test(String.fromCharCode(code))) {\n        replace = String.fromCharCode(code);\n      }\n    }\n    // Astral.\n    else if (code > 55_295 && code < 57_344) {\n      const next = value.charCodeAt(index + 1);\n\n      // A correct surrogate pair.\n      if (code < 56_320 && next > 56_319 && next < 57_344) {\n        replace = String.fromCharCode(code, next);\n        skip = 1;\n      }\n      // Lone surrogate.\n      else {\n        replace = \"\\uFFFD\";\n      }\n    }\n    // Unicode.\n    else {\n      replace = String.fromCharCode(code);\n    }\n    if (replace) {\n      result.push(value.slice(start, index), encodeURIComponent(replace));\n      start = index + skip + 1;\n      replace = '';\n    }\n    if (skip) {\n      index += skip;\n      skip = 0;\n    }\n  }\n  return result.join('') + value.slice(start);\n}","/**\n * @import {CompileContext, Handle, HtmlExtension, Token} from 'micromark-util-types'\n */\n\nimport { sanitizeUri } from 'micromark-util-sanitize-uri';\n\n/**\n * Create an HTML extension for `micromark` to support GitHub autolink literal\n * when serializing to HTML.\n *\n * @returns {HtmlExtension}\n *   Extension for `micromark` that can be passed in `htmlExtensions` to\n *   support GitHub autolink literal when serializing to HTML.\n */\nexport function gfmAutolinkLiteralHtml() {\n  return {\n    exit: {\n      literalAutolinkEmail,\n      literalAutolinkHttp,\n      literalAutolinkWww\n    }\n  };\n}\n\n/**\n * @this {CompileContext}\n * @type {Handle}\n */\nfunction literalAutolinkWww(token) {\n  anchorFromToken.call(this, token, 'http://');\n}\n\n/**\n * @this {CompileContext}\n * @type {Handle}\n */\nfunction literalAutolinkEmail(token) {\n  anchorFromToken.call(this, token, 'mailto:');\n}\n\n/**\n * @this {CompileContext}\n * @type {Handle}\n */\nfunction literalAutolinkHttp(token) {\n  anchorFromToken.call(this, token);\n}\n\n/**\n * @this CompileContext\n * @param {Token} token\n * @param {string | null | undefined} [protocol]\n * @returns {undefined}\n */\nfunction anchorFromToken(token, protocol) {\n  const url = this.sliceSerialize(token);\n  this.tag('<a href=\"' + sanitizeUri((protocol || '') + url) + '\">');\n  this.raw(this.encode(url));\n  this.tag('</a>');\n}","/**\n * @import {Event, Exiter, Extension, Resolver, State, Token, TokenizeContext, Tokenizer} from 'micromark-util-types'\n */\n\nimport { blankLine } from 'micromark-core-commonmark';\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEndingOrSpace } from 'micromark-util-character';\nimport { normalizeIdentifier } from 'micromark-util-normalize-identifier';\nconst indent = {\n  tokenize: tokenizeIndent,\n  partial: true\n};\n\n// To do: micromark should support a `_hiddenGfmFootnoteSupport`, which only\n// affects label start (image).\n// That will let us drop `tokenizePotentialGfmFootnote*`.\n// It currently has a `_hiddenFootnoteSupport`, which affects that and more.\n// That can be removed when `micromark-extension-footnote` is archived.\n\n/**\n * Create an extension for `micromark` to enable GFM footnote syntax.\n *\n * @returns {Extension}\n *   Extension for `micromark` that can be passed in `extensions` to\n *   enable GFM footnote syntax.\n */\nexport function gfmFootnote() {\n  /** @type {Extension} */\n  return {\n    document: {\n      [91]: {\n        name: 'gfmFootnoteDefinition',\n        tokenize: tokenizeDefinitionStart,\n        continuation: {\n          tokenize: tokenizeDefinitionContinuation\n        },\n        exit: gfmFootnoteDefinitionEnd\n      }\n    },\n    text: {\n      [91]: {\n        name: 'gfmFootnoteCall',\n        tokenize: tokenizeGfmFootnoteCall\n      },\n      [93]: {\n        name: 'gfmPotentialFootnoteCall',\n        add: 'after',\n        tokenize: tokenizePotentialGfmFootnoteCall,\n        resolveTo: resolveToPotentialGfmFootnoteCall\n      }\n    }\n  };\n}\n\n// To do: remove after micromark update.\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizePotentialGfmFootnoteCall(effects, ok, nok) {\n  const self = this;\n  let index = self.events.length;\n  const defined = self.parser.gfmFootnotes || (self.parser.gfmFootnotes = []);\n  /** @type {Token} */\n  let labelStart;\n\n  // Find an opening.\n  while (index--) {\n    const token = self.events[index][1];\n    if (token.type === \"labelImage\") {\n      labelStart = token;\n      break;\n    }\n\n    // Exit if we’ve walked far enough.\n    if (token.type === 'gfmFootnoteCall' || token.type === \"labelLink\" || token.type === \"label\" || token.type === \"image\" || token.type === \"link\") {\n      break;\n    }\n  }\n  return start;\n\n  /**\n   * @type {State}\n   */\n  function start(code) {\n    if (!labelStart || !labelStart._balanced) {\n      return nok(code);\n    }\n    const id = normalizeIdentifier(self.sliceSerialize({\n      start: labelStart.end,\n      end: self.now()\n    }));\n    if (id.codePointAt(0) !== 94 || !defined.includes(id.slice(1))) {\n      return nok(code);\n    }\n    effects.enter('gfmFootnoteCallLabelMarker');\n    effects.consume(code);\n    effects.exit('gfmFootnoteCallLabelMarker');\n    return ok(code);\n  }\n}\n\n// To do: remove after micromark update.\n/** @type {Resolver} */\nfunction resolveToPotentialGfmFootnoteCall(events, context) {\n  let index = events.length;\n  /** @type {Token | undefined} */\n  let labelStart;\n\n  // Find an opening.\n  while (index--) {\n    if (events[index][1].type === \"labelImage\" && events[index][0] === 'enter') {\n      labelStart = events[index][1];\n      break;\n    }\n  }\n  // Change the `labelImageMarker` to a `data`.\n  events[index + 1][1].type = \"data\";\n  events[index + 3][1].type = 'gfmFootnoteCallLabelMarker';\n\n  // The whole (without `!`):\n  /** @type {Token} */\n  const call = {\n    type: 'gfmFootnoteCall',\n    start: Object.assign({}, events[index + 3][1].start),\n    end: Object.assign({}, events[events.length - 1][1].end)\n  };\n  // The `^` marker\n  /** @type {Token} */\n  const marker = {\n    type: 'gfmFootnoteCallMarker',\n    start: Object.assign({}, events[index + 3][1].end),\n    end: Object.assign({}, events[index + 3][1].end)\n  };\n  // Increment the end 1 character.\n  marker.end.column++;\n  marker.end.offset++;\n  marker.end._bufferIndex++;\n  /** @type {Token} */\n  const string = {\n    type: 'gfmFootnoteCallString',\n    start: Object.assign({}, marker.end),\n    end: Object.assign({}, events[events.length - 1][1].start)\n  };\n  /** @type {Token} */\n  const chunk = {\n    type: \"chunkString\",\n    contentType: 'string',\n    start: Object.assign({}, string.start),\n    end: Object.assign({}, string.end)\n  };\n\n  /** @type {Array<Event>} */\n  const replacement = [\n  // Take the `labelImageMarker` (now `data`, the `!`)\n  events[index + 1], events[index + 2], ['enter', call, context],\n  // The `[`\n  events[index + 3], events[index + 4],\n  // The `^`.\n  ['enter', marker, context], ['exit', marker, context],\n  // Everything in between.\n  ['enter', string, context], ['enter', chunk, context], ['exit', chunk, context], ['exit', string, context],\n  // The ending (`]`, properly parsed and labelled).\n  events[events.length - 2], events[events.length - 1], ['exit', call, context]];\n  events.splice(index, events.length - index + 1, ...replacement);\n  return events;\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeGfmFootnoteCall(effects, ok, nok) {\n  const self = this;\n  const defined = self.parser.gfmFootnotes || (self.parser.gfmFootnotes = []);\n  let size = 0;\n  /** @type {boolean} */\n  let data;\n\n  // Note: the implementation of `markdown-rs` is different, because it houses\n  // core *and* extensions in one project.\n  // Therefore, it can include footnote logic inside `label-end`.\n  // We can’t do that, but luckily, we can parse footnotes in a simpler way than\n  // needed for labels.\n  return start;\n\n  /**\n   * Start of footnote label.\n   *\n   * ```markdown\n   * > | a [^b] c\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('gfmFootnoteCall');\n    effects.enter('gfmFootnoteCallLabelMarker');\n    effects.consume(code);\n    effects.exit('gfmFootnoteCallLabelMarker');\n    return callStart;\n  }\n\n  /**\n   * After `[`, at `^`.\n   *\n   * ```markdown\n   * > | a [^b] c\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function callStart(code) {\n    if (code !== 94) return nok(code);\n    effects.enter('gfmFootnoteCallMarker');\n    effects.consume(code);\n    effects.exit('gfmFootnoteCallMarker');\n    effects.enter('gfmFootnoteCallString');\n    effects.enter('chunkString').contentType = 'string';\n    return callData;\n  }\n\n  /**\n   * In label.\n   *\n   * ```markdown\n   * > | a [^b] c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function callData(code) {\n    if (\n    // Too long.\n    size > 999 ||\n    // Closing brace with nothing.\n    code === 93 && !data ||\n    // Space or tab is not supported by GFM for some reason.\n    // `\\n` and `[` not being supported makes sense.\n    code === null || code === 91 || markdownLineEndingOrSpace(code)) {\n      return nok(code);\n    }\n    if (code === 93) {\n      effects.exit('chunkString');\n      const token = effects.exit('gfmFootnoteCallString');\n      if (!defined.includes(normalizeIdentifier(self.sliceSerialize(token)))) {\n        return nok(code);\n      }\n      effects.enter('gfmFootnoteCallLabelMarker');\n      effects.consume(code);\n      effects.exit('gfmFootnoteCallLabelMarker');\n      effects.exit('gfmFootnoteCall');\n      return ok;\n    }\n    if (!markdownLineEndingOrSpace(code)) {\n      data = true;\n    }\n    size++;\n    effects.consume(code);\n    return code === 92 ? callEscape : callData;\n  }\n\n  /**\n   * On character after escape.\n   *\n   * ```markdown\n   * > | a [^b\\c] d\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function callEscape(code) {\n    if (code === 91 || code === 92 || code === 93) {\n      effects.consume(code);\n      size++;\n      return callData;\n    }\n    return callData(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeDefinitionStart(effects, ok, nok) {\n  const self = this;\n  const defined = self.parser.gfmFootnotes || (self.parser.gfmFootnotes = []);\n  /** @type {string} */\n  let identifier;\n  let size = 0;\n  /** @type {boolean | undefined} */\n  let data;\n  return start;\n\n  /**\n   * Start of GFM footnote definition.\n   *\n   * ```markdown\n   * > | [^a]: b\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('gfmFootnoteDefinition')._container = true;\n    effects.enter('gfmFootnoteDefinitionLabel');\n    effects.enter('gfmFootnoteDefinitionLabelMarker');\n    effects.consume(code);\n    effects.exit('gfmFootnoteDefinitionLabelMarker');\n    return labelAtMarker;\n  }\n\n  /**\n   * In label, at caret.\n   *\n   * ```markdown\n   * > | [^a]: b\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelAtMarker(code) {\n    if (code === 94) {\n      effects.enter('gfmFootnoteDefinitionMarker');\n      effects.consume(code);\n      effects.exit('gfmFootnoteDefinitionMarker');\n      effects.enter('gfmFootnoteDefinitionLabelString');\n      effects.enter('chunkString').contentType = 'string';\n      return labelInside;\n    }\n    return nok(code);\n  }\n\n  /**\n   * In label.\n   *\n   * > 👉 **Note**: `cmark-gfm` prevents whitespace from occurring in footnote\n   * > definition labels.\n   *\n   * ```markdown\n   * > | [^a]: b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelInside(code) {\n    if (\n    // Too long.\n    size > 999 ||\n    // Closing brace with nothing.\n    code === 93 && !data ||\n    // Space or tab is not supported by GFM for some reason.\n    // `\\n` and `[` not being supported makes sense.\n    code === null || code === 91 || markdownLineEndingOrSpace(code)) {\n      return nok(code);\n    }\n    if (code === 93) {\n      effects.exit('chunkString');\n      const token = effects.exit('gfmFootnoteDefinitionLabelString');\n      identifier = normalizeIdentifier(self.sliceSerialize(token));\n      effects.enter('gfmFootnoteDefinitionLabelMarker');\n      effects.consume(code);\n      effects.exit('gfmFootnoteDefinitionLabelMarker');\n      effects.exit('gfmFootnoteDefinitionLabel');\n      return labelAfter;\n    }\n    if (!markdownLineEndingOrSpace(code)) {\n      data = true;\n    }\n    size++;\n    effects.consume(code);\n    return code === 92 ? labelEscape : labelInside;\n  }\n\n  /**\n   * After `\\`, at a special character.\n   *\n   * > 👉 **Note**: `cmark-gfm` currently does not support escaped brackets:\n   * > <https://github.com/github/cmark-gfm/issues/240>\n   *\n   * ```markdown\n   * > | [^a\\*b]: c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelEscape(code) {\n    if (code === 91 || code === 92 || code === 93) {\n      effects.consume(code);\n      size++;\n      return labelInside;\n    }\n    return labelInside(code);\n  }\n\n  /**\n   * After definition label.\n   *\n   * ```markdown\n   * > | [^a]: b\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelAfter(code) {\n    if (code === 58) {\n      effects.enter('definitionMarker');\n      effects.consume(code);\n      effects.exit('definitionMarker');\n      if (!defined.includes(identifier)) {\n        defined.push(identifier);\n      }\n\n      // Any whitespace after the marker is eaten, forming indented code\n      // is not possible.\n      // No space is also fine, just like a block quote marker.\n      return factorySpace(effects, whitespaceAfter, 'gfmFootnoteDefinitionWhitespace');\n    }\n    return nok(code);\n  }\n\n  /**\n   * After definition prefix.\n   *\n   * ```markdown\n   * > | [^a]: b\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function whitespaceAfter(code) {\n    // `markdown-rs` has a wrapping token for the prefix that is closed here.\n    return ok(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeDefinitionContinuation(effects, ok, nok) {\n  /// Start of footnote definition continuation.\n  ///\n  /// ```markdown\n  ///   | [^a]: b\n  /// > |     c\n  ///     ^\n  /// ```\n  //\n  // Either a blank line, which is okay, or an indented thing.\n  return effects.check(blankLine, ok, effects.attempt(indent, ok, nok));\n}\n\n/** @type {Exiter} */\nfunction gfmFootnoteDefinitionEnd(effects) {\n  effects.exit('gfmFootnoteDefinition');\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeIndent(effects, ok, nok) {\n  const self = this;\n  return factorySpace(effects, afterPrefix, 'gfmFootnoteDefinitionIndent', 4 + 1);\n\n  /**\n   * @type {State}\n   */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1];\n    return tail && tail[1].type === 'gfmFootnoteDefinitionIndent' && tail[2].sliceSerialize(tail[1], true).length === 4 ? ok(code) : nok(code);\n  }\n}","/**\n * @import {HtmlOptions as Options} from 'micromark-extension-gfm-footnote'\n * @import {HtmlExtension} from 'micromark-util-types'\n */\n\nimport { normalizeIdentifier } from 'micromark-util-normalize-identifier';\nimport { sanitizeUri } from 'micromark-util-sanitize-uri';\nconst own = {}.hasOwnProperty;\n\n/** @type {Options} */\nconst emptyOptions = {};\n\n/**\n * Generate the default label that GitHub uses on backreferences.\n *\n * @param {number} referenceIndex\n *   Index of the definition in the order that they are first referenced,\n *   0-indexed.\n * @param {number} rereferenceIndex\n *   Index of calls to the same definition, 0-indexed.\n * @returns {string}\n *   Default label.\n */\nexport function defaultBackLabel(referenceIndex, rereferenceIndex) {\n  return 'Back to reference ' + (referenceIndex + 1) + (rereferenceIndex > 1 ? '-' + rereferenceIndex : '');\n}\n\n/**\n * Create an extension for `micromark` to support GFM footnotes when\n * serializing to HTML.\n *\n * @param {Options | null | undefined} [options={}]\n *   Configuration (optional).\n * @returns {HtmlExtension}\n *   Extension for `micromark` that can be passed in `htmlExtensions` to\n *   support GFM footnotes when serializing to HTML.\n */\nexport function gfmFootnoteHtml(options) {\n  const config = options || emptyOptions;\n  const label = config.label || 'Footnotes';\n  const labelTagName = config.labelTagName || 'h2';\n  const labelAttributes = config.labelAttributes === null || config.labelAttributes === undefined ? 'class=\"sr-only\"' : config.labelAttributes;\n  const backLabel = config.backLabel || defaultBackLabel;\n  const clobberPrefix = config.clobberPrefix === null || config.clobberPrefix === undefined ? 'user-content-' : config.clobberPrefix;\n  return {\n    enter: {\n      gfmFootnoteDefinition() {\n        const stack = this.getData('tightStack');\n        stack.push(false);\n      },\n      gfmFootnoteDefinitionLabelString() {\n        this.buffer();\n      },\n      gfmFootnoteCallString() {\n        this.buffer();\n      }\n    },\n    exit: {\n      gfmFootnoteDefinition() {\n        let definitions = this.getData('gfmFootnoteDefinitions');\n        const footnoteStack = this.getData('gfmFootnoteDefinitionStack');\n        const tightStack = this.getData('tightStack');\n        const current = footnoteStack.pop();\n        const value = this.resume();\n        if (!definitions) {\n          this.setData('gfmFootnoteDefinitions', definitions = {});\n        }\n        if (!own.call(definitions, current)) definitions[current] = value;\n        tightStack.pop();\n        this.setData('slurpOneLineEnding', true);\n        // “Hack” to prevent a line ending from showing up if we’re in a definition in\n        // an empty list item.\n        this.setData('lastWasTag');\n      },\n      gfmFootnoteDefinitionLabelString(token) {\n        let footnoteStack = this.getData('gfmFootnoteDefinitionStack');\n        if (!footnoteStack) {\n          this.setData('gfmFootnoteDefinitionStack', footnoteStack = []);\n        }\n        footnoteStack.push(normalizeIdentifier(this.sliceSerialize(token)));\n        this.resume(); // Drop the label.\n        this.buffer(); // Get ready for a value.\n      },\n      gfmFootnoteCallString(token) {\n        let calls = this.getData('gfmFootnoteCallOrder');\n        let counts = this.getData('gfmFootnoteCallCounts');\n        const id = normalizeIdentifier(this.sliceSerialize(token));\n        /** @type {number} */\n        let counter;\n        this.resume();\n        if (!calls) this.setData('gfmFootnoteCallOrder', calls = []);\n        if (!counts) this.setData('gfmFootnoteCallCounts', counts = {});\n        const index = calls.indexOf(id);\n        const safeId = sanitizeUri(id.toLowerCase());\n        if (index === -1) {\n          calls.push(id);\n          counts[id] = 1;\n          counter = calls.length;\n        } else {\n          counts[id]++;\n          counter = index + 1;\n        }\n        const reuseCounter = counts[id];\n        this.tag('<sup><a href=\"#' + clobberPrefix + 'fn-' + safeId + '\" id=\"' + clobberPrefix + 'fnref-' + safeId + (reuseCounter > 1 ? '-' + reuseCounter : '') + '\" data-footnote-ref=\"\" aria-describedby=\"footnote-label\">' + String(counter) + '</a></sup>');\n      },\n      null() {\n        const calls = this.getData('gfmFootnoteCallOrder') || [];\n        const counts = this.getData('gfmFootnoteCallCounts') || {};\n        const definitions = this.getData('gfmFootnoteDefinitions') || {};\n        let index = -1;\n        if (calls.length > 0) {\n          this.lineEndingIfNeeded();\n          this.tag('<section data-footnotes=\"\" class=\"footnotes\"><' + labelTagName + ' id=\"footnote-label\"' + (labelAttributes ? ' ' + labelAttributes : '') + '>');\n          this.raw(this.encode(label));\n          this.tag('</' + labelTagName + '>');\n          this.lineEndingIfNeeded();\n          this.tag('<ol>');\n        }\n        while (++index < calls.length) {\n          // Called definitions are always defined.\n          const id = calls[index];\n          const safeId = sanitizeUri(id.toLowerCase());\n          let referenceIndex = 0;\n          /** @type {Array<string>} */\n          const references = [];\n          while (++referenceIndex <= counts[id]) {\n            references.push('<a href=\"#' + clobberPrefix + 'fnref-' + safeId + (referenceIndex > 1 ? '-' + referenceIndex : '') + '\" data-footnote-backref=\"\" aria-label=\"' + this.encode(typeof backLabel === 'string' ? backLabel : backLabel(index, referenceIndex)) + '\" class=\"data-footnote-backref\">↩' + (referenceIndex > 1 ? '<sup>' + referenceIndex + '</sup>' : '') + '</a>');\n          }\n          const reference = references.join(' ');\n          let injected = false;\n          this.lineEndingIfNeeded();\n          this.tag('<li id=\"' + clobberPrefix + 'fn-' + safeId + '\">');\n          this.lineEndingIfNeeded();\n          this.tag(definitions[id].replace(/<\\/p>(?:\\r?\\n|\\r)?$/, function ($0) {\n            injected = true;\n            return ' ' + reference + $0;\n          }));\n          if (!injected) {\n            this.lineEndingIfNeeded();\n            this.tag(reference);\n          }\n          this.lineEndingIfNeeded();\n          this.tag('</li>');\n        }\n        if (calls.length > 0) {\n          this.lineEndingIfNeeded();\n          this.tag('</ol>');\n          this.lineEndingIfNeeded();\n          this.tag('</section>');\n        }\n      }\n    }\n  };\n}","/**\n * @import {Options} from 'micromark-extension-gfm-strikethrough'\n * @import {Event, Extension, Resolver, State, Token, TokenizeContext, Tokenizer} from 'micromark-util-types'\n */\n\nimport { splice } from 'micromark-util-chunked';\nimport { classifyCharacter } from 'micromark-util-classify-character';\nimport { resolveAll } from 'micromark-util-resolve-all';\n/**\n * Create an extension for `micromark` to enable GFM strikethrough syntax.\n *\n * @param {Options | null | undefined} [options={}]\n *   Configuration.\n * @returns {Extension}\n *   Extension for `micromark` that can be passed in `extensions`, to\n *   enable GFM strikethrough syntax.\n */\nexport function gfmStrikethrough(options) {\n  const options_ = options || {};\n  let single = options_.singleTilde;\n  const tokenizer = {\n    name: 'strikethrough',\n    tokenize: tokenizeStrikethrough,\n    resolveAll: resolveAllStrikethrough\n  };\n  if (single === null || single === undefined) {\n    single = true;\n  }\n  return {\n    text: {\n      [126]: tokenizer\n    },\n    insideSpan: {\n      null: [tokenizer]\n    },\n    attentionMarkers: {\n      null: [126]\n    }\n  };\n\n  /**\n   * Take events and resolve strikethrough.\n   *\n   * @type {Resolver}\n   */\n  function resolveAllStrikethrough(events, context) {\n    let index = -1;\n\n    // Walk through all events.\n    while (++index < events.length) {\n      // Find a token that can close.\n      if (events[index][0] === 'enter' && events[index][1].type === 'strikethroughSequenceTemporary' && events[index][1]._close) {\n        let open = index;\n\n        // Now walk back to find an opener.\n        while (open--) {\n          // Find a token that can open the closer.\n          if (events[open][0] === 'exit' && events[open][1].type === 'strikethroughSequenceTemporary' && events[open][1]._open &&\n          // If the sizes are the same:\n          events[index][1].end.offset - events[index][1].start.offset === events[open][1].end.offset - events[open][1].start.offset) {\n            events[index][1].type = 'strikethroughSequence';\n            events[open][1].type = 'strikethroughSequence';\n\n            /** @type {Token} */\n            const strikethrough = {\n              type: 'strikethrough',\n              start: Object.assign({}, events[open][1].start),\n              end: Object.assign({}, events[index][1].end)\n            };\n\n            /** @type {Token} */\n            const text = {\n              type: 'strikethroughText',\n              start: Object.assign({}, events[open][1].end),\n              end: Object.assign({}, events[index][1].start)\n            };\n\n            // Opening.\n            /** @type {Array<Event>} */\n            const nextEvents = [['enter', strikethrough, context], ['enter', events[open][1], context], ['exit', events[open][1], context], ['enter', text, context]];\n            const insideSpan = context.parser.constructs.insideSpan.null;\n            if (insideSpan) {\n              // Between.\n              splice(nextEvents, nextEvents.length, 0, resolveAll(insideSpan, events.slice(open + 1, index), context));\n            }\n\n            // Closing.\n            splice(nextEvents, nextEvents.length, 0, [['exit', text, context], ['enter', events[index][1], context], ['exit', events[index][1], context], ['exit', strikethrough, context]]);\n            splice(events, open - 1, index - open + 3, nextEvents);\n            index = open + nextEvents.length - 2;\n            break;\n          }\n        }\n      }\n    }\n    index = -1;\n    while (++index < events.length) {\n      if (events[index][1].type === 'strikethroughSequenceTemporary') {\n        events[index][1].type = \"data\";\n      }\n    }\n    return events;\n  }\n\n  /**\n   * @this {TokenizeContext}\n   * @type {Tokenizer}\n   */\n  function tokenizeStrikethrough(effects, ok, nok) {\n    const previous = this.previous;\n    const events = this.events;\n    let size = 0;\n    return start;\n\n    /** @type {State} */\n    function start(code) {\n      if (previous === 126 && events[events.length - 1][1].type !== \"characterEscape\") {\n        return nok(code);\n      }\n      effects.enter('strikethroughSequenceTemporary');\n      return more(code);\n    }\n\n    /** @type {State} */\n    function more(code) {\n      const before = classifyCharacter(previous);\n      if (code === 126) {\n        // If this is the third marker, exit.\n        if (size > 1) return nok(code);\n        effects.consume(code);\n        size++;\n        return more;\n      }\n      if (size < 2 && !single) return nok(code);\n      const token = effects.exit('strikethroughSequenceTemporary');\n      const after = classifyCharacter(code);\n      token._open = !after || after === 2 && Boolean(before);\n      token._close = !before || before === 2 && Boolean(after);\n      return ok(code);\n    }\n  }\n}","/**\n * @import {HtmlExtension} from 'micromark-util-types'\n */\n\n/**\n * Create an HTML extension for `micromark` to support GFM strikethrough when\n * serializing to HTML.\n *\n * @returns {HtmlExtension}\n *   Extension for `micromark` that can be passed in `htmlExtensions`, to\n *   support GFM strikethrough when serializing to HTML.\n */\nexport function gfmStrikethroughHtml() {\n  return {\n    enter: {\n      strikethrough() {\n        this.tag('<del>');\n      }\n    },\n    exit: {\n      strikethrough() {\n        this.tag('</del>');\n      }\n    }\n  };\n}","/**\n * @import {Event} from 'micromark-util-types'\n */\n\n// Port of `edit_map.rs` from `markdown-rs`.\n// This should move to `markdown-js` later.\n\n// Deal with several changes in events, batching them together.\n//\n// Preferably, changes should be kept to a minimum.\n// Sometimes, it’s needed to change the list of events, because parsing can be\n// messy, and it helps to expose a cleaner interface of events to the compiler\n// and other users.\n// It can also help to merge many adjacent similar events.\n// And, in other cases, it’s needed to parse subcontent: pass some events\n// through another tokenizer and inject the result.\n\n/**\n * @typedef {[number, number, Array<Event>]} Change\n * @typedef {[number, number, number]} Jump\n */\n\n/**\n * Tracks a bunch of edits.\n */\nexport class EditMap {\n  /**\n   * Create a new edit map.\n   */\n  constructor() {\n    /**\n     * Record of changes.\n     *\n     * @type {Array<Change>}\n     */\n    this.map = [];\n  }\n\n  /**\n   * Create an edit: a remove and/or add at a certain place.\n   *\n   * @param {number} index\n   * @param {number} remove\n   * @param {Array<Event>} add\n   * @returns {undefined}\n   */\n  add(index, remove, add) {\n    addImplementation(this, index, remove, add);\n  }\n\n  // To do: add this when moving to `micromark`.\n  // /**\n  //  * Create an edit: but insert `add` before existing additions.\n  //  *\n  //  * @param {number} index\n  //  * @param {number} remove\n  //  * @param {Array<Event>} add\n  //  * @returns {undefined}\n  //  */\n  // addBefore(index, remove, add) {\n  //   addImplementation(this, index, remove, add, true)\n  // }\n\n  /**\n   * Done, change the events.\n   *\n   * @param {Array<Event>} events\n   * @returns {undefined}\n   */\n  consume(events) {\n    this.map.sort(function (a, b) {\n      return a[0] - b[0];\n    });\n\n    /* c8 ignore next 3 -- `resolve` is never called without tables, so without edits. */\n    if (this.map.length === 0) {\n      return;\n    }\n\n    // To do: if links are added in events, like they are in `markdown-rs`,\n    // this is needed.\n    // // Calculate jumps: where items in the current list move to.\n    // /** @type {Array<Jump>} */\n    // const jumps = []\n    // let index = 0\n    // let addAcc = 0\n    // let removeAcc = 0\n    // while (index < this.map.length) {\n    //   const [at, remove, add] = this.map[index]\n    //   removeAcc += remove\n    //   addAcc += add.length\n    //   jumps.push([at, removeAcc, addAcc])\n    //   index += 1\n    // }\n    //\n    // . shiftLinks(events, jumps)\n\n    let index = this.map.length;\n    /** @type {Array<Array<Event>>} */\n    const vecs = [];\n    while (index > 0) {\n      index -= 1;\n      vecs.push(events.slice(this.map[index][0] + this.map[index][1]), this.map[index][2]);\n\n      // Truncate rest.\n      events.length = this.map[index][0];\n    }\n    vecs.push(events.slice());\n    events.length = 0;\n    let slice = vecs.pop();\n    while (slice) {\n      for (const element of slice) {\n        events.push(element);\n      }\n      slice = vecs.pop();\n    }\n\n    // Truncate everything.\n    this.map.length = 0;\n  }\n}\n\n/**\n * Create an edit.\n *\n * @param {EditMap} editMap\n * @param {number} at\n * @param {number} remove\n * @param {Array<Event>} add\n * @returns {undefined}\n */\nfunction addImplementation(editMap, at, remove, add) {\n  let index = 0;\n\n  /* c8 ignore next 3 -- `resolve` is never called without tables, so without edits. */\n  if (remove === 0 && add.length === 0) {\n    return;\n  }\n  while (index < editMap.map.length) {\n    if (editMap.map[index][0] === at) {\n      editMap.map[index][1] += remove;\n\n      // To do: before not used by tables, use when moving to micromark.\n      // if (before) {\n      //   add.push(...editMap.map[index][2])\n      //   editMap.map[index][2] = add\n      // } else {\n      editMap.map[index][2].push(...add);\n      // }\n\n      return;\n    }\n    index += 1;\n  }\n  editMap.map.push([at, remove, add]);\n}\n\n// /**\n//  * Shift `previous` and `next` links according to `jumps`.\n//  *\n//  * This fixes links in case there are events removed or added between them.\n//  *\n//  * @param {Array<Event>} events\n//  * @param {Array<Jump>} jumps\n//  */\n// function shiftLinks(events, jumps) {\n//   let jumpIndex = 0\n//   let index = 0\n//   let add = 0\n//   let rm = 0\n\n//   while (index < events.length) {\n//     const rmCurr = rm\n\n//     while (jumpIndex < jumps.length && jumps[jumpIndex][0] <= index) {\n//       add = jumps[jumpIndex][2]\n//       rm = jumps[jumpIndex][1]\n//       jumpIndex += 1\n//     }\n\n//     // Ignore items that will be removed.\n//     if (rm > rmCurr) {\n//       index += rm - rmCurr\n//     } else {\n//       // ?\n//       // if let Some(link) = &events[index].link {\n//       //     if let Some(next) = link.next {\n//       //         events[next].link.as_mut().unwrap().previous = Some(index + add - rm);\n//       //         while jumpIndex < jumps.len() && jumps[jumpIndex].0 <= next {\n//       //             add = jumps[jumpIndex].2;\n//       //             rm = jumps[jumpIndex].1;\n//       //             jumpIndex += 1;\n//       //         }\n//       //         events[index].link.as_mut().unwrap().next = Some(next + add - rm);\n//       //         index = next;\n//       //         continue;\n//       //     }\n//       // }\n//       index += 1\n//     }\n//   }\n// }","/**\n * @import {Event} from 'micromark-util-types'\n */\n\n/**\n * @typedef {'center' | 'left' | 'none' | 'right'} Align\n */\n\n/**\n * Figure out the alignment of a GFM table.\n *\n * @param {Readonly<Array<Event>>} events\n *   List of events.\n * @param {number} index\n *   Table enter event.\n * @returns {Array<Align>}\n *   List of aligns.\n */\nexport function gfmTableAlign(events, index) {\n  let inDelimiterRow = false;\n  /** @type {Array<Align>} */\n  const align = [];\n  while (index < events.length) {\n    const event = events[index];\n    if (inDelimiterRow) {\n      if (event[0] === 'enter') {\n        // Start of alignment value: set a new column.\n        // To do: `markdown-rs` uses `tableDelimiterCellValue`.\n        if (event[1].type === 'tableContent') {\n          align.push(events[index + 1][1].type === 'tableDelimiterMarker' ? 'left' : 'none');\n        }\n      }\n      // Exits:\n      // End of alignment value: change the column.\n      // To do: `markdown-rs` uses `tableDelimiterCellValue`.\n      else if (event[1].type === 'tableContent') {\n        if (events[index - 1][1].type === 'tableDelimiterMarker') {\n          const alignIndex = align.length - 1;\n          align[alignIndex] = align[alignIndex] === 'left' ? 'center' : 'right';\n        }\n      }\n      // Done!\n      else if (event[1].type === 'tableDelimiterRow') {\n        break;\n      }\n    } else if (event[0] === 'enter' && event[1].type === 'tableDelimiterRow') {\n      inDelimiterRow = true;\n    }\n    index += 1;\n  }\n  return align;\n}","/**\n * @import {Event, Extension, Point, Resolver, State, Token, TokenizeContext, Tokenizer} from 'micromark-util-types'\n */\n\n/**\n * @typedef {[number, number, number, number]} Range\n *   Cell info.\n *\n * @typedef {0 | 1 | 2 | 3} RowKind\n *   Where we are: `1` for head row, `2` for delimiter row, `3` for body row.\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding, markdownLineEndingOrSpace, markdownSpace } from 'micromark-util-character';\nimport { EditMap } from './edit-map.js';\nimport { gfmTableAlign } from './infer.js';\n\n/**\n * Create an HTML extension for `micromark` to support GitHub tables syntax.\n *\n * @returns {Extension}\n *   Extension for `micromark` that can be passed in `extensions` to enable GFM\n *   table syntax.\n */\nexport function gfmTable() {\n  return {\n    flow: {\n      null: {\n        name: 'table',\n        tokenize: tokenizeTable,\n        resolveAll: resolveTable\n      }\n    }\n  };\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeTable(effects, ok, nok) {\n  const self = this;\n  let size = 0;\n  let sizeB = 0;\n  /** @type {boolean | undefined} */\n  let seen;\n  return start;\n\n  /**\n   * Start of a GFM table.\n   *\n   * If there is a valid table row or table head before, then we try to parse\n   * another row.\n   * Otherwise, we try to parse a head.\n   *\n   * ```markdown\n   * > | | a |\n   *     ^\n   *   | | - |\n   * > | | b |\n   *     ^\n   * ```\n   * @type {State}\n   */\n  function start(code) {\n    let index = self.events.length - 1;\n    while (index > -1) {\n      const type = self.events[index][1].type;\n      if (type === \"lineEnding\" ||\n      // Note: markdown-rs uses `whitespace` instead of `linePrefix`\n      type === \"linePrefix\") index--;else break;\n    }\n    const tail = index > -1 ? self.events[index][1].type : null;\n    const next = tail === 'tableHead' || tail === 'tableRow' ? bodyRowStart : headRowBefore;\n\n    // Don’t allow lazy body rows.\n    if (next === bodyRowStart && self.parser.lazy[self.now().line]) {\n      return nok(code);\n    }\n    return next(code);\n  }\n\n  /**\n   * Before table head row.\n   *\n   * ```markdown\n   * > | | a |\n   *     ^\n   *   | | - |\n   *   | | b |\n   * ```\n   *\n   * @type {State}\n   */\n  function headRowBefore(code) {\n    effects.enter('tableHead');\n    effects.enter('tableRow');\n    return headRowStart(code);\n  }\n\n  /**\n   * Before table head row, after whitespace.\n   *\n   * ```markdown\n   * > | | a |\n   *     ^\n   *   | | - |\n   *   | | b |\n   * ```\n   *\n   * @type {State}\n   */\n  function headRowStart(code) {\n    if (code === 124) {\n      return headRowBreak(code);\n    }\n\n    // To do: micromark-js should let us parse our own whitespace in extensions,\n    // like `markdown-rs`:\n    //\n    // ```js\n    // // 4+ spaces.\n    // if (markdownSpace(code)) {\n    //   return nok(code)\n    // }\n    // ```\n\n    seen = true;\n    // Count the first character, that isn’t a pipe, double.\n    sizeB += 1;\n    return headRowBreak(code);\n  }\n\n  /**\n   * At break in table head row.\n   *\n   * ```markdown\n   * > | | a |\n   *     ^\n   *       ^\n   *         ^\n   *   | | - |\n   *   | | b |\n   * ```\n   *\n   * @type {State}\n   */\n  function headRowBreak(code) {\n    if (code === null) {\n      // Note: in `markdown-rs`, we need to reset, in `micromark-js` we don‘t.\n      return nok(code);\n    }\n    if (markdownLineEnding(code)) {\n      // If anything other than one pipe (ignoring whitespace) was used, it’s fine.\n      if (sizeB > 1) {\n        sizeB = 0;\n        // To do: check if this works.\n        // Feel free to interrupt:\n        self.interrupt = true;\n        effects.exit('tableRow');\n        effects.enter(\"lineEnding\");\n        effects.consume(code);\n        effects.exit(\"lineEnding\");\n        return headDelimiterStart;\n      }\n\n      // Note: in `markdown-rs`, we need to reset, in `micromark-js` we don‘t.\n      return nok(code);\n    }\n    if (markdownSpace(code)) {\n      // To do: check if this is fine.\n      // effects.attempt(State::Next(StateName::GfmTableHeadRowBreak), State::Nok)\n      // State::Retry(space_or_tab(tokenizer))\n      return factorySpace(effects, headRowBreak, \"whitespace\")(code);\n    }\n    sizeB += 1;\n    if (seen) {\n      seen = false;\n      // Header cell count.\n      size += 1;\n    }\n    if (code === 124) {\n      effects.enter('tableCellDivider');\n      effects.consume(code);\n      effects.exit('tableCellDivider');\n      // Whether a delimiter was seen.\n      seen = true;\n      return headRowBreak;\n    }\n\n    // Anything else is cell data.\n    effects.enter(\"data\");\n    return headRowData(code);\n  }\n\n  /**\n   * In table head row data.\n   *\n   * ```markdown\n   * > | | a |\n   *       ^\n   *   | | - |\n   *   | | b |\n   * ```\n   *\n   * @type {State}\n   */\n  function headRowData(code) {\n    if (code === null || code === 124 || markdownLineEndingOrSpace(code)) {\n      effects.exit(\"data\");\n      return headRowBreak(code);\n    }\n    effects.consume(code);\n    return code === 92 ? headRowEscape : headRowData;\n  }\n\n  /**\n   * In table head row escape.\n   *\n   * ```markdown\n   * > | | a\\-b |\n   *         ^\n   *   | | ---- |\n   *   | | c    |\n   * ```\n   *\n   * @type {State}\n   */\n  function headRowEscape(code) {\n    if (code === 92 || code === 124) {\n      effects.consume(code);\n      return headRowData;\n    }\n    return headRowData(code);\n  }\n\n  /**\n   * Before delimiter row.\n   *\n   * ```markdown\n   *   | | a |\n   * > | | - |\n   *     ^\n   *   | | b |\n   * ```\n   *\n   * @type {State}\n   */\n  function headDelimiterStart(code) {\n    // Reset `interrupt`.\n    self.interrupt = false;\n\n    // Note: in `markdown-rs`, we need to handle piercing here too.\n    if (self.parser.lazy[self.now().line]) {\n      return nok(code);\n    }\n    effects.enter('tableDelimiterRow');\n    // Track if we’ve seen a `:` or `|`.\n    seen = false;\n    if (markdownSpace(code)) {\n      return factorySpace(effects, headDelimiterBefore, \"linePrefix\", self.parser.constructs.disable.null.includes('codeIndented') ? undefined : 4)(code);\n    }\n    return headDelimiterBefore(code);\n  }\n\n  /**\n   * Before delimiter row, after optional whitespace.\n   *\n   * Reused when a `|` is found later, to parse another cell.\n   *\n   * ```markdown\n   *   | | a |\n   * > | | - |\n   *     ^\n   *   | | b |\n   * ```\n   *\n   * @type {State}\n   */\n  function headDelimiterBefore(code) {\n    if (code === 45 || code === 58) {\n      return headDelimiterValueBefore(code);\n    }\n    if (code === 124) {\n      seen = true;\n      // If we start with a pipe, we open a cell marker.\n      effects.enter('tableCellDivider');\n      effects.consume(code);\n      effects.exit('tableCellDivider');\n      return headDelimiterCellBefore;\n    }\n\n    // More whitespace / empty row not allowed at start.\n    return headDelimiterNok(code);\n  }\n\n  /**\n   * After `|`, before delimiter cell.\n   *\n   * ```markdown\n   *   | | a |\n   * > | | - |\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function headDelimiterCellBefore(code) {\n    if (markdownSpace(code)) {\n      return factorySpace(effects, headDelimiterValueBefore, \"whitespace\")(code);\n    }\n    return headDelimiterValueBefore(code);\n  }\n\n  /**\n   * Before delimiter cell value.\n   *\n   * ```markdown\n   *   | | a |\n   * > | | - |\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function headDelimiterValueBefore(code) {\n    // Align: left.\n    if (code === 58) {\n      sizeB += 1;\n      seen = true;\n      effects.enter('tableDelimiterMarker');\n      effects.consume(code);\n      effects.exit('tableDelimiterMarker');\n      return headDelimiterLeftAlignmentAfter;\n    }\n\n    // Align: none.\n    if (code === 45) {\n      sizeB += 1;\n      // To do: seems weird that this *isn’t* left aligned, but that state is used?\n      return headDelimiterLeftAlignmentAfter(code);\n    }\n    if (code === null || markdownLineEnding(code)) {\n      return headDelimiterCellAfter(code);\n    }\n    return headDelimiterNok(code);\n  }\n\n  /**\n   * After delimiter cell left alignment marker.\n   *\n   * ```markdown\n   *   | | a  |\n   * > | | :- |\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function headDelimiterLeftAlignmentAfter(code) {\n    if (code === 45) {\n      effects.enter('tableDelimiterFiller');\n      return headDelimiterFiller(code);\n    }\n\n    // Anything else is not ok after the left-align colon.\n    return headDelimiterNok(code);\n  }\n\n  /**\n   * In delimiter cell filler.\n   *\n   * ```markdown\n   *   | | a |\n   * > | | - |\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function headDelimiterFiller(code) {\n    if (code === 45) {\n      effects.consume(code);\n      return headDelimiterFiller;\n    }\n\n    // Align is `center` if it was `left`, `right` otherwise.\n    if (code === 58) {\n      seen = true;\n      effects.exit('tableDelimiterFiller');\n      effects.enter('tableDelimiterMarker');\n      effects.consume(code);\n      effects.exit('tableDelimiterMarker');\n      return headDelimiterRightAlignmentAfter;\n    }\n    effects.exit('tableDelimiterFiller');\n    return headDelimiterRightAlignmentAfter(code);\n  }\n\n  /**\n   * After delimiter cell right alignment marker.\n   *\n   * ```markdown\n   *   | |  a |\n   * > | | -: |\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function headDelimiterRightAlignmentAfter(code) {\n    if (markdownSpace(code)) {\n      return factorySpace(effects, headDelimiterCellAfter, \"whitespace\")(code);\n    }\n    return headDelimiterCellAfter(code);\n  }\n\n  /**\n   * After delimiter cell.\n   *\n   * ```markdown\n   *   | |  a |\n   * > | | -: |\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function headDelimiterCellAfter(code) {\n    if (code === 124) {\n      return headDelimiterBefore(code);\n    }\n    if (code === null || markdownLineEnding(code)) {\n      // Exit when:\n      // * there was no `:` or `|` at all (it’s a thematic break or setext\n      //   underline instead)\n      // * the header cell count is not the delimiter cell count\n      if (!seen || size !== sizeB) {\n        return headDelimiterNok(code);\n      }\n\n      // Note: in markdown-rs`, a reset is needed here.\n      effects.exit('tableDelimiterRow');\n      effects.exit('tableHead');\n      // To do: in `markdown-rs`, resolvers need to be registered manually.\n      // effects.register_resolver(ResolveName::GfmTable)\n      return ok(code);\n    }\n    return headDelimiterNok(code);\n  }\n\n  /**\n   * In delimiter row, at a disallowed byte.\n   *\n   * ```markdown\n   *   | | a |\n   * > | | x |\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function headDelimiterNok(code) {\n    // Note: in `markdown-rs`, we need to reset, in `micromark-js` we don‘t.\n    return nok(code);\n  }\n\n  /**\n   * Before table body row.\n   *\n   * ```markdown\n   *   | | a |\n   *   | | - |\n   * > | | b |\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function bodyRowStart(code) {\n    // Note: in `markdown-rs` we need to manually take care of a prefix,\n    // but in `micromark-js` that is done for us, so if we’re here, we’re\n    // never at whitespace.\n    effects.enter('tableRow');\n    return bodyRowBreak(code);\n  }\n\n  /**\n   * At break in table body row.\n   *\n   * ```markdown\n   *   | | a |\n   *   | | - |\n   * > | | b |\n   *     ^\n   *       ^\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function bodyRowBreak(code) {\n    if (code === 124) {\n      effects.enter('tableCellDivider');\n      effects.consume(code);\n      effects.exit('tableCellDivider');\n      return bodyRowBreak;\n    }\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('tableRow');\n      return ok(code);\n    }\n    if (markdownSpace(code)) {\n      return factorySpace(effects, bodyRowBreak, \"whitespace\")(code);\n    }\n\n    // Anything else is cell content.\n    effects.enter(\"data\");\n    return bodyRowData(code);\n  }\n\n  /**\n   * In table body row data.\n   *\n   * ```markdown\n   *   | | a |\n   *   | | - |\n   * > | | b |\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function bodyRowData(code) {\n    if (code === null || code === 124 || markdownLineEndingOrSpace(code)) {\n      effects.exit(\"data\");\n      return bodyRowBreak(code);\n    }\n    effects.consume(code);\n    return code === 92 ? bodyRowEscape : bodyRowData;\n  }\n\n  /**\n   * In table body row escape.\n   *\n   * ```markdown\n   *   | | a    |\n   *   | | ---- |\n   * > | | b\\-c |\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function bodyRowEscape(code) {\n    if (code === 92 || code === 124) {\n      effects.consume(code);\n      return bodyRowData;\n    }\n    return bodyRowData(code);\n  }\n}\n\n/** @type {Resolver} */\n\nfunction resolveTable(events, context) {\n  let index = -1;\n  let inFirstCellAwaitingPipe = true;\n  /** @type {RowKind} */\n  let rowKind = 0;\n  /** @type {Range} */\n  let lastCell = [0, 0, 0, 0];\n  /** @type {Range} */\n  let cell = [0, 0, 0, 0];\n  let afterHeadAwaitingFirstBodyRow = false;\n  let lastTableEnd = 0;\n  /** @type {Token | undefined} */\n  let currentTable;\n  /** @type {Token | undefined} */\n  let currentBody;\n  /** @type {Token | undefined} */\n  let currentCell;\n  const map = new EditMap();\n  while (++index < events.length) {\n    const event = events[index];\n    const token = event[1];\n    if (event[0] === 'enter') {\n      // Start of head.\n      if (token.type === 'tableHead') {\n        afterHeadAwaitingFirstBodyRow = false;\n\n        // Inject previous (body end and) table end.\n        if (lastTableEnd !== 0) {\n          flushTableEnd(map, context, lastTableEnd, currentTable, currentBody);\n          currentBody = undefined;\n          lastTableEnd = 0;\n        }\n\n        // Inject table start.\n        currentTable = {\n          type: 'table',\n          start: Object.assign({}, token.start),\n          // Note: correct end is set later.\n          end: Object.assign({}, token.end)\n        };\n        map.add(index, 0, [['enter', currentTable, context]]);\n      } else if (token.type === 'tableRow' || token.type === 'tableDelimiterRow') {\n        inFirstCellAwaitingPipe = true;\n        currentCell = undefined;\n        lastCell = [0, 0, 0, 0];\n        cell = [0, index + 1, 0, 0];\n\n        // Inject table body start.\n        if (afterHeadAwaitingFirstBodyRow) {\n          afterHeadAwaitingFirstBodyRow = false;\n          currentBody = {\n            type: 'tableBody',\n            start: Object.assign({}, token.start),\n            // Note: correct end is set later.\n            end: Object.assign({}, token.end)\n          };\n          map.add(index, 0, [['enter', currentBody, context]]);\n        }\n        rowKind = token.type === 'tableDelimiterRow' ? 2 : currentBody ? 3 : 1;\n      }\n      // Cell data.\n      else if (rowKind && (token.type === \"data\" || token.type === 'tableDelimiterMarker' || token.type === 'tableDelimiterFiller')) {\n        inFirstCellAwaitingPipe = false;\n\n        // First value in cell.\n        if (cell[2] === 0) {\n          if (lastCell[1] !== 0) {\n            cell[0] = cell[1];\n            currentCell = flushCell(map, context, lastCell, rowKind, undefined, currentCell);\n            lastCell = [0, 0, 0, 0];\n          }\n          cell[2] = index;\n        }\n      } else if (token.type === 'tableCellDivider') {\n        if (inFirstCellAwaitingPipe) {\n          inFirstCellAwaitingPipe = false;\n        } else {\n          if (lastCell[1] !== 0) {\n            cell[0] = cell[1];\n            currentCell = flushCell(map, context, lastCell, rowKind, undefined, currentCell);\n          }\n          lastCell = cell;\n          cell = [lastCell[1], index, 0, 0];\n        }\n      }\n    }\n    // Exit events.\n    else if (token.type === 'tableHead') {\n      afterHeadAwaitingFirstBodyRow = true;\n      lastTableEnd = index;\n    } else if (token.type === 'tableRow' || token.type === 'tableDelimiterRow') {\n      lastTableEnd = index;\n      if (lastCell[1] !== 0) {\n        cell[0] = cell[1];\n        currentCell = flushCell(map, context, lastCell, rowKind, index, currentCell);\n      } else if (cell[1] !== 0) {\n        currentCell = flushCell(map, context, cell, rowKind, index, currentCell);\n      }\n      rowKind = 0;\n    } else if (rowKind && (token.type === \"data\" || token.type === 'tableDelimiterMarker' || token.type === 'tableDelimiterFiller')) {\n      cell[3] = index;\n    }\n  }\n  if (lastTableEnd !== 0) {\n    flushTableEnd(map, context, lastTableEnd, currentTable, currentBody);\n  }\n  map.consume(context.events);\n\n  // To do: move this into `html`, when events are exposed there.\n  // That’s what `markdown-rs` does.\n  // That needs updates to `mdast-util-gfm-table`.\n  index = -1;\n  while (++index < context.events.length) {\n    const event = context.events[index];\n    if (event[0] === 'enter' && event[1].type === 'table') {\n      event[1]._align = gfmTableAlign(context.events, index);\n    }\n  }\n  return events;\n}\n\n/**\n * Generate a cell.\n *\n * @param {EditMap} map\n * @param {Readonly<TokenizeContext>} context\n * @param {Readonly<Range>} range\n * @param {RowKind} rowKind\n * @param {number | undefined} rowEnd\n * @param {Token | undefined} previousCell\n * @returns {Token | undefined}\n */\n// eslint-disable-next-line max-params\nfunction flushCell(map, context, range, rowKind, rowEnd, previousCell) {\n  // `markdown-rs` uses:\n  // rowKind === 2 ? 'tableDelimiterCell' : 'tableCell'\n  const groupName = rowKind === 1 ? 'tableHeader' : rowKind === 2 ? 'tableDelimiter' : 'tableData';\n  // `markdown-rs` uses:\n  // rowKind === 2 ? 'tableDelimiterCellValue' : 'tableCellText'\n  const valueName = 'tableContent';\n\n  // Insert an exit for the previous cell, if there is one.\n  //\n  // ```markdown\n  // > | | aa | bb | cc |\n  //          ^-- exit\n  //           ^^^^-- this cell\n  // ```\n  if (range[0] !== 0) {\n    previousCell.end = Object.assign({}, getPoint(context.events, range[0]));\n    map.add(range[0], 0, [['exit', previousCell, context]]);\n  }\n\n  // Insert enter of this cell.\n  //\n  // ```markdown\n  // > | | aa | bb | cc |\n  //           ^-- enter\n  //           ^^^^-- this cell\n  // ```\n  const now = getPoint(context.events, range[1]);\n  previousCell = {\n    type: groupName,\n    start: Object.assign({}, now),\n    // Note: correct end is set later.\n    end: Object.assign({}, now)\n  };\n  map.add(range[1], 0, [['enter', previousCell, context]]);\n\n  // Insert text start at first data start and end at last data end, and\n  // remove events between.\n  //\n  // ```markdown\n  // > | | aa | bb | cc |\n  //            ^-- enter\n  //             ^-- exit\n  //           ^^^^-- this cell\n  // ```\n  if (range[2] !== 0) {\n    const relatedStart = getPoint(context.events, range[2]);\n    const relatedEnd = getPoint(context.events, range[3]);\n    /** @type {Token} */\n    const valueToken = {\n      type: valueName,\n      start: Object.assign({}, relatedStart),\n      end: Object.assign({}, relatedEnd)\n    };\n    map.add(range[2], 0, [['enter', valueToken, context]]);\n    if (rowKind !== 2) {\n      // Fix positional info on remaining events\n      const start = context.events[range[2]];\n      const end = context.events[range[3]];\n      start[1].end = Object.assign({}, end[1].end);\n      start[1].type = \"chunkText\";\n      start[1].contentType = \"text\";\n\n      // Remove if needed.\n      if (range[3] > range[2] + 1) {\n        const a = range[2] + 1;\n        const b = range[3] - range[2] - 1;\n        map.add(a, b, []);\n      }\n    }\n    map.add(range[3] + 1, 0, [['exit', valueToken, context]]);\n  }\n\n  // Insert an exit for the last cell, if at the row end.\n  //\n  // ```markdown\n  // > | | aa | bb | cc |\n  //                    ^-- exit\n  //               ^^^^^^-- this cell (the last one contains two “between” parts)\n  // ```\n  if (rowEnd !== undefined) {\n    previousCell.end = Object.assign({}, getPoint(context.events, rowEnd));\n    map.add(rowEnd, 0, [['exit', previousCell, context]]);\n    previousCell = undefined;\n  }\n  return previousCell;\n}\n\n/**\n * Generate table end (and table body end).\n *\n * @param {Readonly<EditMap>} map\n * @param {Readonly<TokenizeContext>} context\n * @param {number} index\n * @param {Token} table\n * @param {Token | undefined} tableBody\n */\n// eslint-disable-next-line max-params\nfunction flushTableEnd(map, context, index, table, tableBody) {\n  /** @type {Array<Event>} */\n  const exits = [];\n  const related = getPoint(context.events, index);\n  if (tableBody) {\n    tableBody.end = Object.assign({}, related);\n    exits.push(['exit', tableBody, context]);\n  }\n  table.end = Object.assign({}, related);\n  exits.push(['exit', table, context]);\n  map.add(index + 1, 0, exits);\n}\n\n/**\n * @param {Readonly<Array<Event>>} events\n * @param {number} index\n * @returns {Readonly<Point>}\n */\nfunction getPoint(events, index) {\n  const event = events[index];\n  const side = event[0] === 'enter' ? 'start' : 'end';\n  return event[1][side];\n}","/**\n * @import {HtmlExtension} from 'micromark-util-types'\n */\n\nconst alignment = {\n  none: '',\n  left: ' align=\"left\"',\n  right: ' align=\"right\"',\n  center: ' align=\"center\"'\n};\n\n// To do: micromark@5: use `infer` here, when all events are exposed.\n\n/**\n * Create an HTML extension for `micromark` to support GitHub tables when\n * serializing to HTML.\n *\n * @returns {HtmlExtension}\n *   Extension for `micromark` that can be passed in `htmlExtensions` to\n *   support GitHub tables when serializing to HTML.\n */\nexport function gfmTableHtml() {\n  return {\n    enter: {\n      table(token) {\n        const tableAlign = token._align;\n        this.lineEndingIfNeeded();\n        this.tag('<table>');\n        this.setData('tableAlign', tableAlign);\n      },\n      tableBody() {\n        this.tag('<tbody>');\n      },\n      tableData() {\n        const tableAlign = this.getData('tableAlign');\n        const tableColumn = this.getData('tableColumn');\n        const align = alignment[tableAlign[tableColumn]];\n        if (align === undefined) {\n          // Capture results to ignore them.\n          this.buffer();\n        } else {\n          this.lineEndingIfNeeded();\n          this.tag('<td' + align + '>');\n        }\n      },\n      tableHead() {\n        this.lineEndingIfNeeded();\n        this.tag('<thead>');\n      },\n      tableHeader() {\n        const tableAlign = this.getData('tableAlign');\n        const tableColumn = this.getData('tableColumn');\n        const align = alignment[tableAlign[tableColumn]];\n        this.lineEndingIfNeeded();\n        this.tag('<th' + align + '>');\n      },\n      tableRow() {\n        this.setData('tableColumn', 0);\n        this.lineEndingIfNeeded();\n        this.tag('<tr>');\n      }\n    },\n    exit: {\n      // Overwrite the default code text data handler to unescape escaped pipes when\n      // they are in tables.\n      codeTextData(token) {\n        let value = this.sliceSerialize(token);\n        if (this.getData('tableAlign')) {\n          value = value.replace(/\\\\([\\\\|])/g, replace);\n        }\n        this.raw(this.encode(value));\n      },\n      table() {\n        this.setData('tableAlign');\n        // Note: we don’t set `slurpAllLineEndings` anymore, in delimiter rows,\n        // but we do need to reset it to match a funky newline GH generates for\n        // list items combined with tables.\n        this.setData('slurpAllLineEndings');\n        this.lineEndingIfNeeded();\n        this.tag('</table>');\n      },\n      tableBody() {\n        this.lineEndingIfNeeded();\n        this.tag('</tbody>');\n      },\n      tableData() {\n        const tableAlign = this.getData('tableAlign');\n        const tableColumn = this.getData('tableColumn');\n        if (tableColumn in tableAlign) {\n          this.tag('</td>');\n          this.setData('tableColumn', tableColumn + 1);\n        } else {\n          // Stop capturing.\n          this.resume();\n        }\n      },\n      tableHead() {\n        this.lineEndingIfNeeded();\n        this.tag('</thead>');\n      },\n      tableHeader() {\n        const tableColumn = this.getData('tableColumn');\n        this.tag('</th>');\n        this.setData('tableColumn', tableColumn + 1);\n      },\n      tableRow() {\n        const tableAlign = this.getData('tableAlign');\n        let tableColumn = this.getData('tableColumn');\n        while (tableColumn < tableAlign.length) {\n          this.lineEndingIfNeeded();\n          this.tag('<td' + alignment[tableAlign[tableColumn]] + '></td>');\n          tableColumn++;\n        }\n        this.setData('tableColumn', tableColumn);\n        this.lineEndingIfNeeded();\n        this.tag('</tr>');\n      }\n    }\n  };\n}\n\n/**\n * @param {string} $0\n * @param {string} $1\n * @returns {string}\n */\nfunction replace($0, $1) {\n  // Pipes work, backslashes don’t (but can’t escape pipes).\n  return $1 === '|' ? $1 : $0;\n}","/**\n * @typedef {import('micromark-util-types').CompileContext} CompileContext\n * @typedef {import('micromark-util-types').HtmlExtension} HtmlExtension\n * @typedef {import('micromark-util-types').Token} Token\n */\n\n// An opening or closing tag start, followed by a case-insensitive specific tag name,\n// followed by HTML whitespace, a greater than, or a slash.\nconst reFlow =\n  /<(\\/?)(iframe|noembed|noframes|plaintext|script|style|title|textarea|xmp)(?=[\\t\\n\\f\\r />])/gi\n\n// As HTML (text) parses tags separately (and very strictly), we don’t need to be\n// global.\nconst reText = new RegExp('^' + reFlow.source, 'i')\n\n/**\n * Create an HTML extension for `micromark` to support GitHubs weird and\n * useless tagfilter when serializing to HTML.\n *\n * @returns {HtmlExtension}\n *   Extension for `micromark` that can be passed in `htmlExtensions` to support\n *   GitHubs weird and useless tagfilter when serializing to HTML.\n */\nexport function gfmTagfilterHtml() {\n  return {\n    exit: {\n      htmlFlowData(token) {\n        exitHtmlData.call(this, token, reFlow)\n      },\n      htmlTextData(token) {\n        exitHtmlData.call(this, token, reText)\n      }\n    }\n  }\n}\n\n/**\n * @this {CompileContext}\n * @param {Token} token\n * @param {RegExp} filter\n * @returns {undefined}\n */\nfunction exitHtmlData(token, filter) {\n  let value = this.sliceSerialize(token)\n\n  if (this.options.allowDangerousHtml) {\n    value = value.replace(filter, '&lt;$1$2')\n  }\n\n  this.raw(this.encode(value))\n}\n","/**\n * @import {Extension, State, TokenizeContext, Tokenizer} from 'micromark-util-types'\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding, markdownLineEndingOrSpace, markdownSpace } from 'micromark-util-character';\nconst tasklistCheck = {\n  name: 'tasklistCheck',\n  tokenize: tokenizeTasklistCheck\n};\n\n/**\n * Create an HTML extension for `micromark` to support GFM task list items\n * syntax.\n *\n * @returns {Extension}\n *   Extension for `micromark` that can be passed in `htmlExtensions` to\n *   support GFM task list items when serializing to HTML.\n */\nexport function gfmTaskListItem() {\n  return {\n    text: {\n      [91]: tasklistCheck\n    }\n  };\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeTasklistCheck(effects, ok, nok) {\n  const self = this;\n  return open;\n\n  /**\n   * At start of task list item check.\n   *\n   * ```markdown\n   * > | * [x] y.\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (\n    // Exit if there’s stuff before.\n    self.previous !== null ||\n    // Exit if not in the first content that is the first child of a list\n    // item.\n    !self._gfmTasklistFirstContentOfListItem) {\n      return nok(code);\n    }\n    effects.enter('taskListCheck');\n    effects.enter('taskListCheckMarker');\n    effects.consume(code);\n    effects.exit('taskListCheckMarker');\n    return inside;\n  }\n\n  /**\n   * In task list item check.\n   *\n   * ```markdown\n   * > | * [x] y.\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    // Currently we match how GH works in files.\n    // To match how GH works in comments, use `markdownSpace` (`[\\t ]`) instead\n    // of `markdownLineEndingOrSpace` (`[\\t\\n\\r ]`).\n    if (markdownLineEndingOrSpace(code)) {\n      effects.enter('taskListCheckValueUnchecked');\n      effects.consume(code);\n      effects.exit('taskListCheckValueUnchecked');\n      return close;\n    }\n    if (code === 88 || code === 120) {\n      effects.enter('taskListCheckValueChecked');\n      effects.consume(code);\n      effects.exit('taskListCheckValueChecked');\n      return close;\n    }\n    return nok(code);\n  }\n\n  /**\n   * At close of task list item check.\n   *\n   * ```markdown\n   * > | * [x] y.\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function close(code) {\n    if (code === 93) {\n      effects.enter('taskListCheckMarker');\n      effects.consume(code);\n      effects.exit('taskListCheckMarker');\n      effects.exit('taskListCheck');\n      return after;\n    }\n    return nok(code);\n  }\n\n  /**\n   * @type {State}\n   */\n  function after(code) {\n    // EOL in paragraph means there must be something else after it.\n    if (markdownLineEnding(code)) {\n      return ok(code);\n    }\n\n    // Space or tab?\n    // Check what comes after.\n    if (markdownSpace(code)) {\n      return effects.check({\n        tokenize: spaceThenNonSpace\n      }, ok, nok)(code);\n    }\n\n    // EOF, or non-whitespace, both wrong.\n    return nok(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction spaceThenNonSpace(effects, ok, nok) {\n  return factorySpace(effects, after, \"whitespace\");\n\n  /**\n   * After whitespace, after task list item check.\n   *\n   * ```markdown\n   * > | * [x] y.\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    // EOF means there was nothing, so bad.\n    // EOL means there’s content after it, so good.\n    // Impossible to have more spaces.\n    // Anything else is good.\n    return code === null ? nok(code) : ok(code);\n  }\n}","/**\n * @import {HtmlExtension} from 'micromark-util-types'\n */\n\n/**\n * Create an HTML extension for `micromark` to support GFM task list items when\n * serializing to HTML.\n *\n * @returns {HtmlExtension}\n *   Extension for `micromark` that can be passed in `htmlExtensions` to\n *   support GFM task list items when serializing to HTML.\n */\nexport function gfmTaskListItemHtml() {\n  return {\n    enter: {\n      taskListCheck() {\n        this.tag('<input type=\"checkbox\" disabled=\"\" ');\n      }\n    },\n    exit: {\n      taskListCheck() {\n        this.tag('/>');\n      },\n      taskListCheckValueChecked() {\n        this.tag('checked=\"\" ');\n      }\n    }\n  };\n}","/**\n * @typedef {import('micromark-extension-gfm-footnote').HtmlOptions} HtmlOptions\n * @typedef {import('micromark-extension-gfm-strikethrough').Options} Options\n * @typedef {import('micromark-util-types').Extension} Extension\n * @typedef {import('micromark-util-types').HtmlExtension} HtmlExtension\n */\n\nimport {\n  combineExtensions,\n  combineHtmlExtensions\n} from 'micromark-util-combine-extensions'\nimport {\n  gfmAutolinkLiteral,\n  gfmAutolinkLiteralHtml\n} from 'micromark-extension-gfm-autolink-literal'\nimport {gfmFootnote, gfmFootnoteHtml} from 'micromark-extension-gfm-footnote'\nimport {\n  gfmStrikethrough,\n  gfmStrikethroughHtml\n} from 'micromark-extension-gfm-strikethrough'\nimport {gfmTable, gfmTableHtml} from 'micromark-extension-gfm-table'\nimport {gfmTagfilterHtml} from 'micromark-extension-gfm-tagfilter'\nimport {\n  gfmTaskListItem,\n  gfmTaskListItemHtml\n} from 'micromark-extension-gfm-task-list-item'\n\n/**\n * Create an extension for `micromark` to enable GFM syntax.\n *\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n *\n *   Passed to `micromark-extens-gfm-strikethrough`.\n * @returns {Extension}\n *   Extension for `micromark` that can be passed in `extensions` to enable GFM\n *   syntax.\n */\nexport function gfm(options) {\n  return combineExtensions([\n    gfmAutolinkLiteral(),\n    gfmFootnote(),\n    gfmStrikethrough(options),\n    gfmTable(),\n    gfmTaskListItem()\n  ])\n}\n\n/**\n * Create an extension for `micromark` to support GFM when serializing to HTML.\n *\n * @param {HtmlOptions | null | undefined} [options]\n *   Configuration (optional).\n *\n *   Passed to `micromark-extens-gfm-footnote`.\n * @returns {HtmlExtension}\n *   Extension for `micromark` that can be passed in `htmlExtensions` to\n *   support GFM when serializing to HTML.\n */\nexport function gfmHtml(options) {\n  return combineHtmlExtensions([\n    gfmAutolinkLiteralHtml(),\n    gfmFootnoteHtml(options),\n    gfmStrikethroughHtml(),\n    gfmTableHtml(),\n    gfmTagfilterHtml(),\n    gfmTaskListItemHtml()\n  ])\n}\n","/**\n * @import {Root} from 'mdast'\n * @import {Options} from 'remark-gfm'\n * @import {} from 'remark-parse'\n * @import {} from 'remark-stringify'\n * @import {Processor} from 'unified'\n */\n\nimport {gfmFromMarkdown, gfmToMarkdown} from 'mdast-util-gfm'\nimport {gfm} from 'micromark-extension-gfm'\n\n/** @type {Options} */\nconst emptyOptions = {}\n\n/**\n * Add support GFM (autolink literals, footnotes, strikethrough, tables,\n * tasklists).\n *\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n * @returns {undefined}\n *   Nothing.\n */\nexport default function remarkGfm(options) {\n  // @ts-expect-error: TS is wrong about `this`.\n  // eslint-disable-next-line unicorn/no-this-assignment\n  const self = /** @type {Processor<Root>} */ (this)\n  const settings = options || emptyOptions\n  const data = self.data()\n\n  const micromarkExtensions =\n    data.micromarkExtensions || (data.micromarkExtensions = [])\n  const fromMarkdownExtensions =\n    data.fromMarkdownExtensions || (data.fromMarkdownExtensions = [])\n  const toMarkdownExtensions =\n    data.toMarkdownExtensions || (data.toMarkdownExtensions = [])\n\n  micromarkExtensions.push(gfm(settings))\n  fromMarkdownExtensions.push(gfmFromMarkdown())\n  toMarkdownExtensions.push(gfmToMarkdown(settings))\n}\n","export const VOID       = -1;\nexport const PRIMITIVE  = 0;\nexport const ARRAY      = 1;\nexport const OBJECT     = 2;\nexport const DATE       = 3;\nexport const REGEXP     = 4;\nexport const MAP        = 5;\nexport const SET        = 6;\nexport const ERROR      = 7;\nexport const BIGINT     = 8;\n// export const SYMBOL = 9;\n","import {\n  VOID, PRIMITIVE,\n  ARRAY, OBJECT,\n  DATE, REGEXP, MAP, SET,\n  ERROR, BIGINT\n} from './types.js';\n\nconst env = typeof self === 'object' ? self : globalThis;\n\nconst deserializer = ($, _) => {\n  const as = (out, index) => {\n    $.set(index, out);\n    return out;\n  };\n\n  const unpair = index => {\n    if ($.has(index))\n      return $.get(index);\n\n    const [type, value] = _[index];\n    switch (type) {\n      case PRIMITIVE:\n      case VOID:\n        return as(value, index);\n      case ARRAY: {\n        const arr = as([], index);\n        for (const index of value)\n          arr.push(unpair(index));\n        return arr;\n      }\n      case OBJECT: {\n        const object = as({}, index);\n        for (const [key, index] of value)\n          object[unpair(key)] = unpair(index);\n        return object;\n      }\n      case DATE:\n        return as(new Date(value), index);\n      case REGEXP: {\n        const {source, flags} = value;\n        return as(new RegExp(source, flags), index);\n      }\n      case MAP: {\n        const map = as(new Map, index);\n        for (const [key, index] of value)\n          map.set(unpair(key), unpair(index));\n        return map;\n      }\n      case SET: {\n        const set = as(new Set, index);\n        for (const index of value)\n          set.add(unpair(index));\n        return set;\n      }\n      case ERROR: {\n        const {name, message} = value;\n        return as(new env[name](message), index);\n      }\n      case BIGINT:\n        return as(BigInt(value), index);\n      case 'BigInt':\n        return as(Object(BigInt(value)), index);\n      case 'ArrayBuffer':\n        return as(new Uint8Array(value).buffer, value);\n      case 'DataView': {\n        const { buffer } = new Uint8Array(value);\n        return as(new DataView(buffer), value);\n      }\n    }\n    return as(new env[type](value), index);\n  };\n\n  return unpair;\n};\n\n/**\n * @typedef {Array<string,any>} Record a type representation\n */\n\n/**\n * Returns a deserialized value from a serialized array of Records.\n * @param {Record[]} serialized a previously serialized value.\n * @returns {any}\n */\nexport const deserialize = serialized => deserializer(new Map, serialized)(0);\n","import {\n  VOID, PRIMITIVE,\n  ARRAY, OBJECT,\n  DATE, REGEXP, MAP, SET,\n  ERROR, BIGINT\n} from './types.js';\n\nconst EMPTY = '';\n\nconst {toString} = {};\nconst {keys} = Object;\n\nconst typeOf = value => {\n  const type = typeof value;\n  if (type !== 'object' || !value)\n    return [PRIMITIVE, type];\n\n  const asString = toString.call(value).slice(8, -1);\n  switch (asString) {\n    case 'Array':\n      return [ARRAY, EMPTY];\n    case 'Object':\n      return [OBJECT, EMPTY];\n    case 'Date':\n      return [DATE, EMPTY];\n    case 'RegExp':\n      return [REGEXP, EMPTY];\n    case 'Map':\n      return [MAP, EMPTY];\n    case 'Set':\n      return [SET, EMPTY];\n    case 'DataView':\n      return [ARRAY, asString];\n  }\n\n  if (asString.includes('Array'))\n    return [ARRAY, asString];\n\n  if (asString.includes('Error'))\n    return [ERROR, asString];\n\n  return [OBJECT, asString];\n};\n\nconst shouldSkip = ([TYPE, type]) => (\n  TYPE === PRIMITIVE &&\n  (type === 'function' || type === 'symbol')\n);\n\nconst serializer = (strict, json, $, _) => {\n\n  const as = (out, value) => {\n    const index = _.push(out) - 1;\n    $.set(value, index);\n    return index;\n  };\n\n  const pair = value => {\n    if ($.has(value))\n      return $.get(value);\n\n    let [TYPE, type] = typeOf(value);\n    switch (TYPE) {\n      case PRIMITIVE: {\n        let entry = value;\n        switch (type) {\n          case 'bigint':\n            TYPE = BIGINT;\n            entry = value.toString();\n            break;\n          case 'function':\n          case 'symbol':\n            if (strict)\n              throw new TypeError('unable to serialize ' + type);\n            entry = null;\n            break;\n          case 'undefined':\n            return as([VOID], value);\n        }\n        return as([TYPE, entry], value);\n      }\n      case ARRAY: {\n        if (type) {\n          let spread = value;\n          if (type === 'DataView') {\n            spread = new Uint8Array(value.buffer);\n          }\n          else if (type === 'ArrayBuffer') {\n            spread = new Uint8Array(value);\n          }\n          return as([type, [...spread]], value);\n        }\n\n        const arr = [];\n        const index = as([TYPE, arr], value);\n        for (const entry of value)\n          arr.push(pair(entry));\n        return index;\n      }\n      case OBJECT: {\n        if (type) {\n          switch (type) {\n            case 'BigInt':\n              return as([type, value.toString()], value);\n            case 'Boolean':\n            case 'Number':\n            case 'String':\n              return as([type, value.valueOf()], value);\n          }\n        }\n\n        if (json && ('toJSON' in value))\n          return pair(value.toJSON());\n\n        const entries = [];\n        const index = as([TYPE, entries], value);\n        for (const key of keys(value)) {\n          if (strict || !shouldSkip(typeOf(value[key])))\n            entries.push([pair(key), pair(value[key])]);\n        }\n        return index;\n      }\n      case DATE:\n        return as([TYPE, value.toISOString()], value);\n      case REGEXP: {\n        const {source, flags} = value;\n        return as([TYPE, {source, flags}], value);\n      }\n      case MAP: {\n        const entries = [];\n        const index = as([TYPE, entries], value);\n        for (const [key, entry] of value) {\n          if (strict || !(shouldSkip(typeOf(key)) || shouldSkip(typeOf(entry))))\n            entries.push([pair(key), pair(entry)]);\n        }\n        return index;\n      }\n      case SET: {\n        const entries = [];\n        const index = as([TYPE, entries], value);\n        for (const entry of value) {\n          if (strict || !shouldSkip(typeOf(entry)))\n            entries.push(pair(entry));\n        }\n        return index;\n      }\n    }\n\n    const {message} = value;\n    return as([TYPE, {name: type, message}], value);\n  };\n\n  return pair;\n};\n\n/**\n * @typedef {Array<string,any>} Record a type representation\n */\n\n/**\n * Returns an array of serialized Records.\n * @param {any} value a serializable value.\n * @param {{json?: boolean, lossy?: boolean}?} options an object with a `lossy` or `json` property that,\n *  if `true`, will not throw errors on incompatible types, and behave more\n *  like JSON stringify would behave. Symbol and Function will be discarded.\n * @returns {Record[]}\n */\n export const serialize = (value, {json, lossy} = {}) => {\n  const _ = [];\n  return serializer(!(json || lossy), !!json, new Map, _)(value), _;\n};\n","import {deserialize} from './deserialize.js';\nimport {serialize} from './serialize.js';\n\n/**\n * @typedef {Array<string,any>} Record a type representation\n */\n\n/**\n * Returns an array of serialized Records.\n * @param {any} any a serializable value.\n * @param {{transfer?: any[], json?: boolean, lossy?: boolean}?} options an object with\n * a transfer option (ignored when polyfilled) and/or non standard fields that\n * fallback to the polyfill if present.\n * @returns {Record[]}\n */\nexport default typeof structuredClone === \"function\" ?\n  /* c8 ignore start */\n  (any, options) => (\n    options && ('json' in options || 'lossy' in options) ?\n      deserialize(serialize(any, options)) : structuredClone(any)\n  ) :\n  (any, options) => deserialize(serialize(any, options));\n  /* c8 ignore stop */\n\nexport {deserialize, serialize};\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Point} Point\n * @typedef {import('unist').Position} Position\n */\n\n/**\n * @typedef NodeLike\n * @property {string} type\n * @property {PositionLike | null | undefined} [position]\n *\n * @typedef PositionLike\n * @property {PointLike | null | undefined} [start]\n * @property {PointLike | null | undefined} [end]\n *\n * @typedef PointLike\n * @property {number | null | undefined} [line]\n * @property {number | null | undefined} [column]\n * @property {number | null | undefined} [offset]\n */\n\n/**\n * Get the ending point of `node`.\n *\n * @param node\n *   Node.\n * @returns\n *   Point.\n */\nexport const pointEnd = point('end')\n\n/**\n * Get the starting point of `node`.\n *\n * @param node\n *   Node.\n * @returns\n *   Point.\n */\nexport const pointStart = point('start')\n\n/**\n * Get the positional info of `node`.\n *\n * @param {'end' | 'start'} type\n *   Side.\n * @returns\n *   Getter.\n */\nfunction point(type) {\n  return point\n\n  /**\n   * Get the point info of `node` at a bound side.\n   *\n   * @param {Node | NodeLike | null | undefined} [node]\n   * @returns {Point | undefined}\n   */\n  function point(node) {\n    const point = (node && node.position && node.position[type]) || {}\n\n    if (\n      typeof point.line === 'number' &&\n      point.line > 0 &&\n      typeof point.column === 'number' &&\n      point.column > 0\n    ) {\n      return {\n        line: point.line,\n        column: point.column,\n        offset:\n          typeof point.offset === 'number' && point.offset > -1\n            ? point.offset\n            : undefined\n      }\n    }\n  }\n}\n\n/**\n * Get the positional info of `node`.\n *\n * @param {Node | NodeLike | null | undefined} [node]\n *   Node.\n * @returns {Position | undefined}\n *   Position.\n */\nexport function position(node) {\n  const start = pointStart(node)\n  const end = pointEnd(node)\n\n  if (start && end) {\n    return {start, end}\n  }\n}\n","/**\n * @import {Schema} from 'hast-util-sanitize'\n */\n\n// Couple of ARIA attributes allowed in several, but not all, places.\nconst aria = ['ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy']\n\n/**\n * Default schema.\n *\n * Follows GitHub style sanitation.\n *\n * @type {Schema}\n */\nexport const defaultSchema = {\n  ancestors: {\n    tbody: ['table'],\n    td: ['table'],\n    th: ['table'],\n    thead: ['table'],\n    tfoot: ['table'],\n    tr: ['table']\n  },\n  attributes: {\n    a: [\n      ...aria,\n      // Note: these 3 are used by GFM footnotes, they do work on all links.\n      'dataFootnoteBackref',\n      'dataFootnoteRef',\n      ['className', 'data-footnote-backref'],\n      'href'\n    ],\n    blockquote: ['cite'],\n    // Note: this class is not normally allowed by GH, when manually writing\n    // `code` as HTML in markdown, they adds it some other way.\n    // We can’t do that, so we have to allow it.\n    code: [['className', /^language-./]],\n    del: ['cite'],\n    div: ['itemScope', 'itemType'],\n    dl: [...aria],\n    // Note: this is used by GFM footnotes.\n    h2: [['className', 'sr-only']],\n    img: [...aria, 'longDesc', 'src'],\n    // Note: `input` is not normally allowed by GH, when manually writing\n    // it in markdown, they add it from tasklists some other way.\n    // We can’t do that, so we have to allow it.\n    input: [\n      ['disabled', true],\n      ['type', 'checkbox']\n    ],\n    ins: ['cite'],\n    // Note: this class is not normally allowed by GH, when manually writing\n    // `li` as HTML in markdown, they adds it some other way.\n    // We can’t do that, so we have to allow it.\n    li: [['className', 'task-list-item']],\n    // Note: this class is not normally allowed by GH, when manually writing\n    // `ol` as HTML in markdown, they adds it some other way.\n    // We can’t do that, so we have to allow it.\n    ol: [...aria, ['className', 'contains-task-list']],\n    q: ['cite'],\n    section: ['dataFootnotes', ['className', 'footnotes']],\n    source: ['srcSet'],\n    summary: [...aria],\n    table: [...aria],\n    // Note: this class is not normally allowed by GH, when manually writing\n    // `ol` as HTML in markdown, they adds it some other way.\n    // We can’t do that, so we have to allow it.\n    ul: [...aria, ['className', 'contains-task-list']],\n    '*': [\n      'abbr',\n      'accept',\n      'acceptCharset',\n      'accessKey',\n      'action',\n      'align',\n      'alt',\n      'axis',\n      'border',\n      'cellPadding',\n      'cellSpacing',\n      'char',\n      'charOff',\n      'charSet',\n      'checked',\n      'clear',\n      'colSpan',\n      'color',\n      'cols',\n      'compact',\n      'coords',\n      'dateTime',\n      'dir',\n      // Note: `disabled` is technically allowed on all elements by GH.\n      // But it is useless on everything except `input`.\n      // Because `input`s are normally not allowed, but we allow them for\n      // checkboxes due to tasklists, we allow `disabled` only there.\n      'encType',\n      'frame',\n      'hSpace',\n      'headers',\n      'height',\n      'hrefLang',\n      'htmlFor',\n      'id',\n      'isMap',\n      'itemProp',\n      'label',\n      'lang',\n      'maxLength',\n      'media',\n      'method',\n      'multiple',\n      'name',\n      'noHref',\n      'noShade',\n      'noWrap',\n      'open',\n      'prompt',\n      'readOnly',\n      'rev',\n      'rowSpan',\n      'rows',\n      'rules',\n      'scope',\n      'selected',\n      'shape',\n      'size',\n      'span',\n      'start',\n      'summary',\n      'tabIndex',\n      'title',\n      'useMap',\n      'vAlign',\n      'value',\n      'width'\n    ]\n  },\n  clobber: ['ariaDescribedBy', 'ariaLabelledBy', 'id', 'name'],\n  clobberPrefix: 'user-content-',\n  protocols: {\n    cite: ['http', 'https'],\n    href: ['http', 'https', 'irc', 'ircs', 'mailto', 'xmpp'],\n    longDesc: ['http', 'https'],\n    src: ['http', 'https']\n  },\n  required: {\n    input: {disabled: true, type: 'checkbox'}\n  },\n  strip: ['script'],\n  tagNames: [\n    'a',\n    'b',\n    'blockquote',\n    'br',\n    'code',\n    'dd',\n    'del',\n    'details',\n    'div',\n    'dl',\n    'dt',\n    'em',\n    'h1',\n    'h2',\n    'h3',\n    'h4',\n    'h5',\n    'h6',\n    'hr',\n    'i',\n    'img',\n    // Note: `input` is not normally allowed by GH, when manually writing\n    // it in markdown, they add it from tasklists some other way.\n    // We can’t do that, so we have to allow it.\n    'input',\n    'ins',\n    'kbd',\n    'li',\n    'ol',\n    'p',\n    'picture',\n    'pre',\n    'q',\n    'rp',\n    'rt',\n    'ruby',\n    's',\n    'samp',\n    'section',\n    'source',\n    'span',\n    'strike',\n    'strong',\n    'sub',\n    'summary',\n    'sup',\n    'table',\n    'tbody',\n    'td',\n    'tfoot',\n    'th',\n    'thead',\n    'tr',\n    'tt',\n    'ul',\n    'var'\n  ]\n}\n","/**\n * @import {\n *   Comment,\n *   Doctype,\n *   ElementContent,\n *   Element,\n *   Nodes,\n *   Properties,\n *   RootContent,\n *   Root,\n *   Text\n * } from 'hast'\n */\n\n/**\n * @typedef {[string, ...Array<Exclude<Properties[keyof Properties], Array<any>> | RegExp>] | string} PropertyDefinition\n *   Definition for a property.\n *\n * @typedef Schema\n *   Schema that defines what nodes and properties are allowed.\n *\n *   The default schema is `defaultSchema`, which follows how GitHub cleans.\n *   If any top-level key is missing in the given schema, the corresponding\n *   value of the default schema is used.\n *\n *   To extend the standard schema with a few changes, clone `defaultSchema`\n *   like so:\n *\n *   ```js\n *   import deepmerge from 'deepmerge'\n *   import {h} from 'hastscript'\n *   import {defaultSchema, sanitize} from 'hast-util-sanitize'\n *\n *   // This allows `className` on all elements.\n *   const schema = deepmerge(defaultSchema, {attributes: {'*': ['className']}})\n *\n *   const tree = sanitize(h('div', {className: ['foo']}), schema)\n *\n *   // `tree` still has `className`.\n *   console.log(tree)\n *   // {\n *   //   type: 'element',\n *   //   tagName: 'div',\n *   //   properties: {className: ['foo']},\n *   //   children: []\n *   // }\n *   ```\n * @property {boolean | null | undefined} [allowComments=false]\n *   Whether to allow comment nodes (default: `false`).\n *\n *   For example:\n *\n *   ```js\n *   allowComments: true\n *   ```\n * @property {boolean | null | undefined} [allowDoctypes=false]\n *   Whether to allow doctype nodes (default: `false`).\n *\n *   For example:\n *\n *   ```js\n *   allowDoctypes: true\n *   ```\n * @property {Record<string, Array<string>> | null | undefined} [ancestors]\n *   Map of tag names to a list of tag names which are required ancestors\n *   (default: `defaultSchema.ancestors`).\n *\n *   Elements with these tag names will be ignored if they occur outside of one\n *   of their allowed parents.\n *\n *   For example:\n *\n *   ```js\n *   ancestors: {\n *     tbody: ['table'],\n *     // …\n *     tr: ['table']\n *   }\n *   ```\n * @property {Record<string, Array<PropertyDefinition>> | null | undefined} [attributes]\n *   Map of tag names to allowed property names (default:\n *   `defaultSchema.attributes`).\n *\n *   The special key `'*'` as a tag name defines property names allowed on all\n *   elements.\n *\n *   The special value `'data*'` as a property name can be used to allow all\n *   `data` properties.\n *\n *   For example:\n *\n *   ```js\n *   attributes: {\n *     'ariaDescribedBy', 'ariaLabel', 'ariaLabelledBy', …, 'href'\n *     // …\n *     '*': [\n *       'abbr',\n *       'accept',\n *       'acceptCharset',\n *       // …\n *       'vAlign',\n *       'value',\n *       'width'\n *     ]\n *   }\n *   ```\n *\n *   Instead of a single string in the array, which allows any property value\n *   for the field, you can use an array to allow several values.\n *   For example, `input: ['type']` allows `type` set to any value on `input`s.\n *   But `input: [['type', 'checkbox', 'radio']]` allows `type` when set to\n *   `'checkbox'` or `'radio'`.\n *\n *   You can use regexes, so for example `span: [['className', /^hljs-/]]`\n *   allows any class that starts with `hljs-` on `span`s.\n *\n *   When comma- or space-separated values are used (such as `className`), each\n *   value in is checked individually.\n *   For example, to allow certain classes on `span`s for syntax highlighting,\n *   use `span: [['className', 'number', 'operator', 'token']]`.\n *   This will allow `'number'`, `'operator'`, and `'token'` classes, but drop\n *   others.\n * @property {Array<string> | null | undefined} [clobber]\n *   List of property names that clobber (default: `defaultSchema.clobber`).\n *\n *   For example:\n *\n *   ```js\n *   clobber: ['ariaDescribedBy', 'ariaLabelledBy', 'id', 'name']\n *   ```\n * @property {string | null | undefined} [clobberPrefix]\n *   Prefix to use before clobbering properties (default:\n *   `defaultSchema.clobberPrefix`).\n *\n *   For example:\n *\n *   ```js\n *   clobberPrefix: 'user-content-'\n *   ```\n * @property {Record<string, Array<string> | null | undefined> | null | undefined} [protocols]\n *   Map of *property names* to allowed protocols (default:\n *   `defaultSchema.protocols`).\n *\n *   This defines URLs that are always allowed to have local URLs (relative to\n *   the current website, such as `this`, `#this`, `/this`, or `?this`), and\n *   only allowed to have remote URLs (such as `https://example.com`) if they\n *   use a known protocol.\n *\n *   For example:\n *\n *   ```js\n *   protocols: {\n *     cite: ['http', 'https'],\n *     // …\n *     src: ['http', 'https']\n *   }\n *   ```\n * @property {Record<string, Record<string, Properties[keyof Properties]>> | null | undefined} [required]\n *   Map of tag names to required property names with a default value\n *   (default: `defaultSchema.required`).\n *\n *   This defines properties that must be set.\n *   If a field does not exist (after the element was made safe), these will be\n *   added with the given value.\n *\n *   For example:\n *\n *   ```js\n *   required: {\n *     input: {disabled: true, type: 'checkbox'}\n *   }\n *   ```\n *\n *   > 👉 **Note**: properties are first checked based on `schema.attributes`,\n *   > then on `schema.required`.\n *   > That means properties could be removed by `attributes` and then added\n *   > again with `required`.\n * @property {Array<string> | null | undefined} [strip]\n *   List of tag names to strip from the tree (default: `defaultSchema.strip`).\n *\n *   By default, unsafe elements (those not in `schema.tagNames`) are replaced\n *   by what they contain.\n *   This option can drop their contents.\n *\n *   For example:\n *\n *   ```js\n *   strip: ['script']\n *   ```\n * @property {Array<string> | null | undefined} [tagNames]\n *   List of allowed tag names (default: `defaultSchema.tagNames`).\n *\n *   For example:\n *\n *   ```js\n *   tagNames: [\n *     'a',\n *     'b',\n *     // …\n *     'ul',\n *     'var'\n *   ]\n *   ```\n *\n * @typedef State\n *   Info passed around.\n * @property {Readonly<Schema>} schema\n *   Schema.\n * @property {Array<string>} stack\n *   Tag names of ancestors.\n */\n\nimport structuredClone from '@ungap/structured-clone'\nimport {position} from 'unist-util-position'\nimport {defaultSchema} from './schema.js'\n\nconst own = {}.hasOwnProperty\n\n/**\n * Sanitize a tree.\n *\n * @param {Readonly<Nodes>} node\n *   Unsafe tree.\n * @param {Readonly<Schema> | null | undefined} [options]\n *   Configuration (default: `defaultSchema`).\n * @returns {Nodes}\n *   New, safe tree.\n */\nexport function sanitize(node, options) {\n  /** @type {Nodes} */\n  let result = {type: 'root', children: []}\n\n  /** @type {State} */\n  const state = {\n    schema: options ? {...defaultSchema, ...options} : defaultSchema,\n    stack: []\n  }\n  const replace = transform(state, node)\n\n  if (replace) {\n    if (Array.isArray(replace)) {\n      if (replace.length === 1) {\n        result = replace[0]\n      } else {\n        result.children = replace\n      }\n    } else {\n      result = replace\n    }\n  }\n\n  return result\n}\n\n/**\n * Sanitize `node`.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Readonly<unknown>} node\n *   Unsafe node.\n * @returns {Array<ElementContent> | Nodes | undefined}\n *   Safe result.\n */\nfunction transform(state, node) {\n  if (node && typeof node === 'object') {\n    const unsafe = /** @type {Record<string, Readonly<unknown>>} */ (node)\n    const type = typeof unsafe.type === 'string' ? unsafe.type : ''\n\n    switch (type) {\n      case 'comment': {\n        return comment(state, unsafe)\n      }\n\n      case 'doctype': {\n        return doctype(state, unsafe)\n      }\n\n      case 'element': {\n        return element(state, unsafe)\n      }\n\n      case 'root': {\n        return root(state, unsafe)\n      }\n\n      case 'text': {\n        return text(state, unsafe)\n      }\n\n      default:\n    }\n  }\n}\n\n/**\n * Make a safe comment.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Readonly<Record<string, Readonly<unknown>>>} unsafe\n *   Unsafe comment-like value.\n * @returns {Comment | undefined}\n *   Safe comment (if with `allowComments`).\n */\nfunction comment(state, unsafe) {\n  if (state.schema.allowComments) {\n    // See <https://html.spec.whatwg.org/multipage/parsing.html#serialising-html-fragments>\n    const result = typeof unsafe.value === 'string' ? unsafe.value : ''\n    const index = result.indexOf('-->')\n    const value = index < 0 ? result : result.slice(0, index)\n\n    /** @type {Comment} */\n    const node = {type: 'comment', value}\n\n    patch(node, unsafe)\n\n    return node\n  }\n}\n\n/**\n * Make a safe doctype.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Readonly<Record<string, Readonly<unknown>>>} unsafe\n *   Unsafe doctype-like value.\n * @returns {Doctype | undefined}\n *   Safe doctype (if with `allowDoctypes`).\n */\nfunction doctype(state, unsafe) {\n  if (state.schema.allowDoctypes) {\n    /** @type {Doctype} */\n    const node = {type: 'doctype'}\n\n    patch(node, unsafe)\n\n    return node\n  }\n}\n\n/**\n * Make a safe element.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Readonly<Record<string, Readonly<unknown>>>} unsafe\n *   Unsafe element-like value.\n * @returns {Array<ElementContent> | Element | undefined}\n *   Safe element.\n */\nfunction element(state, unsafe) {\n  const name = typeof unsafe.tagName === 'string' ? unsafe.tagName : ''\n\n  state.stack.push(name)\n\n  const content = /** @type {Array<ElementContent>} */ (\n    children(state, unsafe.children)\n  )\n  const properties_ = properties(state, unsafe.properties)\n\n  state.stack.pop()\n\n  let safeElement = false\n\n  if (\n    name &&\n    name !== '*' &&\n    (!state.schema.tagNames || state.schema.tagNames.includes(name))\n  ) {\n    safeElement = true\n\n    // Some nodes can break out of their context if they don’t have a certain\n    // ancestor.\n    if (state.schema.ancestors && own.call(state.schema.ancestors, name)) {\n      const ancestors = state.schema.ancestors[name]\n      let index = -1\n\n      safeElement = false\n\n      while (++index < ancestors.length) {\n        if (state.stack.includes(ancestors[index])) {\n          safeElement = true\n        }\n      }\n    }\n  }\n\n  if (!safeElement) {\n    return state.schema.strip && !state.schema.strip.includes(name)\n      ? content\n      : undefined\n  }\n\n  /** @type {Element} */\n  const node = {\n    type: 'element',\n    tagName: name,\n    properties: properties_,\n    children: content\n  }\n\n  patch(node, unsafe)\n\n  return node\n}\n\n/**\n * Make a safe root.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Readonly<Record<string, Readonly<unknown>>>} unsafe\n *   Unsafe root-like value.\n * @returns {Root}\n *   Safe root.\n */\nfunction root(state, unsafe) {\n  const content = /** @type {Array<RootContent>} */ (\n    children(state, unsafe.children)\n  )\n\n  /** @type {Root} */\n  const node = {type: 'root', children: content}\n\n  patch(node, unsafe)\n\n  return node\n}\n\n/**\n * Make a safe text.\n *\n * @param {State} _\n *   Info passed around.\n * @param {Readonly<Record<string, Readonly<unknown>>>} unsafe\n *   Unsafe text-like value.\n * @returns {Text}\n *   Safe text.\n */\nfunction text(_, unsafe) {\n  const value = typeof unsafe.value === 'string' ? unsafe.value : ''\n  /** @type {Text} */\n  const node = {type: 'text', value}\n\n  patch(node, unsafe)\n\n  return node\n}\n\n/**\n * Make children safe.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Readonly<unknown>} children\n *   Unsafe value.\n * @returns {Array<Nodes>}\n *   Safe children.\n */\nfunction children(state, children) {\n  /** @type {Array<Nodes>} */\n  const results = []\n\n  if (Array.isArray(children)) {\n    const childrenUnknown = /** @type {Array<Readonly<unknown>>} */ (children)\n    let index = -1\n\n    while (++index < childrenUnknown.length) {\n      const value = transform(state, childrenUnknown[index])\n\n      if (value) {\n        if (Array.isArray(value)) {\n          results.push(...value)\n        } else {\n          results.push(value)\n        }\n      }\n    }\n  }\n\n  return results\n}\n\n/**\n * Make element properties safe.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Readonly<unknown>} properties\n *   Unsafe value.\n * @returns {Properties}\n *   Safe value.\n */\nfunction properties(state, properties) {\n  const tagName = state.stack[state.stack.length - 1]\n  const attributes = state.schema.attributes\n  const required = state.schema.required\n  const specific =\n    attributes && own.call(attributes, tagName)\n      ? attributes[tagName]\n      : undefined\n  const defaults =\n    attributes && own.call(attributes, '*') ? attributes['*'] : undefined\n  const properties_ =\n    /** @type {Readonly<Record<string, Readonly<unknown>>>} */ (\n      properties && typeof properties === 'object' ? properties : {}\n    )\n  /** @type {Properties} */\n  const result = {}\n  /** @type {string} */\n  let key\n\n  for (key in properties_) {\n    if (own.call(properties_, key)) {\n      const unsafe = properties_[key]\n      let safe = propertyValue(\n        state,\n        findDefinition(specific, key),\n        key,\n        unsafe\n      )\n\n      if (safe === null || safe === undefined) {\n        safe = propertyValue(state, findDefinition(defaults, key), key, unsafe)\n      }\n\n      if (safe !== null && safe !== undefined) {\n        result[key] = safe\n      }\n    }\n  }\n\n  if (required && own.call(required, tagName)) {\n    const properties = required[tagName]\n\n    for (key in properties) {\n      if (own.call(properties, key) && !own.call(result, key)) {\n        result[key] = properties[key]\n      }\n    }\n  }\n\n  return result\n}\n\n/**\n * Sanitize a property value.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Readonly<PropertyDefinition> | undefined} definition\n *   Definition.\n * @param {string} key\n *   Field name.\n * @param {Readonly<unknown>} value\n *   Unsafe value (but an array).\n * @returns {Array<number | string> | boolean | number | string | undefined}\n *   Safe value.\n */\nfunction propertyValue(state, definition, key, value) {\n  return definition\n    ? Array.isArray(value)\n      ? propertyValueMany(state, definition, key, value)\n      : propertyValuePrimitive(state, definition, key, value)\n    : undefined\n}\n\n/**\n * Sanitize a property value which is a list.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Readonly<PropertyDefinition>} definition\n *   Definition.\n * @param {string} key\n *   Field name.\n * @param {Readonly<Array<Readonly<unknown>>>} values\n *   Unsafe value (but an array).\n * @returns {Array<number | string>}\n *   Safe value.\n */\nfunction propertyValueMany(state, definition, key, values) {\n  let index = -1\n  /** @type {Array<number | string>} */\n  const result = []\n\n  while (++index < values.length) {\n    const value = propertyValuePrimitive(state, definition, key, values[index])\n\n    if (typeof value === 'number' || typeof value === 'string') {\n      result.push(value)\n    }\n  }\n\n  return result\n}\n\n/**\n * Sanitize a property value which is a primitive.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Readonly<PropertyDefinition>} definition\n *   Definition.\n * @param {string} key\n *   Field name.\n * @param {Readonly<unknown>} value\n *   Unsafe value (but not an array).\n * @returns {boolean | number | string | undefined}\n *   Safe value.\n */\nfunction propertyValuePrimitive(state, definition, key, value) {\n  if (\n    typeof value !== 'boolean' &&\n    typeof value !== 'number' &&\n    typeof value !== 'string'\n  ) {\n    return\n  }\n\n  if (!safeProtocol(state, key, value)) {\n    return\n  }\n\n  // Just a string, or only one item in an array, means all values are OK.\n  // More than one item means an allow list.\n  if (typeof definition === 'object' && definition.length > 1) {\n    let ok = false\n    let index = 0 // Ignore `key`, which is the first item.\n\n    while (++index < definition.length) {\n      const allowed = definition[index]\n\n      // Expression.\n      if (allowed && typeof allowed === 'object' && 'flags' in allowed) {\n        if (allowed.test(String(value))) {\n          ok = true\n          break\n        }\n      }\n      // Primitive.\n      else if (allowed === value) {\n        ok = true\n        break\n      }\n    }\n\n    if (!ok) return\n  }\n\n  return state.schema.clobber &&\n    state.schema.clobberPrefix &&\n    state.schema.clobber.includes(key)\n    ? state.schema.clobberPrefix + value\n    : value\n}\n\n/**\n * Check whether `value` is a safe URL.\n *\n * @param {State} state\n *   Info passed around.\n * @param {string} key\n *   Field name.\n * @param {Readonly<unknown>} value\n *   Unsafe value.\n * @returns {boolean}\n *   Whether it’s a safe value.\n */\nfunction safeProtocol(state, key, value) {\n  const protocols =\n    state.schema.protocols && own.call(state.schema.protocols, key)\n      ? state.schema.protocols[key]\n      : undefined\n\n  // No protocols defined? Then everything is fine.\n  if (!protocols || protocols.length === 0) {\n    return true\n  }\n\n  const url = String(value)\n  const colon = url.indexOf(':')\n  const questionMark = url.indexOf('?')\n  const numberSign = url.indexOf('#')\n  const slash = url.indexOf('/')\n\n  if (\n    colon < 0 ||\n    // If the first colon is after a `?`, `#`, or `/`, it’s not a protocol.\n    (slash > -1 && colon > slash) ||\n    (questionMark > -1 && colon > questionMark) ||\n    (numberSign > -1 && colon > numberSign)\n  ) {\n    return true\n  }\n\n  let index = -1\n\n  while (++index < protocols.length) {\n    const protocol = protocols[index]\n\n    if (\n      colon === protocol.length &&\n      url.slice(0, protocol.length) === protocol\n    ) {\n      return true\n    }\n  }\n\n  return false\n}\n\n/**\n * Add data and position.\n *\n * @param {Nodes} node\n *   Node to patch safe data and position on.\n * @param {Readonly<Record<string, Readonly<unknown>>>} unsafe\n *   Unsafe node-like value.\n * @returns {undefined}\n *   Nothing.\n */\nfunction patch(node, unsafe) {\n  const cleanPosition = position(\n    // @ts-expect-error: looks like a node.\n    unsafe\n  )\n\n  if (unsafe.data) {\n    node.data = structuredClone(unsafe.data)\n  }\n\n  if (cleanPosition) node.position = cleanPosition\n}\n\n/**\n *\n * @param {Readonly<Array<PropertyDefinition>> | undefined} definitions\n * @param {string} key\n * @returns {Readonly<PropertyDefinition> | undefined}\n */\nfunction findDefinition(definitions, key) {\n  /** @type {PropertyDefinition | undefined} */\n  let dataDefault\n  let index = -1\n\n  if (definitions) {\n    while (++index < definitions.length) {\n      const entry = definitions[index]\n      const name = typeof entry === 'string' ? entry : entry[0]\n\n      if (name === key) {\n        return entry\n      }\n\n      if (name === 'data*') dataDefault = entry\n    }\n  }\n\n  if (key.length > 4 && key.slice(0, 4).toLowerCase() === 'data') {\n    return dataDefault\n  }\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n *\n * @typedef {import('./state.js').State} State\n */\n\n/**\n * @callback FootnoteBackContentTemplate\n *   Generate content for the backreference dynamically.\n *\n *   For the following markdown:\n *\n *   ```markdown\n *   Alpha[^micromark], bravo[^micromark], and charlie[^remark].\n *\n *   [^remark]: things about remark\n *   [^micromark]: things about micromark\n *   ```\n *\n *   This function will be called with:\n *\n *   *  `0` and `0` for the backreference from `things about micromark` to\n *      `alpha`, as it is the first used definition, and the first call to it\n *   *  `0` and `1` for the backreference from `things about micromark` to\n *      `bravo`, as it is the first used definition, and the second call to it\n *   *  `1` and `0` for the backreference from `things about remark` to\n *      `charlie`, as it is the second used definition\n * @param {number} referenceIndex\n *   Index of the definition in the order that they are first referenced,\n *   0-indexed.\n * @param {number} rereferenceIndex\n *   Index of calls to the same definition, 0-indexed.\n * @returns {Array<ElementContent> | ElementContent | string}\n *   Content for the backreference when linking back from definitions to their\n *   reference.\n *\n * @callback FootnoteBackLabelTemplate\n *   Generate a back label dynamically.\n *\n *   For the following markdown:\n *\n *   ```markdown\n *   Alpha[^micromark], bravo[^micromark], and charlie[^remark].\n *\n *   [^remark]: things about remark\n *   [^micromark]: things about micromark\n *   ```\n *\n *   This function will be called with:\n *\n *   *  `0` and `0` for the backreference from `things about micromark` to\n *      `alpha`, as it is the first used definition, and the first call to it\n *   *  `0` and `1` for the backreference from `things about micromark` to\n *      `bravo`, as it is the first used definition, and the second call to it\n *   *  `1` and `0` for the backreference from `things about remark` to\n *      `charlie`, as it is the second used definition\n * @param {number} referenceIndex\n *   Index of the definition in the order that they are first referenced,\n *   0-indexed.\n * @param {number} rereferenceIndex\n *   Index of calls to the same definition, 0-indexed.\n * @returns {string}\n *   Back label to use when linking back from definitions to their reference.\n */\n\nimport structuredClone from '@ungap/structured-clone'\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\n\n/**\n * Generate the default content that GitHub uses on backreferences.\n *\n * @param {number} _\n *   Index of the definition in the order that they are first referenced,\n *   0-indexed.\n * @param {number} rereferenceIndex\n *   Index of calls to the same definition, 0-indexed.\n * @returns {Array<ElementContent>}\n *   Content.\n */\nexport function defaultFootnoteBackContent(_, rereferenceIndex) {\n  /** @type {Array<ElementContent>} */\n  const result = [{type: 'text', value: '↩'}]\n\n  if (rereferenceIndex > 1) {\n    result.push({\n      type: 'element',\n      tagName: 'sup',\n      properties: {},\n      children: [{type: 'text', value: String(rereferenceIndex)}]\n    })\n  }\n\n  return result\n}\n\n/**\n * Generate the default label that GitHub uses on backreferences.\n *\n * @param {number} referenceIndex\n *   Index of the definition in the order that they are first referenced,\n *   0-indexed.\n * @param {number} rereferenceIndex\n *   Index of calls to the same definition, 0-indexed.\n * @returns {string}\n *   Label.\n */\nexport function defaultFootnoteBackLabel(referenceIndex, rereferenceIndex) {\n  return (\n    'Back to reference ' +\n    (referenceIndex + 1) +\n    (rereferenceIndex > 1 ? '-' + rereferenceIndex : '')\n  )\n}\n\n/**\n * Generate a hast footer for called footnote definitions.\n *\n * @param {State} state\n *   Info passed around.\n * @returns {Element | undefined}\n *   `section` element or `undefined`.\n */\n// eslint-disable-next-line complexity\nexport function footer(state) {\n  const clobberPrefix =\n    typeof state.options.clobberPrefix === 'string'\n      ? state.options.clobberPrefix\n      : 'user-content-'\n  const footnoteBackContent =\n    state.options.footnoteBackContent || defaultFootnoteBackContent\n  const footnoteBackLabel =\n    state.options.footnoteBackLabel || defaultFootnoteBackLabel\n  const footnoteLabel = state.options.footnoteLabel || 'Footnotes'\n  const footnoteLabelTagName = state.options.footnoteLabelTagName || 'h2'\n  const footnoteLabelProperties = state.options.footnoteLabelProperties || {\n    className: ['sr-only']\n  }\n  /** @type {Array<ElementContent>} */\n  const listItems = []\n  let referenceIndex = -1\n\n  while (++referenceIndex < state.footnoteOrder.length) {\n    const definition = state.footnoteById.get(\n      state.footnoteOrder[referenceIndex]\n    )\n\n    if (!definition) {\n      continue\n    }\n\n    const content = state.all(definition)\n    const id = String(definition.identifier).toUpperCase()\n    const safeId = normalizeUri(id.toLowerCase())\n    let rereferenceIndex = 0\n    /** @type {Array<ElementContent>} */\n    const backReferences = []\n    const counts = state.footnoteCounts.get(id)\n\n    // eslint-disable-next-line no-unmodified-loop-condition\n    while (counts !== undefined && ++rereferenceIndex <= counts) {\n      if (backReferences.length > 0) {\n        backReferences.push({type: 'text', value: ' '})\n      }\n\n      let children =\n        typeof footnoteBackContent === 'string'\n          ? footnoteBackContent\n          : footnoteBackContent(referenceIndex, rereferenceIndex)\n\n      if (typeof children === 'string') {\n        children = {type: 'text', value: children}\n      }\n\n      backReferences.push({\n        type: 'element',\n        tagName: 'a',\n        properties: {\n          href:\n            '#' +\n            clobberPrefix +\n            'fnref-' +\n            safeId +\n            (rereferenceIndex > 1 ? '-' + rereferenceIndex : ''),\n          dataFootnoteBackref: '',\n          ariaLabel:\n            typeof footnoteBackLabel === 'string'\n              ? footnoteBackLabel\n              : footnoteBackLabel(referenceIndex, rereferenceIndex),\n          className: ['data-footnote-backref']\n        },\n        children: Array.isArray(children) ? children : [children]\n      })\n    }\n\n    const tail = content[content.length - 1]\n\n    if (tail && tail.type === 'element' && tail.tagName === 'p') {\n      const tailTail = tail.children[tail.children.length - 1]\n      if (tailTail && tailTail.type === 'text') {\n        tailTail.value += ' '\n      } else {\n        tail.children.push({type: 'text', value: ' '})\n      }\n\n      tail.children.push(...backReferences)\n    } else {\n      content.push(...backReferences)\n    }\n\n    /** @type {Element} */\n    const listItem = {\n      type: 'element',\n      tagName: 'li',\n      properties: {id: clobberPrefix + 'fn-' + safeId},\n      children: state.wrap(content, true)\n    }\n\n    state.patch(definition, listItem)\n\n    listItems.push(listItem)\n  }\n\n  if (listItems.length === 0) {\n    return\n  }\n\n  return {\n    type: 'element',\n    tagName: 'section',\n    properties: {dataFootnotes: true, className: ['footnotes']},\n    children: [\n      {\n        type: 'element',\n        tagName: footnoteLabelTagName,\n        properties: {\n          ...structuredClone(footnoteLabelProperties),\n          id: 'footnote-label'\n        },\n        children: [{type: 'text', value: footnoteLabel}]\n      },\n      {type: 'text', value: '\\n'},\n      {\n        type: 'element',\n        tagName: 'ol',\n        properties: {},\n        children: state.wrap(listItems, true)\n      },\n      {type: 'text', value: '\\n'}\n    ]\n  }\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Blockquote} Blockquote\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `blockquote` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Blockquote} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function blockquote(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'blockquote',\n    properties: {},\n    children: state.wrap(state.all(node), true)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Text} Text\n * @typedef {import('mdast').Break} Break\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `break` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Break} node\n *   mdast node.\n * @returns {Array<Element | Text>}\n *   hast element content.\n */\nexport function hardBreak(state, node) {\n  /** @type {Element} */\n  const result = {type: 'element', tagName: 'br', properties: {}, children: []}\n  state.patch(node, result)\n  return [state.applyData(node, result), {type: 'text', value: '\\n'}]\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').Code} Code\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `code` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Code} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function code(state, node) {\n  const value = node.value ? node.value + '\\n' : ''\n  /** @type {Properties} */\n  const properties = {}\n\n  if (node.lang) {\n    properties.className = ['language-' + node.lang]\n  }\n\n  // Create `<code>`.\n  /** @type {Element} */\n  let result = {\n    type: 'element',\n    tagName: 'code',\n    properties,\n    children: [{type: 'text', value}]\n  }\n\n  if (node.meta) {\n    result.data = {meta: node.meta}\n  }\n\n  state.patch(node, result)\n  result = state.applyData(node, result)\n\n  // Create `<pre>`.\n  result = {type: 'element', tagName: 'pre', properties: {}, children: [result]}\n  state.patch(node, result)\n  return result\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Delete} Delete\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `delete` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Delete} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function strikethrough(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'del',\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Emphasis} Emphasis\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `emphasis` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Emphasis} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function emphasis(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'em',\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').FootnoteReference} FootnoteReference\n * @typedef {import('../state.js').State} State\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\n\n/**\n * Turn an mdast `footnoteReference` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {FootnoteReference} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function footnoteReference(state, node) {\n  const clobberPrefix =\n    typeof state.options.clobberPrefix === 'string'\n      ? state.options.clobberPrefix\n      : 'user-content-'\n  const id = String(node.identifier).toUpperCase()\n  const safeId = normalizeUri(id.toLowerCase())\n  const index = state.footnoteOrder.indexOf(id)\n  /** @type {number} */\n  let counter\n\n  let reuseCounter = state.footnoteCounts.get(id)\n\n  if (reuseCounter === undefined) {\n    reuseCounter = 0\n    state.footnoteOrder.push(id)\n    counter = state.footnoteOrder.length\n  } else {\n    counter = index + 1\n  }\n\n  reuseCounter += 1\n  state.footnoteCounts.set(id, reuseCounter)\n\n  /** @type {Element} */\n  const link = {\n    type: 'element',\n    tagName: 'a',\n    properties: {\n      href: '#' + clobberPrefix + 'fn-' + safeId,\n      id:\n        clobberPrefix +\n        'fnref-' +\n        safeId +\n        (reuseCounter > 1 ? '-' + reuseCounter : ''),\n      dataFootnoteRef: true,\n      ariaDescribedBy: ['footnote-label']\n    },\n    children: [{type: 'text', value: String(counter)}]\n  }\n  state.patch(node, link)\n\n  /** @type {Element} */\n  const sup = {\n    type: 'element',\n    tagName: 'sup',\n    properties: {},\n    children: [link]\n  }\n  state.patch(node, sup)\n  return state.applyData(node, sup)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Heading} Heading\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `heading` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Heading} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function heading(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'h' + node.depth,\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Html} Html\n * @typedef {import('../state.js').State} State\n * @typedef {import('../../index.js').Raw} Raw\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `html` node into hast (`raw` node in dangerous mode, otherwise\n * nothing).\n *\n * @param {State} state\n *   Info passed around.\n * @param {Html} node\n *   mdast node.\n * @returns {Element | Raw | undefined}\n *   hast node.\n */\nexport function html(state, node) {\n  if (state.options.allowDangerousHtml) {\n    /** @type {Raw} */\n    const result = {type: 'raw', value: node.value}\n    state.patch(node, result)\n    return state.applyData(node, result)\n  }\n\n  return undefined\n}\n","/**\n * @typedef {import('hast').ElementContent} ElementContent\n *\n * @typedef {import('mdast').Nodes} Nodes\n * @typedef {import('mdast').Reference} Reference\n *\n * @typedef {import('./state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Return the content of a reference without definition as plain text.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Extract<Nodes, Reference>} node\n *   Reference node (image, link).\n * @returns {Array<ElementContent>}\n *   hast content.\n */\nexport function revert(state, node) {\n  const subtype = node.referenceType\n  let suffix = ']'\n\n  if (subtype === 'collapsed') {\n    suffix += '[]'\n  } else if (subtype === 'full') {\n    suffix += '[' + (node.label || node.identifier) + ']'\n  }\n\n  if (node.type === 'imageReference') {\n    return [{type: 'text', value: '![' + node.alt + suffix}]\n  }\n\n  const contents = state.all(node)\n  const head = contents[0]\n\n  if (head && head.type === 'text') {\n    head.value = '[' + head.value\n  } else {\n    contents.unshift({type: 'text', value: '['})\n  }\n\n  const tail = contents[contents.length - 1]\n\n  if (tail && tail.type === 'text') {\n    tail.value += suffix\n  } else {\n    contents.push({type: 'text', value: suffix})\n  }\n\n  return contents\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').ImageReference} ImageReference\n * @typedef {import('../state.js').State} State\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\nimport {revert} from '../revert.js'\n\n/**\n * Turn an mdast `imageReference` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {ImageReference} node\n *   mdast node.\n * @returns {Array<ElementContent> | ElementContent}\n *   hast node.\n */\nexport function imageReference(state, node) {\n  const id = String(node.identifier).toUpperCase()\n  const definition = state.definitionById.get(id)\n\n  if (!definition) {\n    return revert(state, node)\n  }\n\n  /** @type {Properties} */\n  const properties = {src: normalizeUri(definition.url || ''), alt: node.alt}\n\n  if (definition.title !== null && definition.title !== undefined) {\n    properties.title = definition.title\n  }\n\n  /** @type {Element} */\n  const result = {type: 'element', tagName: 'img', properties, children: []}\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').Image} Image\n * @typedef {import('../state.js').State} State\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\n\n/**\n * Turn an mdast `image` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Image} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function image(state, node) {\n  /** @type {Properties} */\n  const properties = {src: normalizeUri(node.url)}\n\n  if (node.alt !== null && node.alt !== undefined) {\n    properties.alt = node.alt\n  }\n\n  if (node.title !== null && node.title !== undefined) {\n    properties.title = node.title\n  }\n\n  /** @type {Element} */\n  const result = {type: 'element', tagName: 'img', properties, children: []}\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Text} Text\n * @typedef {import('mdast').InlineCode} InlineCode\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `inlineCode` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {InlineCode} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function inlineCode(state, node) {\n  /** @type {Text} */\n  const text = {type: 'text', value: node.value.replace(/\\r?\\n|\\r/g, ' ')}\n  state.patch(node, text)\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'code',\n    properties: {},\n    children: [text]\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').LinkReference} LinkReference\n * @typedef {import('../state.js').State} State\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\nimport {revert} from '../revert.js'\n\n/**\n * Turn an mdast `linkReference` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {LinkReference} node\n *   mdast node.\n * @returns {Array<ElementContent> | ElementContent}\n *   hast node.\n */\nexport function linkReference(state, node) {\n  const id = String(node.identifier).toUpperCase()\n  const definition = state.definitionById.get(id)\n\n  if (!definition) {\n    return revert(state, node)\n  }\n\n  /** @type {Properties} */\n  const properties = {href: normalizeUri(definition.url || '')}\n\n  if (definition.title !== null && definition.title !== undefined) {\n    properties.title = definition.title\n  }\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'a',\n    properties,\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').Link} Link\n * @typedef {import('../state.js').State} State\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\n\n/**\n * Turn an mdast `link` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Link} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function link(state, node) {\n  /** @type {Properties} */\n  const properties = {href: normalizeUri(node.url)}\n\n  if (node.title !== null && node.title !== undefined) {\n    properties.title = node.title\n  }\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'a',\n    properties,\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').ListItem} ListItem\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `listItem` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {ListItem} node\n *   mdast node.\n * @param {Parents | undefined} parent\n *   Parent of `node`.\n * @returns {Element}\n *   hast node.\n */\nexport function listItem(state, node, parent) {\n  const results = state.all(node)\n  const loose = parent ? listLoose(parent) : listItemLoose(node)\n  /** @type {Properties} */\n  const properties = {}\n  /** @type {Array<ElementContent>} */\n  const children = []\n\n  if (typeof node.checked === 'boolean') {\n    const head = results[0]\n    /** @type {Element} */\n    let paragraph\n\n    if (head && head.type === 'element' && head.tagName === 'p') {\n      paragraph = head\n    } else {\n      paragraph = {type: 'element', tagName: 'p', properties: {}, children: []}\n      results.unshift(paragraph)\n    }\n\n    if (paragraph.children.length > 0) {\n      paragraph.children.unshift({type: 'text', value: ' '})\n    }\n\n    paragraph.children.unshift({\n      type: 'element',\n      tagName: 'input',\n      properties: {type: 'checkbox', checked: node.checked, disabled: true},\n      children: []\n    })\n\n    // According to github-markdown-css, this class hides bullet.\n    // See: <https://github.com/sindresorhus/github-markdown-css>.\n    properties.className = ['task-list-item']\n  }\n\n  let index = -1\n\n  while (++index < results.length) {\n    const child = results[index]\n\n    // Add eols before nodes, except if this is a loose, first paragraph.\n    if (\n      loose ||\n      index !== 0 ||\n      child.type !== 'element' ||\n      child.tagName !== 'p'\n    ) {\n      children.push({type: 'text', value: '\\n'})\n    }\n\n    if (child.type === 'element' && child.tagName === 'p' && !loose) {\n      children.push(...child.children)\n    } else {\n      children.push(child)\n    }\n  }\n\n  const tail = results[results.length - 1]\n\n  // Add a final eol.\n  if (tail && (loose || tail.type !== 'element' || tail.tagName !== 'p')) {\n    children.push({type: 'text', value: '\\n'})\n  }\n\n  /** @type {Element} */\n  const result = {type: 'element', tagName: 'li', properties, children}\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n\n/**\n * @param {Parents} node\n * @return {Boolean}\n */\nfunction listLoose(node) {\n  let loose = false\n  if (node.type === 'list') {\n    loose = node.spread || false\n    const children = node.children\n    let index = -1\n\n    while (!loose && ++index < children.length) {\n      loose = listItemLoose(children[index])\n    }\n  }\n\n  return loose\n}\n\n/**\n * @param {ListItem} node\n * @return {Boolean}\n */\nfunction listItemLoose(node) {\n  const spread = node.spread\n\n  return spread === null || spread === undefined\n    ? node.children.length > 1\n    : spread\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').List} List\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `list` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {List} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function list(state, node) {\n  /** @type {Properties} */\n  const properties = {}\n  const results = state.all(node)\n  let index = -1\n\n  if (typeof node.start === 'number' && node.start !== 1) {\n    properties.start = node.start\n  }\n\n  // Like GitHub, add a class for custom styling.\n  while (++index < results.length) {\n    const child = results[index]\n\n    if (\n      child.type === 'element' &&\n      child.tagName === 'li' &&\n      child.properties &&\n      Array.isArray(child.properties.className) &&\n      child.properties.className.includes('task-list-item')\n    ) {\n      properties.className = ['contains-task-list']\n      break\n    }\n  }\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: node.ordered ? 'ol' : 'ul',\n    properties,\n    children: state.wrap(results, true)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Paragraph} Paragraph\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `paragraph` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Paragraph} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function paragraph(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'p',\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Parents} HastParents\n * @typedef {import('hast').Root} HastRoot\n * @typedef {import('mdast').Root} MdastRoot\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `root` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdastRoot} node\n *   mdast node.\n * @returns {HastParents}\n *   hast node.\n */\nexport function root(state, node) {\n  /** @type {HastRoot} */\n  const result = {type: 'root', children: state.wrap(state.all(node))}\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Strong} Strong\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `strong` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Strong} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function strong(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'strong',\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Table} Table\n * @typedef {import('../state.js').State} State\n */\n\nimport {pointEnd, pointStart} from 'unist-util-position'\n\n/**\n * Turn an mdast `table` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Table} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function table(state, node) {\n  const rows = state.all(node)\n  const firstRow = rows.shift()\n  /** @type {Array<Element>} */\n  const tableContent = []\n\n  if (firstRow) {\n    /** @type {Element} */\n    const head = {\n      type: 'element',\n      tagName: 'thead',\n      properties: {},\n      children: state.wrap([firstRow], true)\n    }\n    state.patch(node.children[0], head)\n    tableContent.push(head)\n  }\n\n  if (rows.length > 0) {\n    /** @type {Element} */\n    const body = {\n      type: 'element',\n      tagName: 'tbody',\n      properties: {},\n      children: state.wrap(rows, true)\n    }\n\n    const start = pointStart(node.children[1])\n    const end = pointEnd(node.children[node.children.length - 1])\n    if (start && end) body.position = {start, end}\n    tableContent.push(body)\n  }\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'table',\n    properties: {},\n    children: state.wrap(tableContent, true)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('mdast').TableRow} TableRow\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `tableRow` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {TableRow} node\n *   mdast node.\n * @param {Parents | undefined} parent\n *   Parent of `node`.\n * @returns {Element}\n *   hast node.\n */\nexport function tableRow(state, node, parent) {\n  const siblings = parent ? parent.children : undefined\n  // Generate a body row when without parent.\n  const rowIndex = siblings ? siblings.indexOf(node) : 1\n  const tagName = rowIndex === 0 ? 'th' : 'td'\n  // To do: option to use `style`?\n  const align = parent && parent.type === 'table' ? parent.align : undefined\n  const length = align ? align.length : node.children.length\n  let cellIndex = -1\n  /** @type {Array<ElementContent>} */\n  const cells = []\n\n  while (++cellIndex < length) {\n    // Note: can also be undefined.\n    const cell = node.children[cellIndex]\n    /** @type {Properties} */\n    const properties = {}\n    const alignValue = align ? align[cellIndex] : undefined\n\n    if (alignValue) {\n      properties.align = alignValue\n    }\n\n    /** @type {Element} */\n    let result = {type: 'element', tagName, properties, children: []}\n\n    if (cell) {\n      result.children = state.all(cell)\n      state.patch(cell, result)\n      result = state.applyData(cell, result)\n    }\n\n    cells.push(result)\n  }\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'tr',\n    properties: {},\n    children: state.wrap(cells, true)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').TableCell} TableCell\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `tableCell` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {TableCell} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function tableCell(state, node) {\n  // Note: this function is normally not called: see `table-row` for how rows\n  // and their cells are compiled.\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'td', // Assume body cell.\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","const tab = 9 /* `\\t` */\nconst space = 32 /* ` ` */\n\n/**\n * Remove initial and final spaces and tabs at the line breaks in `value`.\n * Does not trim initial and final spaces and tabs of the value itself.\n *\n * @param {string} value\n *   Value to trim.\n * @returns {string}\n *   Trimmed value.\n */\nexport function trimLines(value) {\n  const source = String(value)\n  const search = /\\r?\\n|\\r/g\n  let match = search.exec(source)\n  let last = 0\n  /** @type {Array<string>} */\n  const lines = []\n\n  while (match) {\n    lines.push(\n      trimLine(source.slice(last, match.index), last > 0, true),\n      match[0]\n    )\n\n    last = match.index + match[0].length\n    match = search.exec(source)\n  }\n\n  lines.push(trimLine(source.slice(last), last > 0, false))\n\n  return lines.join('')\n}\n\n/**\n * @param {string} value\n *   Line to trim.\n * @param {boolean} start\n *   Whether to trim the start of the line.\n * @param {boolean} end\n *   Whether to trim the end of the line.\n * @returns {string}\n *   Trimmed line.\n */\nfunction trimLine(value, start, end) {\n  let startIndex = 0\n  let endIndex = value.length\n\n  if (start) {\n    let code = value.codePointAt(startIndex)\n\n    while (code === tab || code === space) {\n      startIndex++\n      code = value.codePointAt(startIndex)\n    }\n  }\n\n  if (end) {\n    let code = value.codePointAt(endIndex - 1)\n\n    while (code === tab || code === space) {\n      endIndex--\n      code = value.codePointAt(endIndex - 1)\n    }\n  }\n\n  return endIndex > startIndex ? value.slice(startIndex, endIndex) : ''\n}\n","/**\n * @typedef {import('hast').Element} HastElement\n * @typedef {import('hast').Text} HastText\n * @typedef {import('mdast').Text} MdastText\n * @typedef {import('../state.js').State} State\n */\n\nimport {trimLines} from 'trim-lines'\n\n/**\n * Turn an mdast `text` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdastText} node\n *   mdast node.\n * @returns {HastElement | HastText}\n *   hast node.\n */\nexport function text(state, node) {\n  /** @type {HastText} */\n  const result = {type: 'text', value: trimLines(String(node.value))}\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').ThematicBreak} ThematicBreak\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `thematicBreak` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {ThematicBreak} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function thematicBreak(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'hr',\n    properties: {},\n    children: []\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","import {blockquote} from './blockquote.js'\nimport {hardBreak} from './break.js'\nimport {code} from './code.js'\nimport {strikethrough} from './delete.js'\nimport {emphasis} from './emphasis.js'\nimport {footnoteReference} from './footnote-reference.js'\nimport {heading} from './heading.js'\nimport {html} from './html.js'\nimport {imageReference} from './image-reference.js'\nimport {image} from './image.js'\nimport {inlineCode} from './inline-code.js'\nimport {linkReference} from './link-reference.js'\nimport {link} from './link.js'\nimport {listItem} from './list-item.js'\nimport {list} from './list.js'\nimport {paragraph} from './paragraph.js'\nimport {root} from './root.js'\nimport {strong} from './strong.js'\nimport {table} from './table.js'\nimport {tableRow} from './table-row.js'\nimport {tableCell} from './table-cell.js'\nimport {text} from './text.js'\nimport {thematicBreak} from './thematic-break.js'\n\n/**\n * Default handlers for nodes.\n *\n * @satisfies {import('../state.js').Handlers}\n */\nexport const handlers = {\n  blockquote,\n  break: hardBreak,\n  code,\n  delete: strikethrough,\n  emphasis,\n  footnoteReference,\n  heading,\n  html,\n  imageReference,\n  image,\n  inlineCode,\n  linkReference,\n  link,\n  listItem,\n  list,\n  paragraph,\n  // @ts-expect-error: root is different, but hard to type.\n  root,\n  strong,\n  table,\n  tableCell,\n  tableRow,\n  text,\n  thematicBreak,\n  toml: ignore,\n  yaml: ignore,\n  definition: ignore,\n  footnoteDefinition: ignore\n}\n\n// Return nothing for nodes that are ignored.\nfunction ignore() {\n  return undefined\n}\n","/**\n * @typedef {import('hast').Element} HastElement\n * @typedef {import('hast').ElementContent} HastElementContent\n * @typedef {import('hast').Nodes} HastNodes\n * @typedef {import('hast').Properties} HastProperties\n * @typedef {import('hast').RootContent} HastRootContent\n * @typedef {import('hast').Text} HastText\n *\n * @typedef {import('mdast').Definition} MdastDefinition\n * @typedef {import('mdast').FootnoteDefinition} MdastFootnoteDefinition\n * @typedef {import('mdast').Nodes} MdastNodes\n * @typedef {import('mdast').Parents} MdastParents\n *\n * @typedef {import('vfile').VFile} VFile\n *\n * @typedef {import('./footer.js').FootnoteBackContentTemplate} FootnoteBackContentTemplate\n * @typedef {import('./footer.js').FootnoteBackLabelTemplate} FootnoteBackLabelTemplate\n */\n\n/**\n * @callback Handler\n *   Handle a node.\n * @param {State} state\n *   Info passed around.\n * @param {any} node\n *   mdast node to handle.\n * @param {MdastParents | undefined} parent\n *   Parent of `node`.\n * @returns {Array<HastElementContent> | HastElementContent | undefined}\n *   hast node.\n *\n * @typedef {Partial<Record<MdastNodes['type'], Handler>>} Handlers\n *   Handle nodes.\n *\n * @typedef Options\n *   Configuration (optional).\n * @property {boolean | null | undefined} [allowDangerousHtml=false]\n *   Whether to persist raw HTML in markdown in the hast tree (default:\n *   `false`).\n * @property {string | null | undefined} [clobberPrefix='user-content-']\n *   Prefix to use before the `id` property on footnotes to prevent them from\n *   *clobbering* (default: `'user-content-'`).\n *\n *   Pass `''` for trusted markdown and when you are careful with\n *   polyfilling.\n *   You could pass a different prefix.\n *\n *   DOM clobbering is this:\n *\n *   ```html\n *   <p id=\"x\"></p>\n *   <script>alert(x) // `x` now refers to the `p#x` DOM element</script>\n *   ```\n *\n *   The above example shows that elements are made available by browsers, by\n *   their ID, on the `window` object.\n *   This is a security risk because you might be expecting some other variable\n *   at that place.\n *   It can also break polyfills.\n *   Using a prefix solves these problems.\n * @property {VFile | null | undefined} [file]\n *   Corresponding virtual file representing the input document (optional).\n * @property {FootnoteBackContentTemplate | string | null | undefined} [footnoteBackContent]\n *   Content of the backreference back to references (default: `defaultFootnoteBackContent`).\n *\n *   The default value is:\n *\n *   ```js\n *   function defaultFootnoteBackContent(_, rereferenceIndex) {\n *     const result = [{type: 'text', value: '↩'}]\n *\n *     if (rereferenceIndex > 1) {\n *       result.push({\n *         type: 'element',\n *         tagName: 'sup',\n *         properties: {},\n *         children: [{type: 'text', value: String(rereferenceIndex)}]\n *       })\n *     }\n *\n *     return result\n *   }\n *   ```\n *\n *   This content is used in the `a` element of each backreference (the `↩`\n *   links).\n * @property {FootnoteBackLabelTemplate | string | null | undefined} [footnoteBackLabel]\n *   Label to describe the backreference back to references (default:\n *   `defaultFootnoteBackLabel`).\n *\n *   The default value is:\n *\n *   ```js\n *   function defaultFootnoteBackLabel(referenceIndex, rereferenceIndex) {\n *    return (\n *      'Back to reference ' +\n *      (referenceIndex + 1) +\n *      (rereferenceIndex > 1 ? '-' + rereferenceIndex : '')\n *    )\n *   }\n *   ```\n *\n *   Change it when the markdown is not in English.\n *\n *   This label is used in the `ariaLabel` property on each backreference\n *   (the `↩` links).\n *   It affects users of assistive technology.\n * @property {string | null | undefined} [footnoteLabel='Footnotes']\n *   Textual label to use for the footnotes section (default: `'Footnotes'`).\n *\n *   Change it when the markdown is not in English.\n *\n *   This label is typically hidden visually (assuming a `sr-only` CSS class\n *   is defined that does that) and so affects screen readers only.\n *   If you do have such a class, but want to show this section to everyone,\n *   pass different properties with the `footnoteLabelProperties` option.\n * @property {HastProperties | null | undefined} [footnoteLabelProperties={className: ['sr-only']}]\n *   Properties to use on the footnote label (default: `{className:\n *   ['sr-only']}`).\n *\n *   Change it to show the label and add other properties.\n *\n *   This label is typically hidden visually (assuming an `sr-only` CSS class\n *   is defined that does that) and so affects screen readers only.\n *   If you do have such a class, but want to show this section to everyone,\n *   pass an empty string.\n *   You can also add different properties.\n *\n *   > **Note**: `id: 'footnote-label'` is always added, because footnote\n *   > calls use it with `aria-describedby` to provide an accessible label.\n * @property {string | null | undefined} [footnoteLabelTagName='h2']\n *   HTML tag name to use for the footnote label element (default: `'h2'`).\n *\n *   Change it to match your document structure.\n *\n *   This label is typically hidden visually (assuming a `sr-only` CSS class\n *   is defined that does that) and so affects screen readers only.\n *   If you do have such a class, but want to show this section to everyone,\n *   pass different properties with the `footnoteLabelProperties` option.\n * @property {Handlers | null | undefined} [handlers]\n *   Extra handlers for nodes (optional).\n * @property {Array<MdastNodes['type']> | null | undefined} [passThrough]\n *   List of custom mdast node types to pass through (keep) in hast (note that\n *   the node itself is passed, but eventual children are transformed)\n *   (optional).\n * @property {Handler | null | undefined} [unknownHandler]\n *   Handler for all unknown nodes (optional).\n *\n * @typedef State\n *   Info passed around.\n * @property {(node: MdastNodes) => Array<HastElementContent>} all\n *   Transform the children of an mdast parent to hast.\n * @property {<Type extends HastNodes>(from: MdastNodes, to: Type) => HastElement | Type} applyData\n *   Honor the `data` of `from`, and generate an element instead of `node`.\n * @property {Map<string, MdastDefinition>} definitionById\n *   Definitions by their identifier.\n * @property {Map<string, MdastFootnoteDefinition>} footnoteById\n *   Footnote definitions by their identifier.\n * @property {Map<string, number>} footnoteCounts\n *   Counts for how often the same footnote was called.\n * @property {Array<string>} footnoteOrder\n *   Identifiers of order when footnote calls first appear in tree order.\n * @property {Handlers} handlers\n *   Applied handlers.\n * @property {(node: MdastNodes, parent: MdastParents | undefined) => Array<HastElementContent> | HastElementContent | undefined} one\n *   Transform an mdast node to hast.\n * @property {Options} options\n *   Configuration.\n * @property {(from: MdastNodes, node: HastNodes) => undefined} patch\n *   Copy a node’s positional info.\n * @property {<Type extends HastRootContent>(nodes: Array<Type>, loose?: boolean | undefined) => Array<HastText | Type>} wrap\n *   Wrap `nodes` with line endings between each node, adds initial/final line endings when `loose`.\n */\n\nimport structuredClone from '@ungap/structured-clone'\nimport {visit} from 'unist-util-visit'\nimport {position} from 'unist-util-position'\nimport {handlers as defaultHandlers} from './handlers/index.js'\n\nconst own = {}.hasOwnProperty\n\n/** @type {Options} */\nconst emptyOptions = {}\n\n/**\n * Create `state` from an mdast tree.\n *\n * @param {MdastNodes} tree\n *   mdast node to transform.\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n * @returns {State}\n *   `state` function.\n */\nexport function createState(tree, options) {\n  const settings = options || emptyOptions\n  /** @type {Map<string, MdastDefinition>} */\n  const definitionById = new Map()\n  /** @type {Map<string, MdastFootnoteDefinition>} */\n  const footnoteById = new Map()\n  /** @type {Map<string, number>} */\n  const footnoteCounts = new Map()\n  /** @type {Handlers} */\n  // @ts-expect-error: the root handler returns a root.\n  // Hard to type.\n  const handlers = {...defaultHandlers, ...settings.handlers}\n\n  /** @type {State} */\n  const state = {\n    all,\n    applyData,\n    definitionById,\n    footnoteById,\n    footnoteCounts,\n    footnoteOrder: [],\n    handlers,\n    one,\n    options: settings,\n    patch,\n    wrap\n  }\n\n  visit(tree, function (node) {\n    if (node.type === 'definition' || node.type === 'footnoteDefinition') {\n      const map = node.type === 'definition' ? definitionById : footnoteById\n      const id = String(node.identifier).toUpperCase()\n\n      // Mimick CM behavior of link definitions.\n      // See: <https://github.com/syntax-tree/mdast-util-definitions/blob/9032189/lib/index.js#L20-L21>.\n      if (!map.has(id)) {\n        // @ts-expect-error: node type matches map.\n        map.set(id, node)\n      }\n    }\n  })\n\n  return state\n\n  /**\n   * Transform an mdast node into a hast node.\n   *\n   * @param {MdastNodes} node\n   *   mdast node.\n   * @param {MdastParents | undefined} [parent]\n   *   Parent of `node`.\n   * @returns {Array<HastElementContent> | HastElementContent | undefined}\n   *   Resulting hast node.\n   */\n  function one(node, parent) {\n    const type = node.type\n    const handle = state.handlers[type]\n\n    if (own.call(state.handlers, type) && handle) {\n      return handle(state, node, parent)\n    }\n\n    if (state.options.passThrough && state.options.passThrough.includes(type)) {\n      if ('children' in node) {\n        const {children, ...shallow} = node\n        const result = structuredClone(shallow)\n        // @ts-expect-error: TS doesn’t understand…\n        result.children = state.all(node)\n        // @ts-expect-error: TS doesn’t understand…\n        return result\n      }\n\n      // @ts-expect-error: it’s custom.\n      return structuredClone(node)\n    }\n\n    const unknown = state.options.unknownHandler || defaultUnknownHandler\n\n    return unknown(state, node, parent)\n  }\n\n  /**\n   * Transform the children of an mdast node into hast nodes.\n   *\n   * @param {MdastNodes} parent\n   *   mdast node to compile\n   * @returns {Array<HastElementContent>}\n   *   Resulting hast nodes.\n   */\n  function all(parent) {\n    /** @type {Array<HastElementContent>} */\n    const values = []\n\n    if ('children' in parent) {\n      const nodes = parent.children\n      let index = -1\n      while (++index < nodes.length) {\n        const result = state.one(nodes[index], parent)\n\n        // To do: see if we van clean this? Can we merge texts?\n        if (result) {\n          if (index && nodes[index - 1].type === 'break') {\n            if (!Array.isArray(result) && result.type === 'text') {\n              result.value = trimMarkdownSpaceStart(result.value)\n            }\n\n            if (!Array.isArray(result) && result.type === 'element') {\n              const head = result.children[0]\n\n              if (head && head.type === 'text') {\n                head.value = trimMarkdownSpaceStart(head.value)\n              }\n            }\n          }\n\n          if (Array.isArray(result)) {\n            values.push(...result)\n          } else {\n            values.push(result)\n          }\n        }\n      }\n    }\n\n    return values\n  }\n}\n\n/**\n * Copy a node’s positional info.\n *\n * @param {MdastNodes} from\n *   mdast node to copy from.\n * @param {HastNodes} to\n *   hast node to copy into.\n * @returns {undefined}\n *   Nothing.\n */\nfunction patch(from, to) {\n  if (from.position) to.position = position(from)\n}\n\n/**\n * Honor the `data` of `from` and maybe generate an element instead of `to`.\n *\n * @template {HastNodes} Type\n *   Node type.\n * @param {MdastNodes} from\n *   mdast node to use data from.\n * @param {Type} to\n *   hast node to change.\n * @returns {HastElement | Type}\n *   Nothing.\n */\nfunction applyData(from, to) {\n  /** @type {HastElement | Type} */\n  let result = to\n\n  // Handle `data.hName`, `data.hProperties, `data.hChildren`.\n  if (from && from.data) {\n    const hName = from.data.hName\n    const hChildren = from.data.hChildren\n    const hProperties = from.data.hProperties\n\n    if (typeof hName === 'string') {\n      // Transforming the node resulted in an element with a different name\n      // than wanted:\n      if (result.type === 'element') {\n        result.tagName = hName\n      }\n      // Transforming the node resulted in a non-element, which happens for\n      // raw, text, and root nodes (unless custom handlers are passed).\n      // The intent of `hName` is to create an element, but likely also to keep\n      // the content around (otherwise: pass `hChildren`).\n      else {\n        /** @type {Array<HastElementContent>} */\n        // @ts-expect-error: assume no doctypes in `root`.\n        const children = 'children' in result ? result.children : [result]\n        result = {type: 'element', tagName: hName, properties: {}, children}\n      }\n    }\n\n    if (result.type === 'element' && hProperties) {\n      Object.assign(result.properties, structuredClone(hProperties))\n    }\n\n    if (\n      'children' in result &&\n      result.children &&\n      hChildren !== null &&\n      hChildren !== undefined\n    ) {\n      result.children = hChildren\n    }\n  }\n\n  return result\n}\n\n/**\n * Transform an unknown node.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdastNodes} node\n *   Unknown mdast node.\n * @returns {HastElement | HastText}\n *   Resulting hast node.\n */\nfunction defaultUnknownHandler(state, node) {\n  const data = node.data || {}\n  /** @type {HastElement | HastText} */\n  const result =\n    'value' in node &&\n    !(own.call(data, 'hProperties') || own.call(data, 'hChildren'))\n      ? {type: 'text', value: node.value}\n      : {\n          type: 'element',\n          tagName: 'div',\n          properties: {},\n          children: state.all(node)\n        }\n\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n\n/**\n * Wrap `nodes` with line endings between each node.\n *\n * @template {HastRootContent} Type\n *   Node type.\n * @param {Array<Type>} nodes\n *   List of nodes to wrap.\n * @param {boolean | undefined} [loose=false]\n *   Whether to add line endings at start and end (default: `false`).\n * @returns {Array<HastText | Type>}\n *   Wrapped nodes.\n */\nexport function wrap(nodes, loose) {\n  /** @type {Array<HastText | Type>} */\n  const result = []\n  let index = -1\n\n  if (loose) {\n    result.push({type: 'text', value: '\\n'})\n  }\n\n  while (++index < nodes.length) {\n    if (index) result.push({type: 'text', value: '\\n'})\n    result.push(nodes[index])\n  }\n\n  if (loose && nodes.length > 0) {\n    result.push({type: 'text', value: '\\n'})\n  }\n\n  return result\n}\n\n/**\n * Trim spaces and tabs at the start of `value`.\n *\n * @param {string} value\n *   Value to trim.\n * @returns {string}\n *   Result.\n */\nfunction trimMarkdownSpaceStart(value) {\n  let index = 0\n  let code = value.charCodeAt(index)\n\n  while (code === 9 || code === 32) {\n    index++\n    code = value.charCodeAt(index)\n  }\n\n  return value.slice(index)\n}\n","/**\n * @typedef {import('hast').Nodes} HastNodes\n * @typedef {import('mdast').Nodes} MdastNodes\n * @typedef {import('./state.js').Options} Options\n */\n\nimport {ok as assert} from 'devlop'\nimport {footer} from './footer.js'\nimport {createState} from './state.js'\n\n/**\n * Transform mdast to hast.\n *\n * ##### Notes\n *\n * ###### HTML\n *\n * Raw HTML is available in mdast as `html` nodes and can be embedded in hast\n * as semistandard `raw` nodes.\n * Most utilities ignore `raw` nodes but two notable ones don’t:\n *\n * *   `hast-util-to-html` also has an option `allowDangerousHtml` which will\n *     output the raw HTML.\n *     This is typically discouraged as noted by the option name but is useful\n *     if you completely trust authors\n * *   `hast-util-raw` can handle the raw embedded HTML strings by parsing them\n *     into standard hast nodes (`element`, `text`, etc).\n *     This is a heavy task as it needs a full HTML parser, but it is the only\n *     way to support untrusted content\n *\n * ###### Footnotes\n *\n * Many options supported here relate to footnotes.\n * Footnotes are not specified by CommonMark, which we follow by default.\n * They are supported by GitHub, so footnotes can be enabled in markdown with\n * `mdast-util-gfm`.\n *\n * The options `footnoteBackLabel` and `footnoteLabel` define natural language\n * that explains footnotes, which is hidden for sighted users but shown to\n * assistive technology.\n * When your page is not in English, you must define translated values.\n *\n * Back references use ARIA attributes, but the section label itself uses a\n * heading that is hidden with an `sr-only` class.\n * To show it to sighted users, define different attributes in\n * `footnoteLabelProperties`.\n *\n * ###### Clobbering\n *\n * Footnotes introduces a problem, as it links footnote calls to footnote\n * definitions on the page through `id` attributes generated from user content,\n * which results in DOM clobbering.\n *\n * DOM clobbering is this:\n *\n * ```html\n * <p id=x></p>\n * <script>alert(x) // `x` now refers to the DOM `p#x` element</script>\n * ```\n *\n * Elements by their ID are made available by browsers on the `window` object,\n * which is a security risk.\n * Using a prefix solves this problem.\n *\n * More information on how to handle clobbering and the prefix is explained in\n * Example: headings (DOM clobbering) in `rehype-sanitize`.\n *\n * ###### Unknown nodes\n *\n * Unknown nodes are nodes with a type that isn’t in `handlers` or `passThrough`.\n * The default behavior for unknown nodes is:\n *\n * *   when the node has a `value` (and doesn’t have `data.hName`,\n *     `data.hProperties`, or `data.hChildren`, see later), create a hast `text`\n *     node\n * *   otherwise, create a `<div>` element (which could be changed with\n *     `data.hName`), with its children mapped from mdast to hast as well\n *\n * This behavior can be changed by passing an `unknownHandler`.\n *\n * @param {MdastNodes} tree\n *   mdast tree.\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n * @returns {HastNodes}\n *   hast tree.\n */\nexport function toHast(tree, options) {\n  const state = createState(tree, options)\n  const node = state.one(tree, undefined)\n  const foot = footer(state)\n  /** @type {HastNodes} */\n  const result = Array.isArray(node)\n    ? {type: 'root', children: node}\n    : node || {type: 'root', children: []}\n\n  if (foot) {\n    // If there’s a footer, there were definitions, meaning block\n    // content.\n    // So `result` is a parent node.\n    assert('children' in result)\n    result.children.push({type: 'text', value: '\\n'}, foot)\n  }\n\n  return result\n}\n","/**\n * List of HTML void tag names.\n *\n * @type {Array<string>}\n */\nexport const htmlVoidElements = [\n  'area',\n  'base',\n  'basefont',\n  'bgsound',\n  'br',\n  'col',\n  'command',\n  'embed',\n  'frame',\n  'hr',\n  'image',\n  'img',\n  'input',\n  'keygen',\n  'link',\n  'meta',\n  'param',\n  'source',\n  'track',\n  'wbr'\n]\n","/**\n * @import {Schema as SchemaType, Space} from 'property-information'\n */\n\n/** @type {SchemaType} */\nexport class Schema {\n  /**\n   * @param {SchemaType['property']} property\n   *   Property.\n   * @param {SchemaType['normal']} normal\n   *   Normal.\n   * @param {Space | undefined} [space]\n   *   Space.\n   * @returns\n   *   Schema.\n   */\n  constructor(property, normal, space) {\n    this.normal = normal\n    this.property = property\n\n    if (space) {\n      this.space = space\n    }\n  }\n}\n\nSchema.prototype.normal = {}\nSchema.prototype.property = {}\nSchema.prototype.space = undefined\n","/**\n * @import {Info, Space} from 'property-information'\n */\n\nimport {Schema} from './schema.js'\n\n/**\n * @param {ReadonlyArray<Schema>} definitions\n *   Definitions.\n * @param {Space | undefined} [space]\n *   Space.\n * @returns {Schema}\n *   Schema.\n */\nexport function merge(definitions, space) {\n  /** @type {Record<string, Info>} */\n  const property = {}\n  /** @type {Record<string, string>} */\n  const normal = {}\n\n  for (const definition of definitions) {\n    Object.assign(property, definition.property)\n    Object.assign(normal, definition.normal)\n  }\n\n  return new Schema(property, normal, space)\n}\n","/**\n * Get the cleaned case insensitive form of an attribute or property.\n *\n * @param {string} value\n *   An attribute-like or property-like name.\n * @returns {string}\n *   Value that can be used to look up the properly cased property on a\n *   `Schema`.\n */\nexport function normalize(value) {\n  return value.toLowerCase()\n}\n","/**\n * @import {Info as InfoType} from 'property-information'\n */\n\n/** @type {InfoType} */\nexport class Info {\n  /**\n   * @param {string} property\n   *   Property.\n   * @param {string} attribute\n   *   Attribute.\n   * @returns\n   *   Info.\n   */\n  constructor(property, attribute) {\n    this.attribute = attribute\n    this.property = property\n  }\n}\n\nInfo.prototype.attribute = ''\nInfo.prototype.booleanish = false\nInfo.prototype.boolean = false\nInfo.prototype.commaOrSpaceSeparated = false\nInfo.prototype.commaSeparated = false\nInfo.prototype.defined = false\nInfo.prototype.mustUseProperty = false\nInfo.prototype.number = false\nInfo.prototype.overloadedBoolean = false\nInfo.prototype.property = ''\nInfo.prototype.spaceSeparated = false\nInfo.prototype.space = undefined\n","let powers = 0\n\nexport const boolean = increment()\nexport const booleanish = increment()\nexport const overloadedBoolean = increment()\nexport const number = increment()\nexport const spaceSeparated = increment()\nexport const commaSeparated = increment()\nexport const commaOrSpaceSeparated = increment()\n\nfunction increment() {\n  return 2 ** ++powers\n}\n","/**\n * @import {Space} from 'property-information'\n */\n\nimport {Info} from './info.js'\nimport * as types from './types.js'\n\nconst checks = /** @type {ReadonlyArray<keyof typeof types>} */ (\n  Object.keys(types)\n)\n\nexport class DefinedInfo extends Info {\n  /**\n   * @constructor\n   * @param {string} property\n   *   Property.\n   * @param {string} attribute\n   *   Attribute.\n   * @param {number | null | undefined} [mask]\n   *   Mask.\n   * @param {Space | undefined} [space]\n   *   Space.\n   * @returns\n   *   Info.\n   */\n  constructor(property, attribute, mask, space) {\n    let index = -1\n\n    super(property, attribute)\n\n    mark(this, 'space', space)\n\n    if (typeof mask === 'number') {\n      while (++index < checks.length) {\n        const check = checks[index]\n        mark(this, checks[index], (mask & types[check]) === types[check])\n      }\n    }\n  }\n}\n\nDefinedInfo.prototype.defined = true\n\n/**\n * @template {keyof DefinedInfo} Key\n *   Key type.\n * @param {DefinedInfo} values\n *   Info.\n * @param {Key} key\n *   Key.\n * @param {DefinedInfo[Key]} value\n *   Value.\n * @returns {undefined}\n *   Nothing.\n */\nfunction mark(values, key, value) {\n  if (value) {\n    values[key] = value\n  }\n}\n","/**\n * @import {Info, Space} from 'property-information'\n */\n\n/**\n * @typedef Definition\n *   Definition of a schema.\n * @property {Record<string, string> | undefined} [attributes]\n *   Normalzed names to special attribute case.\n * @property {ReadonlyArray<string> | undefined} [mustUseProperty]\n *   Normalized names that must be set as properties.\n * @property {Record<string, number | null>} properties\n *   Property names to their types.\n * @property {Space | undefined} [space]\n *   Space.\n * @property {Transform} transform\n *   Transform a property name.\n */\n\n/**\n * @callback Transform\n *   Transform.\n * @param {Record<string, string>} attributes\n *   Attributes.\n * @param {string} property\n *   Property.\n * @returns {string}\n *   Attribute.\n */\n\nimport {normalize} from '../normalize.js'\nimport {DefinedInfo} from './defined-info.js'\nimport {Schema} from './schema.js'\n\n/**\n * @param {Definition} definition\n *   Definition.\n * @returns {Schema}\n *   Schema.\n */\nexport function create(definition) {\n  /** @type {Record<string, Info>} */\n  const properties = {}\n  /** @type {Record<string, string>} */\n  const normals = {}\n\n  for (const [property, value] of Object.entries(definition.properties)) {\n    const info = new DefinedInfo(\n      property,\n      definition.transform(definition.attributes || {}, property),\n      value,\n      definition.space\n    )\n\n    if (\n      definition.mustUseProperty &&\n      definition.mustUseProperty.includes(property)\n    ) {\n      info.mustUseProperty = true\n    }\n\n    properties[property] = info\n\n    normals[normalize(property)] = property\n    normals[normalize(info.attribute)] = property\n  }\n\n  return new Schema(properties, normals, definition.space)\n}\n","import {create} from './util/create.js'\nimport {booleanish, number, spaceSeparated} from './util/types.js'\n\nexport const aria = create({\n  properties: {\n    ariaActiveDescendant: null,\n    ariaAtomic: booleanish,\n    ariaAutoComplete: null,\n    ariaBusy: booleanish,\n    ariaChecked: booleanish,\n    ariaColCount: number,\n    ariaColIndex: number,\n    ariaColSpan: number,\n    ariaControls: spaceSeparated,\n    ariaCurrent: null,\n    ariaDescribedBy: spaceSeparated,\n    ariaDetails: null,\n    ariaDisabled: booleanish,\n    ariaDropEffect: spaceSeparated,\n    ariaErrorMessage: null,\n    ariaExpanded: booleanish,\n    ariaFlowTo: spaceSeparated,\n    ariaGrabbed: booleanish,\n    ariaHasPopup: null,\n    ariaHidden: booleanish,\n    ariaInvalid: null,\n    ariaKeyShortcuts: null,\n    ariaLabel: null,\n    ariaLabelledBy: spaceSeparated,\n    ariaLevel: number,\n    ariaLive: null,\n    ariaModal: booleanish,\n    ariaMultiLine: booleanish,\n    ariaMultiSelectable: booleanish,\n    ariaOrientation: null,\n    ariaOwns: spaceSeparated,\n    ariaPlaceholder: null,\n    ariaPosInSet: number,\n    ariaPressed: booleanish,\n    ariaReadOnly: booleanish,\n    ariaRelevant: null,\n    ariaRequired: booleanish,\n    ariaRoleDescription: spaceSeparated,\n    ariaRowCount: number,\n    ariaRowIndex: number,\n    ariaRowSpan: number,\n    ariaSelected: booleanish,\n    ariaSetSize: number,\n    ariaSort: null,\n    ariaValueMax: number,\n    ariaValueMin: number,\n    ariaValueNow: number,\n    ariaValueText: null,\n    role: null\n  },\n  transform(_, property) {\n    return property === 'role'\n      ? property\n      : 'aria-' + property.slice(4).toLowerCase()\n  }\n})\n","/**\n * @param {Record<string, string>} attributes\n *   Attributes.\n * @param {string} attribute\n *   Attribute.\n * @returns {string}\n *   Transformed attribute.\n */\nexport function caseSensitiveTransform(attributes, attribute) {\n  return attribute in attributes ? attributes[attribute] : attribute\n}\n","import {caseSensitiveTransform} from './case-sensitive-transform.js'\n\n/**\n * @param {Record<string, string>} attributes\n *   Attributes.\n * @param {string} property\n *   Property.\n * @returns {string}\n *   Transformed property.\n */\nexport function caseInsensitiveTransform(attributes, property) {\n  return caseSensitiveTransform(attributes, property.toLowerCase())\n}\n","import {caseInsensitiveTransform} from './util/case-insensitive-transform.js'\nimport {create} from './util/create.js'\nimport {\n  booleanish,\n  boolean,\n  commaSeparated,\n  number,\n  overloadedBoolean,\n  spaceSeparated\n} from './util/types.js'\n\nexport const html = create({\n  attributes: {\n    acceptcharset: 'accept-charset',\n    classname: 'class',\n    htmlfor: 'for',\n    httpequiv: 'http-equiv'\n  },\n  mustUseProperty: ['checked', 'multiple', 'muted', 'selected'],\n  properties: {\n    // Standard Properties.\n    abbr: null,\n    accept: commaSeparated,\n    acceptCharset: spaceSeparated,\n    accessKey: spaceSeparated,\n    action: null,\n    allow: null,\n    allowFullScreen: boolean,\n    allowPaymentRequest: boolean,\n    allowUserMedia: boolean,\n    alt: null,\n    as: null,\n    async: boolean,\n    autoCapitalize: null,\n    autoComplete: spaceSeparated,\n    autoFocus: boolean,\n    autoPlay: boolean,\n    blocking: spaceSeparated,\n    capture: null,\n    charSet: null,\n    checked: boolean,\n    cite: null,\n    className: spaceSeparated,\n    cols: number,\n    colSpan: null,\n    content: null,\n    contentEditable: booleanish,\n    controls: boolean,\n    controlsList: spaceSeparated,\n    coords: number | commaSeparated,\n    crossOrigin: null,\n    data: null,\n    dateTime: null,\n    decoding: null,\n    default: boolean,\n    defer: boolean,\n    dir: null,\n    dirName: null,\n    disabled: boolean,\n    download: overloadedBoolean,\n    draggable: booleanish,\n    encType: null,\n    enterKeyHint: null,\n    fetchPriority: null,\n    form: null,\n    formAction: null,\n    formEncType: null,\n    formMethod: null,\n    formNoValidate: boolean,\n    formTarget: null,\n    headers: spaceSeparated,\n    height: number,\n    hidden: overloadedBoolean,\n    high: number,\n    href: null,\n    hrefLang: null,\n    htmlFor: spaceSeparated,\n    httpEquiv: spaceSeparated,\n    id: null,\n    imageSizes: null,\n    imageSrcSet: null,\n    inert: boolean,\n    inputMode: null,\n    integrity: null,\n    is: null,\n    isMap: boolean,\n    itemId: null,\n    itemProp: spaceSeparated,\n    itemRef: spaceSeparated,\n    itemScope: boolean,\n    itemType: spaceSeparated,\n    kind: null,\n    label: null,\n    lang: null,\n    language: null,\n    list: null,\n    loading: null,\n    loop: boolean,\n    low: number,\n    manifest: null,\n    max: null,\n    maxLength: number,\n    media: null,\n    method: null,\n    min: null,\n    minLength: number,\n    multiple: boolean,\n    muted: boolean,\n    name: null,\n    nonce: null,\n    noModule: boolean,\n    noValidate: boolean,\n    onAbort: null,\n    onAfterPrint: null,\n    onAuxClick: null,\n    onBeforeMatch: null,\n    onBeforePrint: null,\n    onBeforeToggle: null,\n    onBeforeUnload: null,\n    onBlur: null,\n    onCancel: null,\n    onCanPlay: null,\n    onCanPlayThrough: null,\n    onChange: null,\n    onClick: null,\n    onClose: null,\n    onContextLost: null,\n    onContextMenu: null,\n    onContextRestored: null,\n    onCopy: null,\n    onCueChange: null,\n    onCut: null,\n    onDblClick: null,\n    onDrag: null,\n    onDragEnd: null,\n    onDragEnter: null,\n    onDragExit: null,\n    onDragLeave: null,\n    onDragOver: null,\n    onDragStart: null,\n    onDrop: null,\n    onDurationChange: null,\n    onEmptied: null,\n    onEnded: null,\n    onError: null,\n    onFocus: null,\n    onFormData: null,\n    onHashChange: null,\n    onInput: null,\n    onInvalid: null,\n    onKeyDown: null,\n    onKeyPress: null,\n    onKeyUp: null,\n    onLanguageChange: null,\n    onLoad: null,\n    onLoadedData: null,\n    onLoadedMetadata: null,\n    onLoadEnd: null,\n    onLoadStart: null,\n    onMessage: null,\n    onMessageError: null,\n    onMouseDown: null,\n    onMouseEnter: null,\n    onMouseLeave: null,\n    onMouseMove: null,\n    onMouseOut: null,\n    onMouseOver: null,\n    onMouseUp: null,\n    onOffline: null,\n    onOnline: null,\n    onPageHide: null,\n    onPageShow: null,\n    onPaste: null,\n    onPause: null,\n    onPlay: null,\n    onPlaying: null,\n    onPopState: null,\n    onProgress: null,\n    onRateChange: null,\n    onRejectionHandled: null,\n    onReset: null,\n    onResize: null,\n    onScroll: null,\n    onScrollEnd: null,\n    onSecurityPolicyViolation: null,\n    onSeeked: null,\n    onSeeking: null,\n    onSelect: null,\n    onSlotChange: null,\n    onStalled: null,\n    onStorage: null,\n    onSubmit: null,\n    onSuspend: null,\n    onTimeUpdate: null,\n    onToggle: null,\n    onUnhandledRejection: null,\n    onUnload: null,\n    onVolumeChange: null,\n    onWaiting: null,\n    onWheel: null,\n    open: boolean,\n    optimum: number,\n    pattern: null,\n    ping: spaceSeparated,\n    placeholder: null,\n    playsInline: boolean,\n    popover: null,\n    popoverTarget: null,\n    popoverTargetAction: null,\n    poster: null,\n    preload: null,\n    readOnly: boolean,\n    referrerPolicy: null,\n    rel: spaceSeparated,\n    required: boolean,\n    reversed: boolean,\n    rows: number,\n    rowSpan: number,\n    sandbox: spaceSeparated,\n    scope: null,\n    scoped: boolean,\n    seamless: boolean,\n    selected: boolean,\n    shadowRootClonable: boolean,\n    shadowRootDelegatesFocus: boolean,\n    shadowRootMode: null,\n    shape: null,\n    size: number,\n    sizes: null,\n    slot: null,\n    span: number,\n    spellCheck: booleanish,\n    src: null,\n    srcDoc: null,\n    srcLang: null,\n    srcSet: null,\n    start: number,\n    step: null,\n    style: null,\n    tabIndex: number,\n    target: null,\n    title: null,\n    translate: null,\n    type: null,\n    typeMustMatch: boolean,\n    useMap: null,\n    value: booleanish,\n    width: number,\n    wrap: null,\n    writingSuggestions: null,\n\n    // Legacy.\n    // See: https://html.spec.whatwg.org/#other-elements,-attributes-and-apis\n    align: null, // Several. Use CSS `text-align` instead,\n    aLink: null, // `<body>`. Use CSS `a:active {color}` instead\n    archive: spaceSeparated, // `<object>`. List of URIs to archives\n    axis: null, // `<td>` and `<th>`. Use `scope` on `<th>`\n    background: null, // `<body>`. Use CSS `background-image` instead\n    bgColor: null, // `<body>` and table elements. Use CSS `background-color` instead\n    border: number, // `<table>`. Use CSS `border-width` instead,\n    borderColor: null, // `<table>`. Use CSS `border-color` instead,\n    bottomMargin: number, // `<body>`\n    cellPadding: null, // `<table>`\n    cellSpacing: null, // `<table>`\n    char: null, // Several table elements. When `align=char`, sets the character to align on\n    charOff: null, // Several table elements. When `char`, offsets the alignment\n    classId: null, // `<object>`\n    clear: null, // `<br>`. Use CSS `clear` instead\n    code: null, // `<object>`\n    codeBase: null, // `<object>`\n    codeType: null, // `<object>`\n    color: null, // `<font>` and `<hr>`. Use CSS instead\n    compact: boolean, // Lists. Use CSS to reduce space between items instead\n    declare: boolean, // `<object>`\n    event: null, // `<script>`\n    face: null, // `<font>`. Use CSS instead\n    frame: null, // `<table>`\n    frameBorder: null, // `<iframe>`. Use CSS `border` instead\n    hSpace: number, // `<img>` and `<object>`\n    leftMargin: number, // `<body>`\n    link: null, // `<body>`. Use CSS `a:link {color: *}` instead\n    longDesc: null, // `<frame>`, `<iframe>`, and `<img>`. Use an `<a>`\n    lowSrc: null, // `<img>`. Use a `<picture>`\n    marginHeight: number, // `<body>`\n    marginWidth: number, // `<body>`\n    noResize: boolean, // `<frame>`\n    noHref: boolean, // `<area>`. Use no href instead of an explicit `nohref`\n    noShade: boolean, // `<hr>`. Use background-color and height instead of borders\n    noWrap: boolean, // `<td>` and `<th>`\n    object: null, // `<applet>`\n    profile: null, // `<head>`\n    prompt: null, // `<isindex>`\n    rev: null, // `<link>`\n    rightMargin: number, // `<body>`\n    rules: null, // `<table>`\n    scheme: null, // `<meta>`\n    scrolling: booleanish, // `<frame>`. Use overflow in the child context\n    standby: null, // `<object>`\n    summary: null, // `<table>`\n    text: null, // `<body>`. Use CSS `color` instead\n    topMargin: number, // `<body>`\n    valueType: null, // `<param>`\n    version: null, // `<html>`. Use a doctype.\n    vAlign: null, // Several. Use CSS `vertical-align` instead\n    vLink: null, // `<body>`. Use CSS `a:visited {color}` instead\n    vSpace: number, // `<img>` and `<object>`\n\n    // Non-standard Properties.\n    allowTransparency: null,\n    autoCorrect: null,\n    autoSave: null,\n    disablePictureInPicture: boolean,\n    disableRemotePlayback: boolean,\n    prefix: null,\n    property: null,\n    results: number,\n    security: null,\n    unselectable: null\n  },\n  space: 'html',\n  transform: caseInsensitiveTransform\n})\n","import {caseSensitiveTransform} from './util/case-sensitive-transform.js'\nimport {create} from './util/create.js'\nimport {\n  boolean,\n  commaOrSpaceSeparated,\n  commaSeparated,\n  number,\n  spaceSeparated\n} from './util/types.js'\n\nexport const svg = create({\n  attributes: {\n    accentHeight: 'accent-height',\n    alignmentBaseline: 'alignment-baseline',\n    arabicForm: 'arabic-form',\n    baselineShift: 'baseline-shift',\n    capHeight: 'cap-height',\n    className: 'class',\n    clipPath: 'clip-path',\n    clipRule: 'clip-rule',\n    colorInterpolation: 'color-interpolation',\n    colorInterpolationFilters: 'color-interpolation-filters',\n    colorProfile: 'color-profile',\n    colorRendering: 'color-rendering',\n    crossOrigin: 'crossorigin',\n    dataType: 'datatype',\n    dominantBaseline: 'dominant-baseline',\n    enableBackground: 'enable-background',\n    fillOpacity: 'fill-opacity',\n    fillRule: 'fill-rule',\n    floodColor: 'flood-color',\n    floodOpacity: 'flood-opacity',\n    fontFamily: 'font-family',\n    fontSize: 'font-size',\n    fontSizeAdjust: 'font-size-adjust',\n    fontStretch: 'font-stretch',\n    fontStyle: 'font-style',\n    fontVariant: 'font-variant',\n    fontWeight: 'font-weight',\n    glyphName: 'glyph-name',\n    glyphOrientationHorizontal: 'glyph-orientation-horizontal',\n    glyphOrientationVertical: 'glyph-orientation-vertical',\n    hrefLang: 'hreflang',\n    horizAdvX: 'horiz-adv-x',\n    horizOriginX: 'horiz-origin-x',\n    horizOriginY: 'horiz-origin-y',\n    imageRendering: 'image-rendering',\n    letterSpacing: 'letter-spacing',\n    lightingColor: 'lighting-color',\n    markerEnd: 'marker-end',\n    markerMid: 'marker-mid',\n    markerStart: 'marker-start',\n    navDown: 'nav-down',\n    navDownLeft: 'nav-down-left',\n    navDownRight: 'nav-down-right',\n    navLeft: 'nav-left',\n    navNext: 'nav-next',\n    navPrev: 'nav-prev',\n    navRight: 'nav-right',\n    navUp: 'nav-up',\n    navUpLeft: 'nav-up-left',\n    navUpRight: 'nav-up-right',\n    onAbort: 'onabort',\n    onActivate: 'onactivate',\n    onAfterPrint: 'onafterprint',\n    onBeforePrint: 'onbeforeprint',\n    onBegin: 'onbegin',\n    onCancel: 'oncancel',\n    onCanPlay: 'oncanplay',\n    onCanPlayThrough: 'oncanplaythrough',\n    onChange: 'onchange',\n    onClick: 'onclick',\n    onClose: 'onclose',\n    onCopy: 'oncopy',\n    onCueChange: 'oncuechange',\n    onCut: 'oncut',\n    onDblClick: 'ondblclick',\n    onDrag: 'ondrag',\n    onDragEnd: 'ondragend',\n    onDragEnter: 'ondragenter',\n    onDragExit: 'ondragexit',\n    onDragLeave: 'ondragleave',\n    onDragOver: 'ondragover',\n    onDragStart: 'ondragstart',\n    onDrop: 'ondrop',\n    onDurationChange: 'ondurationchange',\n    onEmptied: 'onemptied',\n    onEnd: 'onend',\n    onEnded: 'onended',\n    onError: 'onerror',\n    onFocus: 'onfocus',\n    onFocusIn: 'onfocusin',\n    onFocusOut: 'onfocusout',\n    onHashChange: 'onhashchange',\n    onInput: 'oninput',\n    onInvalid: 'oninvalid',\n    onKeyDown: 'onkeydown',\n    onKeyPress: 'onkeypress',\n    onKeyUp: 'onkeyup',\n    onLoad: 'onload',\n    onLoadedData: 'onloadeddata',\n    onLoadedMetadata: 'onloadedmetadata',\n    onLoadStart: 'onloadstart',\n    onMessage: 'onmessage',\n    onMouseDown: 'onmousedown',\n    onMouseEnter: 'onmouseenter',\n    onMouseLeave: 'onmouseleave',\n    onMouseMove: 'onmousemove',\n    onMouseOut: 'onmouseout',\n    onMouseOver: 'onmouseover',\n    onMouseUp: 'onmouseup',\n    onMouseWheel: 'onmousewheel',\n    onOffline: 'onoffline',\n    onOnline: 'ononline',\n    onPageHide: 'onpagehide',\n    onPageShow: 'onpageshow',\n    onPaste: 'onpaste',\n    onPause: 'onpause',\n    onPlay: 'onplay',\n    onPlaying: 'onplaying',\n    onPopState: 'onpopstate',\n    onProgress: 'onprogress',\n    onRateChange: 'onratechange',\n    onRepeat: 'onrepeat',\n    onReset: 'onreset',\n    onResize: 'onresize',\n    onScroll: 'onscroll',\n    onSeeked: 'onseeked',\n    onSeeking: 'onseeking',\n    onSelect: 'onselect',\n    onShow: 'onshow',\n    onStalled: 'onstalled',\n    onStorage: 'onstorage',\n    onSubmit: 'onsubmit',\n    onSuspend: 'onsuspend',\n    onTimeUpdate: 'ontimeupdate',\n    onToggle: 'ontoggle',\n    onUnload: 'onunload',\n    onVolumeChange: 'onvolumechange',\n    onWaiting: 'onwaiting',\n    onZoom: 'onzoom',\n    overlinePosition: 'overline-position',\n    overlineThickness: 'overline-thickness',\n    paintOrder: 'paint-order',\n    panose1: 'panose-1',\n    pointerEvents: 'pointer-events',\n    referrerPolicy: 'referrerpolicy',\n    renderingIntent: 'rendering-intent',\n    shapeRendering: 'shape-rendering',\n    stopColor: 'stop-color',\n    stopOpacity: 'stop-opacity',\n    strikethroughPosition: 'strikethrough-position',\n    strikethroughThickness: 'strikethrough-thickness',\n    strokeDashArray: 'stroke-dasharray',\n    strokeDashOffset: 'stroke-dashoffset',\n    strokeLineCap: 'stroke-linecap',\n    strokeLineJoin: 'stroke-linejoin',\n    strokeMiterLimit: 'stroke-miterlimit',\n    strokeOpacity: 'stroke-opacity',\n    strokeWidth: 'stroke-width',\n    tabIndex: 'tabindex',\n    textAnchor: 'text-anchor',\n    textDecoration: 'text-decoration',\n    textRendering: 'text-rendering',\n    transformOrigin: 'transform-origin',\n    typeOf: 'typeof',\n    underlinePosition: 'underline-position',\n    underlineThickness: 'underline-thickness',\n    unicodeBidi: 'unicode-bidi',\n    unicodeRange: 'unicode-range',\n    unitsPerEm: 'units-per-em',\n    vAlphabetic: 'v-alphabetic',\n    vHanging: 'v-hanging',\n    vIdeographic: 'v-ideographic',\n    vMathematical: 'v-mathematical',\n    vectorEffect: 'vector-effect',\n    vertAdvY: 'vert-adv-y',\n    vertOriginX: 'vert-origin-x',\n    vertOriginY: 'vert-origin-y',\n    wordSpacing: 'word-spacing',\n    writingMode: 'writing-mode',\n    xHeight: 'x-height',\n    // These were camelcased in Tiny. Now lowercased in SVG 2\n    playbackOrder: 'playbackorder',\n    timelineBegin: 'timelinebegin'\n  },\n  properties: {\n    about: commaOrSpaceSeparated,\n    accentHeight: number,\n    accumulate: null,\n    additive: null,\n    alignmentBaseline: null,\n    alphabetic: number,\n    amplitude: number,\n    arabicForm: null,\n    ascent: number,\n    attributeName: null,\n    attributeType: null,\n    azimuth: number,\n    bandwidth: null,\n    baselineShift: null,\n    baseFrequency: null,\n    baseProfile: null,\n    bbox: null,\n    begin: null,\n    bias: number,\n    by: null,\n    calcMode: null,\n    capHeight: number,\n    className: spaceSeparated,\n    clip: null,\n    clipPath: null,\n    clipPathUnits: null,\n    clipRule: null,\n    color: null,\n    colorInterpolation: null,\n    colorInterpolationFilters: null,\n    colorProfile: null,\n    colorRendering: null,\n    content: null,\n    contentScriptType: null,\n    contentStyleType: null,\n    crossOrigin: null,\n    cursor: null,\n    cx: null,\n    cy: null,\n    d: null,\n    dataType: null,\n    defaultAction: null,\n    descent: number,\n    diffuseConstant: number,\n    direction: null,\n    display: null,\n    dur: null,\n    divisor: number,\n    dominantBaseline: null,\n    download: boolean,\n    dx: null,\n    dy: null,\n    edgeMode: null,\n    editable: null,\n    elevation: number,\n    enableBackground: null,\n    end: null,\n    event: null,\n    exponent: number,\n    externalResourcesRequired: null,\n    fill: null,\n    fillOpacity: number,\n    fillRule: null,\n    filter: null,\n    filterRes: null,\n    filterUnits: null,\n    floodColor: null,\n    floodOpacity: null,\n    focusable: null,\n    focusHighlight: null,\n    fontFamily: null,\n    fontSize: null,\n    fontSizeAdjust: null,\n    fontStretch: null,\n    fontStyle: null,\n    fontVariant: null,\n    fontWeight: null,\n    format: null,\n    fr: null,\n    from: null,\n    fx: null,\n    fy: null,\n    g1: commaSeparated,\n    g2: commaSeparated,\n    glyphName: commaSeparated,\n    glyphOrientationHorizontal: null,\n    glyphOrientationVertical: null,\n    glyphRef: null,\n    gradientTransform: null,\n    gradientUnits: null,\n    handler: null,\n    hanging: number,\n    hatchContentUnits: null,\n    hatchUnits: null,\n    height: null,\n    href: null,\n    hrefLang: null,\n    horizAdvX: number,\n    horizOriginX: number,\n    horizOriginY: number,\n    id: null,\n    ideographic: number,\n    imageRendering: null,\n    initialVisibility: null,\n    in: null,\n    in2: null,\n    intercept: number,\n    k: number,\n    k1: number,\n    k2: number,\n    k3: number,\n    k4: number,\n    kernelMatrix: commaOrSpaceSeparated,\n    kernelUnitLength: null,\n    keyPoints: null, // SEMI_COLON_SEPARATED\n    keySplines: null, // SEMI_COLON_SEPARATED\n    keyTimes: null, // SEMI_COLON_SEPARATED\n    kerning: null,\n    lang: null,\n    lengthAdjust: null,\n    letterSpacing: null,\n    lightingColor: null,\n    limitingConeAngle: number,\n    local: null,\n    markerEnd: null,\n    markerMid: null,\n    markerStart: null,\n    markerHeight: null,\n    markerUnits: null,\n    markerWidth: null,\n    mask: null,\n    maskContentUnits: null,\n    maskUnits: null,\n    mathematical: null,\n    max: null,\n    media: null,\n    mediaCharacterEncoding: null,\n    mediaContentEncodings: null,\n    mediaSize: number,\n    mediaTime: null,\n    method: null,\n    min: null,\n    mode: null,\n    name: null,\n    navDown: null,\n    navDownLeft: null,\n    navDownRight: null,\n    navLeft: null,\n    navNext: null,\n    navPrev: null,\n    navRight: null,\n    navUp: null,\n    navUpLeft: null,\n    navUpRight: null,\n    numOctaves: null,\n    observer: null,\n    offset: null,\n    onAbort: null,\n    onActivate: null,\n    onAfterPrint: null,\n    onBeforePrint: null,\n    onBegin: null,\n    onCancel: null,\n    onCanPlay: null,\n    onCanPlayThrough: null,\n    onChange: null,\n    onClick: null,\n    onClose: null,\n    onCopy: null,\n    onCueChange: null,\n    onCut: null,\n    onDblClick: null,\n    onDrag: null,\n    onDragEnd: null,\n    onDragEnter: null,\n    onDragExit: null,\n    onDragLeave: null,\n    onDragOver: null,\n    onDragStart: null,\n    onDrop: null,\n    onDurationChange: null,\n    onEmptied: null,\n    onEnd: null,\n    onEnded: null,\n    onError: null,\n    onFocus: null,\n    onFocusIn: null,\n    onFocusOut: null,\n    onHashChange: null,\n    onInput: null,\n    onInvalid: null,\n    onKeyDown: null,\n    onKeyPress: null,\n    onKeyUp: null,\n    onLoad: null,\n    onLoadedData: null,\n    onLoadedMetadata: null,\n    onLoadStart: null,\n    onMessage: null,\n    onMouseDown: null,\n    onMouseEnter: null,\n    onMouseLeave: null,\n    onMouseMove: null,\n    onMouseOut: null,\n    onMouseOver: null,\n    onMouseUp: null,\n    onMouseWheel: null,\n    onOffline: null,\n    onOnline: null,\n    onPageHide: null,\n    onPageShow: null,\n    onPaste: null,\n    onPause: null,\n    onPlay: null,\n    onPlaying: null,\n    onPopState: null,\n    onProgress: null,\n    onRateChange: null,\n    onRepeat: null,\n    onReset: null,\n    onResize: null,\n    onScroll: null,\n    onSeeked: null,\n    onSeeking: null,\n    onSelect: null,\n    onShow: null,\n    onStalled: null,\n    onStorage: null,\n    onSubmit: null,\n    onSuspend: null,\n    onTimeUpdate: null,\n    onToggle: null,\n    onUnload: null,\n    onVolumeChange: null,\n    onWaiting: null,\n    onZoom: null,\n    opacity: null,\n    operator: null,\n    order: null,\n    orient: null,\n    orientation: null,\n    origin: null,\n    overflow: null,\n    overlay: null,\n    overlinePosition: number,\n    overlineThickness: number,\n    paintOrder: null,\n    panose1: null,\n    path: null,\n    pathLength: number,\n    patternContentUnits: null,\n    patternTransform: null,\n    patternUnits: null,\n    phase: null,\n    ping: spaceSeparated,\n    pitch: null,\n    playbackOrder: null,\n    pointerEvents: null,\n    points: null,\n    pointsAtX: number,\n    pointsAtY: number,\n    pointsAtZ: number,\n    preserveAlpha: null,\n    preserveAspectRatio: null,\n    primitiveUnits: null,\n    propagate: null,\n    property: commaOrSpaceSeparated,\n    r: null,\n    radius: null,\n    referrerPolicy: null,\n    refX: null,\n    refY: null,\n    rel: commaOrSpaceSeparated,\n    rev: commaOrSpaceSeparated,\n    renderingIntent: null,\n    repeatCount: null,\n    repeatDur: null,\n    requiredExtensions: commaOrSpaceSeparated,\n    requiredFeatures: commaOrSpaceSeparated,\n    requiredFonts: commaOrSpaceSeparated,\n    requiredFormats: commaOrSpaceSeparated,\n    resource: null,\n    restart: null,\n    result: null,\n    rotate: null,\n    rx: null,\n    ry: null,\n    scale: null,\n    seed: null,\n    shapeRendering: null,\n    side: null,\n    slope: null,\n    snapshotTime: null,\n    specularConstant: number,\n    specularExponent: number,\n    spreadMethod: null,\n    spacing: null,\n    startOffset: null,\n    stdDeviation: null,\n    stemh: null,\n    stemv: null,\n    stitchTiles: null,\n    stopColor: null,\n    stopOpacity: null,\n    strikethroughPosition: number,\n    strikethroughThickness: number,\n    string: null,\n    stroke: null,\n    strokeDashArray: commaOrSpaceSeparated,\n    strokeDashOffset: null,\n    strokeLineCap: null,\n    strokeLineJoin: null,\n    strokeMiterLimit: number,\n    strokeOpacity: number,\n    strokeWidth: null,\n    style: null,\n    surfaceScale: number,\n    syncBehavior: null,\n    syncBehaviorDefault: null,\n    syncMaster: null,\n    syncTolerance: null,\n    syncToleranceDefault: null,\n    systemLanguage: commaOrSpaceSeparated,\n    tabIndex: number,\n    tableValues: null,\n    target: null,\n    targetX: number,\n    targetY: number,\n    textAnchor: null,\n    textDecoration: null,\n    textRendering: null,\n    textLength: null,\n    timelineBegin: null,\n    title: null,\n    transformBehavior: null,\n    type: null,\n    typeOf: commaOrSpaceSeparated,\n    to: null,\n    transform: null,\n    transformOrigin: null,\n    u1: null,\n    u2: null,\n    underlinePosition: number,\n    underlineThickness: number,\n    unicode: null,\n    unicodeBidi: null,\n    unicodeRange: null,\n    unitsPerEm: number,\n    values: null,\n    vAlphabetic: number,\n    vMathematical: number,\n    vectorEffect: null,\n    vHanging: number,\n    vIdeographic: number,\n    version: null,\n    vertAdvY: number,\n    vertOriginX: number,\n    vertOriginY: number,\n    viewBox: null,\n    viewTarget: null,\n    visibility: null,\n    width: null,\n    widths: null,\n    wordSpacing: null,\n    writingMode: null,\n    x: null,\n    x1: null,\n    x2: null,\n    xChannelSelector: null,\n    xHeight: number,\n    y: null,\n    y1: null,\n    y2: null,\n    yChannelSelector: null,\n    z: null,\n    zoomAndPan: null\n  },\n  space: 'svg',\n  transform: caseSensitiveTransform\n})\n","import {create} from './util/create.js'\n\nexport const xlink = create({\n  properties: {\n    xLinkActuate: null,\n    xLinkArcRole: null,\n    xLinkHref: null,\n    xLinkRole: null,\n    xLinkShow: null,\n    xLinkTitle: null,\n    xLinkType: null\n  },\n  space: 'xlink',\n  transform(_, property) {\n    return 'xlink:' + property.slice(5).toLowerCase()\n  }\n})\n","import {create} from './util/create.js'\nimport {caseInsensitiveTransform} from './util/case-insensitive-transform.js'\n\nexport const xmlns = create({\n  attributes: {xmlnsxlink: 'xmlns:xlink'},\n  properties: {xmlnsXLink: null, xmlns: null},\n  space: 'xmlns',\n  transform: caseInsensitiveTransform\n})\n","import {create} from './util/create.js'\n\nexport const xml = create({\n  properties: {xmlBase: null, xmlLang: null, xmlSpace: null},\n  space: 'xml',\n  transform(_, property) {\n    return 'xml:' + property.slice(3).toLowerCase()\n  }\n})\n","// Note: types exposed from `index.d.ts`.\nimport {merge} from './lib/util/merge.js'\nimport {aria} from './lib/aria.js'\nimport {html as htmlBase} from './lib/html.js'\nimport {svg as svgBase} from './lib/svg.js'\nimport {xlink} from './lib/xlink.js'\nimport {xmlns} from './lib/xmlns.js'\nimport {xml} from './lib/xml.js'\n\nexport {hastToReact} from './lib/hast-to-react.js'\n\nexport const html = merge([aria, htmlBase, xlink, xmlns, xml], 'html')\n\nexport {find} from './lib/find.js'\nexport {normalize} from './lib/normalize.js'\n\nexport const svg = merge([aria, svgBase, xlink, xmlns, xml], 'svg')\n","/**\n * @typedef CoreOptions\n * @property {ReadonlyArray<string>} [subset=[]]\n *   Whether to only escape the given subset of characters.\n * @property {boolean} [escapeOnly=false]\n *   Whether to only escape possibly dangerous characters.\n *   Those characters are `\"`, `&`, `'`, `<`, `>`, and `` ` ``.\n *\n * @typedef FormatOptions\n * @property {(code: number, next: number, options: CoreWithFormatOptions) => string} format\n *   Format strategy.\n *\n * @typedef {CoreOptions & FormatOptions & import('./util/format-smart.js').FormatSmartOptions} CoreWithFormatOptions\n */\n\nconst defaultSubsetRegex = /[\"&'<>`]/g\nconst surrogatePairsRegex = /[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]/g\nconst controlCharactersRegex =\n  // eslint-disable-next-line no-control-regex, unicorn/no-hex-escape\n  /[\\x01-\\t\\v\\f\\x0E-\\x1F\\x7F\\x81\\x8D\\x8F\\x90\\x9D\\xA0-\\uFFFF]/g\nconst regexEscapeRegex = /[|\\\\{}()[\\]^$+*?.]/g\n\n/** @type {WeakMap<ReadonlyArray<string>, RegExp>} */\nconst subsetToRegexCache = new WeakMap()\n\n/**\n * Encode certain characters in `value`.\n *\n * @param {string} value\n * @param {CoreWithFormatOptions} options\n * @returns {string}\n */\nexport function core(value, options) {\n  value = value.replace(\n    options.subset\n      ? charactersToExpressionCached(options.subset)\n      : defaultSubsetRegex,\n    basic\n  )\n\n  if (options.subset || options.escapeOnly) {\n    return value\n  }\n\n  return (\n    value\n      // Surrogate pairs.\n      .replace(surrogatePairsRegex, surrogate)\n      // BMP control characters (C0 except for LF, CR, SP; DEL; and some more\n      // non-ASCII ones).\n      .replace(controlCharactersRegex, basic)\n  )\n\n  /**\n   * @param {string} pair\n   * @param {number} index\n   * @param {string} all\n   */\n  function surrogate(pair, index, all) {\n    return options.format(\n      (pair.charCodeAt(0) - 0xd800) * 0x400 +\n        pair.charCodeAt(1) -\n        0xdc00 +\n        0x10000,\n      all.charCodeAt(index + 2),\n      options\n    )\n  }\n\n  /**\n   * @param {string} character\n   * @param {number} index\n   * @param {string} all\n   */\n  function basic(character, index, all) {\n    return options.format(\n      character.charCodeAt(0),\n      all.charCodeAt(index + 1),\n      options\n    )\n  }\n}\n\n/**\n * A wrapper function that caches the result of `charactersToExpression` with a WeakMap.\n * This can improve performance when tooling calls `charactersToExpression` repeatedly\n * with the same subset.\n *\n * @param {ReadonlyArray<string>} subset\n * @returns {RegExp}\n */\nfunction charactersToExpressionCached(subset) {\n  let cached = subsetToRegexCache.get(subset)\n\n  if (!cached) {\n    cached = charactersToExpression(subset)\n    subsetToRegexCache.set(subset, cached)\n  }\n\n  return cached\n}\n\n/**\n * @param {ReadonlyArray<string>} subset\n * @returns {RegExp}\n */\nfunction charactersToExpression(subset) {\n  /** @type {Array<string>} */\n  const groups = []\n  let index = -1\n\n  while (++index < subset.length) {\n    groups.push(subset[index].replace(regexEscapeRegex, '\\\\$&'))\n  }\n\n  return new RegExp('(?:' + groups.join('|') + ')', 'g')\n}\n","const hexadecimalRegex = /[\\dA-Fa-f]/\n\n/**\n * Configurable ways to encode characters as hexadecimal references.\n *\n * @param {number} code\n * @param {number} next\n * @param {boolean|undefined} omit\n * @returns {string}\n */\nexport function toHexadecimal(code, next, omit) {\n  const value = '&#x' + code.toString(16).toUpperCase()\n  return omit && next && !hexadecimalRegex.test(String.fromCharCode(next))\n    ? value\n    : value + ';'\n}\n","const decimalRegex = /\\d/\n\n/**\n * Configurable ways to encode characters as decimal references.\n *\n * @param {number} code\n * @param {number} next\n * @param {boolean|undefined} omit\n * @returns {string}\n */\nexport function toDecimal(code, next, omit) {\n  const value = '&#' + String(code)\n  return omit && next && !decimalRegex.test(String.fromCharCode(next))\n    ? value\n    : value + ';'\n}\n","/**\n * List of legacy HTML named character references that don’t need a trailing semicolon.\n *\n * @type {Array<string>}\n */\nexport const characterEntitiesLegacy = [\n  'AElig',\n  'AMP',\n  'Aacute',\n  'Acirc',\n  'Agrave',\n  'Aring',\n  'Atilde',\n  'Auml',\n  'COPY',\n  'Ccedil',\n  'ETH',\n  'Eacute',\n  'Ecirc',\n  'Egrave',\n  'Euml',\n  'GT',\n  'Iacute',\n  'Icirc',\n  'Igrave',\n  'Iuml',\n  'LT',\n  'Ntilde',\n  'Oacute',\n  'Ocirc',\n  'Ograve',\n  'Oslash',\n  'Otilde',\n  'Ouml',\n  'QUOT',\n  'REG',\n  'THORN',\n  'Uacute',\n  'Ucirc',\n  'Ugrave',\n  'Uuml',\n  'Yacute',\n  'aacute',\n  'acirc',\n  'acute',\n  'aelig',\n  'agrave',\n  'amp',\n  'aring',\n  'atilde',\n  'auml',\n  'brvbar',\n  'ccedil',\n  'cedil',\n  'cent',\n  'copy',\n  'curren',\n  'deg',\n  'divide',\n  'eacute',\n  'ecirc',\n  'egrave',\n  'eth',\n  'euml',\n  'frac12',\n  'frac14',\n  'frac34',\n  'gt',\n  'iacute',\n  'icirc',\n  'iexcl',\n  'igrave',\n  'iquest',\n  'iuml',\n  'laquo',\n  'lt',\n  'macr',\n  'micro',\n  'middot',\n  'nbsp',\n  'not',\n  'ntilde',\n  'oacute',\n  'ocirc',\n  'ograve',\n  'ordf',\n  'ordm',\n  'oslash',\n  'otilde',\n  'ouml',\n  'para',\n  'plusmn',\n  'pound',\n  'quot',\n  'raquo',\n  'reg',\n  'sect',\n  'shy',\n  'sup1',\n  'sup2',\n  'sup3',\n  'szlig',\n  'thorn',\n  'times',\n  'uacute',\n  'ucirc',\n  'ugrave',\n  'uml',\n  'uuml',\n  'yacute',\n  'yen',\n  'yuml'\n]\n","/**\n * Map of named character references from HTML 4.\n *\n * @type {Record<string, string>}\n */\nexport const characterEntitiesHtml4 = {\n  nbsp: ' ',\n  iexcl: '¡',\n  cent: '¢',\n  pound: '£',\n  curren: '¤',\n  yen: '¥',\n  brvbar: '¦',\n  sect: '§',\n  uml: '¨',\n  copy: '©',\n  ordf: 'ª',\n  laquo: '«',\n  not: '¬',\n  shy: '­',\n  reg: '®',\n  macr: '¯',\n  deg: '°',\n  plusmn: '±',\n  sup2: '²',\n  sup3: '³',\n  acute: '´',\n  micro: 'µ',\n  para: '¶',\n  middot: '·',\n  cedil: '¸',\n  sup1: '¹',\n  ordm: 'º',\n  raquo: '»',\n  frac14: '¼',\n  frac12: '½',\n  frac34: '¾',\n  iquest: '¿',\n  Agrave: 'À',\n  Aacute: 'Á',\n  Acirc: 'Â',\n  Atilde: 'Ã',\n  Auml: 'Ä',\n  Aring: 'Å',\n  AElig: 'Æ',\n  Ccedil: 'Ç',\n  Egrave: 'È',\n  Eacute: 'É',\n  Ecirc: 'Ê',\n  Euml: 'Ë',\n  Igrave: 'Ì',\n  Iacute: 'Í',\n  Icirc: 'Î',\n  Iuml: 'Ï',\n  ETH: 'Ð',\n  Ntilde: 'Ñ',\n  Ograve: 'Ò',\n  Oacute: 'Ó',\n  Ocirc: 'Ô',\n  Otilde: 'Õ',\n  Ouml: 'Ö',\n  times: '×',\n  Oslash: 'Ø',\n  Ugrave: 'Ù',\n  Uacute: 'Ú',\n  Ucirc: 'Û',\n  Uuml: 'Ü',\n  Yacute: 'Ý',\n  THORN: 'Þ',\n  szlig: 'ß',\n  agrave: 'à',\n  aacute: 'á',\n  acirc: 'â',\n  atilde: 'ã',\n  auml: 'ä',\n  aring: 'å',\n  aelig: 'æ',\n  ccedil: 'ç',\n  egrave: 'è',\n  eacute: 'é',\n  ecirc: 'ê',\n  euml: 'ë',\n  igrave: 'ì',\n  iacute: 'í',\n  icirc: 'î',\n  iuml: 'ï',\n  eth: 'ð',\n  ntilde: 'ñ',\n  ograve: 'ò',\n  oacute: 'ó',\n  ocirc: 'ô',\n  otilde: 'õ',\n  ouml: 'ö',\n  divide: '÷',\n  oslash: 'ø',\n  ugrave: 'ù',\n  uacute: 'ú',\n  ucirc: 'û',\n  uuml: 'ü',\n  yacute: 'ý',\n  thorn: 'þ',\n  yuml: 'ÿ',\n  fnof: 'ƒ',\n  Alpha: 'Α',\n  Beta: 'Β',\n  Gamma: 'Γ',\n  Delta: 'Δ',\n  Epsilon: 'Ε',\n  Zeta: 'Ζ',\n  Eta: 'Η',\n  Theta: 'Θ',\n  Iota: 'Ι',\n  Kappa: 'Κ',\n  Lambda: 'Λ',\n  Mu: 'Μ',\n  Nu: 'Ν',\n  Xi: 'Ξ',\n  Omicron: 'Ο',\n  Pi: 'Π',\n  Rho: 'Ρ',\n  Sigma: 'Σ',\n  Tau: 'Τ',\n  Upsilon: 'Υ',\n  Phi: 'Φ',\n  Chi: 'Χ',\n  Psi: 'Ψ',\n  Omega: 'Ω',\n  alpha: 'α',\n  beta: 'β',\n  gamma: 'γ',\n  delta: 'δ',\n  epsilon: 'ε',\n  zeta: 'ζ',\n  eta: 'η',\n  theta: 'θ',\n  iota: 'ι',\n  kappa: 'κ',\n  lambda: 'λ',\n  mu: 'μ',\n  nu: 'ν',\n  xi: 'ξ',\n  omicron: 'ο',\n  pi: 'π',\n  rho: 'ρ',\n  sigmaf: 'ς',\n  sigma: 'σ',\n  tau: 'τ',\n  upsilon: 'υ',\n  phi: 'φ',\n  chi: 'χ',\n  psi: 'ψ',\n  omega: 'ω',\n  thetasym: 'ϑ',\n  upsih: 'ϒ',\n  piv: 'ϖ',\n  bull: '•',\n  hellip: '…',\n  prime: '′',\n  Prime: '″',\n  oline: '‾',\n  frasl: '⁄',\n  weierp: '℘',\n  image: 'ℑ',\n  real: 'ℜ',\n  trade: '™',\n  alefsym: 'ℵ',\n  larr: '←',\n  uarr: '↑',\n  rarr: '→',\n  darr: '↓',\n  harr: '↔',\n  crarr: '↵',\n  lArr: '⇐',\n  uArr: '⇑',\n  rArr: '⇒',\n  dArr: '⇓',\n  hArr: '⇔',\n  forall: '∀',\n  part: '∂',\n  exist: '∃',\n  empty: '∅',\n  nabla: '∇',\n  isin: '∈',\n  notin: '∉',\n  ni: '∋',\n  prod: '∏',\n  sum: '∑',\n  minus: '−',\n  lowast: '∗',\n  radic: '√',\n  prop: '∝',\n  infin: '∞',\n  ang: '∠',\n  and: '∧',\n  or: '∨',\n  cap: '∩',\n  cup: '∪',\n  int: '∫',\n  there4: '∴',\n  sim: '∼',\n  cong: '≅',\n  asymp: '≈',\n  ne: '≠',\n  equiv: '≡',\n  le: '≤',\n  ge: '≥',\n  sub: '⊂',\n  sup: '⊃',\n  nsub: '⊄',\n  sube: '⊆',\n  supe: '⊇',\n  oplus: '⊕',\n  otimes: '⊗',\n  perp: '⊥',\n  sdot: '⋅',\n  lceil: '⌈',\n  rceil: '⌉',\n  lfloor: '⌊',\n  rfloor: '⌋',\n  lang: '〈',\n  rang: '〉',\n  loz: '◊',\n  spades: '♠',\n  clubs: '♣',\n  hearts: '♥',\n  diams: '♦',\n  quot: '\"',\n  amp: '&',\n  lt: '<',\n  gt: '>',\n  OElig: 'Œ',\n  oelig: 'œ',\n  Scaron: 'Š',\n  scaron: 'š',\n  Yuml: 'Ÿ',\n  circ: 'ˆ',\n  tilde: '˜',\n  ensp: ' ',\n  emsp: ' ',\n  thinsp: ' ',\n  zwnj: '‌',\n  zwj: '‍',\n  lrm: '‎',\n  rlm: '‏',\n  ndash: '–',\n  mdash: '—',\n  lsquo: '‘',\n  rsquo: '’',\n  sbquo: '‚',\n  ldquo: '“',\n  rdquo: '”',\n  bdquo: '„',\n  dagger: '†',\n  Dagger: '‡',\n  permil: '‰',\n  lsaquo: '‹',\n  rsaquo: '›',\n  euro: '€'\n}\n","/**\n * List of legacy (that don’t need a trailing `;`) named references which could,\n * depending on what follows them, turn into a different meaning\n *\n * @type {Array<string>}\n */\nexport const dangerous = [\n  'cent',\n  'copy',\n  'divide',\n  'gt',\n  'lt',\n  'not',\n  'para',\n  'times'\n]\n","import {characterEntitiesLegacy} from 'character-entities-legacy'\nimport {characterEntitiesHtml4} from 'character-entities-html4'\nimport {dangerous} from '../constant/dangerous.js'\n\nconst own = {}.hasOwnProperty\n\n/**\n * `characterEntitiesHtml4` but inverted.\n *\n * @type {Record<string, string>}\n */\nconst characters = {}\n\n/** @type {string} */\nlet key\n\nfor (key in characterEntitiesHtml4) {\n  if (own.call(characterEntitiesHtml4, key)) {\n    characters[characterEntitiesHtml4[key]] = key\n  }\n}\n\nconst notAlphanumericRegex = /[^\\dA-Za-z]/\n\n/**\n * Configurable ways to encode characters as named references.\n *\n * @param {number} code\n * @param {number} next\n * @param {boolean|undefined} omit\n * @param {boolean|undefined} attribute\n * @returns {string}\n */\nexport function toNamed(code, next, omit, attribute) {\n  const character = String.fromCharCode(code)\n\n  if (own.call(characters, character)) {\n    const name = characters[character]\n    const value = '&' + name\n\n    if (\n      omit &&\n      characterEntitiesLegacy.includes(name) &&\n      !dangerous.includes(name) &&\n      (!attribute ||\n        (next &&\n          next !== 61 /* `=` */ &&\n          notAlphanumericRegex.test(String.fromCharCode(next))))\n    ) {\n      return value\n    }\n\n    return value + ';'\n  }\n\n  return ''\n}\n","/**\n * @typedef FormatSmartOptions\n * @property {boolean} [useNamedReferences=false]\n *   Prefer named character references (`&amp;`) where possible.\n * @property {boolean} [useShortestReferences=false]\n *   Prefer the shortest possible reference, if that results in less bytes.\n *   **Note**: `useNamedReferences` can be omitted when using `useShortestReferences`.\n * @property {boolean} [omitOptionalSemicolons=false]\n *   Whether to omit semicolons when possible.\n *   **Note**: This creates what HTML calls “parse errors” but is otherwise still valid HTML — don’t use this except when building a minifier.\n *   Omitting semicolons is possible for certain named and numeric references in some cases.\n * @property {boolean} [attribute=false]\n *   Create character references which don’t fail in attributes.\n *   **Note**: `attribute` only applies when operating dangerously with\n *   `omitOptionalSemicolons: true`.\n */\n\nimport {toHexadecimal} from './to-hexadecimal.js'\nimport {toDecimal} from './to-decimal.js'\nimport {toNamed} from './to-named.js'\n\n/**\n * Configurable ways to encode a character yielding pretty or small results.\n *\n * @param {number} code\n * @param {number} next\n * @param {FormatSmartOptions} options\n * @returns {string}\n */\nexport function formatSmart(code, next, options) {\n  let numeric = toHexadecimal(code, next, options.omitOptionalSemicolons)\n  /** @type {string|undefined} */\n  let named\n\n  if (options.useNamedReferences || options.useShortestReferences) {\n    named = toNamed(\n      code,\n      next,\n      options.omitOptionalSemicolons,\n      options.attribute\n    )\n  }\n\n  // Use the shortest numeric reference when requested.\n  // A simple algorithm would use decimal for all code points under 100, as\n  // those are shorter than hexadecimal:\n  //\n  // * `&#99;` vs `&#x63;` (decimal shorter)\n  // * `&#100;` vs `&#x64;` (equal)\n  //\n  // However, because we take `next` into consideration when `omit` is used,\n  // And it would be possible that decimals are shorter on bigger values as\n  // well if `next` is hexadecimal but not decimal, we instead compare both.\n  if (\n    (options.useShortestReferences || !named) &&\n    options.useShortestReferences\n  ) {\n    const decimal = toDecimal(code, next, options.omitOptionalSemicolons)\n\n    if (decimal.length < numeric.length) {\n      numeric = decimal\n    }\n  }\n\n  return named &&\n    (!options.useShortestReferences || named.length < numeric.length)\n    ? named\n    : numeric\n}\n","/**\n * The smallest way to encode a character.\n *\n * @param {number} code\n * @returns {string}\n */\nexport function formatBasic(code) {\n  return '&#x' + code.toString(16).toUpperCase() + ';'\n}\n","/**\n * @typedef {import('./core.js').CoreOptions & import('./util/format-smart.js').FormatSmartOptions} Options\n * @typedef {import('./core.js').CoreOptions} LightOptions\n */\n\nimport {core} from './core.js'\nimport {formatSmart} from './util/format-smart.js'\nimport {formatBasic} from './util/format-basic.js'\n\n/**\n * Encode special characters in `value`.\n *\n * @param {string} value\n *   Value to encode.\n * @param {Options} [options]\n *   Configuration.\n * @returns {string}\n *   Encoded value.\n */\nexport function stringifyEntities(value, options) {\n  return core(value, Object.assign({format: formatSmart}, options))\n}\n\n/**\n * Encode special characters in `value` as hexadecimals.\n *\n * @param {string} value\n *   Value to encode.\n * @param {LightOptions} [options]\n *   Configuration.\n * @returns {string}\n *   Encoded value.\n */\nexport function stringifyEntitiesLight(value, options) {\n  return core(value, Object.assign({format: formatBasic}, options))\n}\n","/**\n * @import {Comment, Parents} from 'hast'\n * @import {State} from '../index.js'\n */\n\nimport {stringifyEntities} from 'stringify-entities'\n\nconst htmlCommentRegex = /^>|^->|<!--|-->|--!>|<!-$/g\n\n// Declare arrays as variables so it can be cached by `stringifyEntities`\nconst bogusCommentEntitySubset = ['>']\nconst commentEntitySubset = ['<', '>']\n\n/**\n * Serialize a comment.\n *\n * @param {Comment} node\n *   Node to handle.\n * @param {number | undefined} _1\n *   Index of `node` in `parent.\n * @param {Parents | undefined} _2\n *   Parent of `node`.\n * @param {State} state\n *   Info passed around about the current state.\n * @returns {string}\n *   Serialized node.\n */\nexport function comment(node, _1, _2, state) {\n  // See: <https://html.spec.whatwg.org/multipage/syntax.html#comments>\n  return state.settings.bogusComments\n    ? '<?' +\n        stringifyEntities(\n          node.value,\n          Object.assign({}, state.settings.characterReferences, {\n            subset: bogusCommentEntitySubset\n          })\n        ) +\n        '>'\n    : '<!--' + node.value.replace(htmlCommentRegex, encode) + '-->'\n\n  /**\n   * @param {string} $0\n   */\n  function encode($0) {\n    return stringifyEntities(\n      $0,\n      Object.assign({}, state.settings.characterReferences, {\n        subset: commentEntitySubset\n      })\n    )\n  }\n}\n","/**\n * @import {Doctype, Parents} from 'hast'\n * @import {State} from '../index.js'\n */\n\n/**\n * Serialize a doctype.\n *\n * @param {Doctype} _1\n *   Node to handle.\n * @param {number | undefined} _2\n *   Index of `node` in `parent.\n * @param {Parents | undefined} _3\n *   Parent of `node`.\n * @param {State} state\n *   Info passed around about the current state.\n * @returns {string}\n *   Serialized node.\n */\nexport function doctype(_1, _2, _3, state) {\n  return (\n    '<!' +\n    (state.settings.upperDoctype ? 'DOCTYPE' : 'doctype') +\n    (state.settings.tightDoctype ? '' : ' ') +\n    'html>'\n  )\n}\n","/**\n * @typedef Options\n *   Configuration for `stringify`.\n * @property {boolean} [padLeft=true]\n *   Whether to pad a space before a token.\n * @property {boolean} [padRight=false]\n *   Whether to pad a space after a token.\n */\n\n/**\n * @typedef {Options} StringifyOptions\n *   Please use `StringifyOptions` instead.\n */\n\n/**\n * Parse comma-separated tokens to an array.\n *\n * @param {string} value\n *   Comma-separated tokens.\n * @returns {Array<string>}\n *   List of tokens.\n */\nexport function parse(value) {\n  /** @type {Array<string>} */\n  const tokens = []\n  const input = String(value || '')\n  let index = input.indexOf(',')\n  let start = 0\n  /** @type {boolean} */\n  let end = false\n\n  while (!end) {\n    if (index === -1) {\n      index = input.length\n      end = true\n    }\n\n    const token = input.slice(start, index).trim()\n\n    if (token || !end) {\n      tokens.push(token)\n    }\n\n    start = index + 1\n    index = input.indexOf(',', start)\n  }\n\n  return tokens\n}\n\n/**\n * Serialize an array of strings or numbers to comma-separated tokens.\n *\n * @param {Array<string|number>} values\n *   List of tokens.\n * @param {Options} [options]\n *   Configuration for `stringify` (optional).\n * @returns {string}\n *   Comma-separated tokens.\n */\nexport function stringify(values, options) {\n  const settings = options || {}\n\n  // Ensure the last empty entry is seen.\n  const input = values[values.length - 1] === '' ? [...values, ''] : values\n\n  return input\n    .join(\n      (settings.padRight ? ' ' : '') +\n        ',' +\n        (settings.padLeft === false ? '' : ' ')\n    )\n    .trim()\n}\n","/**\n * @import {Schema} from 'property-information'\n */\n\nimport {DefinedInfo} from './util/defined-info.js'\nimport {Info} from './util/info.js'\nimport {normalize} from './normalize.js'\n\nconst cap = /[A-Z]/g\nconst dash = /-[a-z]/g\nconst valid = /^data[-\\w.:]+$/i\n\n/**\n * Look up info on a property.\n *\n * In most cases the given `schema` contains info on the property.\n * All standard,\n * most legacy,\n * and some non-standard properties are supported.\n * For these cases,\n * the returned `Info` has hints about the value of the property.\n *\n * `name` can also be a valid data attribute or property,\n * in which case an `Info` object with the correctly cased `attribute` and\n * `property` is returned.\n *\n * `name` can be an unknown attribute,\n * in which case an `Info` object with `attribute` and `property` set to the\n * given name is returned.\n * It is not recommended to provide unsupported legacy or recently specced\n * properties.\n *\n *\n * @param {Schema} schema\n *   Schema;\n *   either the `html` or `svg` export.\n * @param {string} value\n *   An attribute-like or property-like name;\n *   it will be passed through `normalize` to hopefully find the correct info.\n * @returns {Info}\n *   Info.\n */\nexport function find(schema, value) {\n  const normal = normalize(value)\n  let property = value\n  let Type = Info\n\n  if (normal in schema.normal) {\n    return schema.property[schema.normal[normal]]\n  }\n\n  if (normal.length > 4 && normal.slice(0, 4) === 'data' && valid.test(value)) {\n    // Attribute or property.\n    if (value.charAt(4) === '-') {\n      // Turn it into a property.\n      const rest = value.slice(5).replace(dash, camelcase)\n      property = 'data' + rest.charAt(0).toUpperCase() + rest.slice(1)\n    } else {\n      // Turn it into an attribute.\n      const rest = value.slice(4)\n\n      if (!dash.test(rest)) {\n        let dashes = rest.replace(cap, kebab)\n\n        if (dashes.charAt(0) !== '-') {\n          dashes = '-' + dashes\n        }\n\n        value = 'data' + dashes\n      }\n    }\n\n    Type = DefinedInfo\n  }\n\n  return new Type(property, value)\n}\n\n/**\n * @param {string} $0\n *   Value.\n * @returns {string}\n *   Kebab.\n */\nfunction kebab($0) {\n  return '-' + $0.toLowerCase()\n}\n\n/**\n * @param {string} $0\n *   Value.\n * @returns {string}\n *   Camel.\n */\nfunction camelcase($0) {\n  return $0.charAt(1).toUpperCase()\n}\n","/**\n * Parse space-separated tokens to an array of strings.\n *\n * @param {string} value\n *   Space-separated tokens.\n * @returns {Array<string>}\n *   List of tokens.\n */\nexport function parse(value) {\n  const input = String(value || '').trim()\n  return input ? input.split(/[ \\t\\n\\r\\f]+/g) : []\n}\n\n/**\n * Serialize an array of strings as space separated-tokens.\n *\n * @param {Array<string|number>} values\n *   List of tokens.\n * @returns {string}\n *   Space-separated tokens.\n */\nexport function stringify(values) {\n  return values.join(' ').trim()\n}\n","/**\n * @typedef {import('hast').Nodes} Nodes\n */\n\n// HTML whitespace expression.\n// See <https://infra.spec.whatwg.org/#ascii-whitespace>.\nconst re = /[ \\t\\n\\f\\r]/g\n\n/**\n * Check if the given value is *inter-element whitespace*.\n *\n * @param {Nodes | string} thing\n *   Thing to check (`Node` or `string`).\n * @returns {boolean}\n *   Whether the `value` is inter-element whitespace (`boolean`): consisting of\n *   zero or more of space, tab (`\\t`), line feed (`\\n`), carriage return\n *   (`\\r`), or form feed (`\\f`); if a node is passed it must be a `Text` node,\n *   whose `value` field is checked.\n */\nexport function whitespace(thing) {\n  return typeof thing === 'object'\n    ? thing.type === 'text'\n      ? empty(thing.value)\n      : false\n    : empty(thing)\n}\n\n/**\n * @param {string} value\n * @returns {boolean}\n */\nfunction empty(value) {\n  return value.replace(re, '') === ''\n}\n","/**\n * @import {Parents, RootContent} from 'hast'\n */\n\nimport {whitespace} from 'hast-util-whitespace'\n\nexport const siblingAfter = siblings(1)\nexport const siblingBefore = siblings(-1)\n\n/** @type {Array<RootContent>} */\nconst emptyChildren = []\n\n/**\n * Factory to check siblings in a direction.\n *\n * @param {number} increment\n */\nfunction siblings(increment) {\n  return sibling\n\n  /**\n   * Find applicable siblings in a direction.\n   *\n   * @template {Parents} Parent\n   *   Parent type.\n   * @param {Parent | undefined} parent\n   *   Parent.\n   * @param {number | undefined} index\n   *   Index of child in `parent`.\n   * @param {boolean | undefined} [includeWhitespace=false]\n   *   Whether to include whitespace (default: `false`).\n   * @returns {Parent extends {children: Array<infer Child>} ? Child | undefined : never}\n   *   Child of parent.\n   */\n  function sibling(parent, index, includeWhitespace) {\n    const siblings = parent ? parent.children : emptyChildren\n    let offset = (index || 0) + increment\n    let next = siblings[offset]\n\n    if (!includeWhitespace) {\n      while (next && whitespace(next)) {\n        offset += increment\n        next = siblings[offset]\n      }\n    }\n\n    // @ts-expect-error: it’s a correct child.\n    return next\n  }\n}\n","/**\n * @import {Element, Parents} from 'hast'\n */\n\n/**\n * @callback OmitHandle\n *   Check if a tag can be omitted.\n * @param {Element} element\n *   Element to check.\n * @param {number | undefined} index\n *   Index of element in parent.\n * @param {Parents | undefined} parent\n *   Parent of element.\n * @returns {boolean}\n *   Whether to omit a tag.\n *\n */\n\nconst own = {}.hasOwnProperty\n\n/**\n * Factory to check if a given node can have a tag omitted.\n *\n * @param {Record<string, OmitHandle>} handlers\n *   Omission handlers, where each key is a tag name, and each value is the\n *   corresponding handler.\n * @returns {OmitHandle}\n *   Whether to omit a tag of an element.\n */\nexport function omission(handlers) {\n  return omit\n\n  /**\n   * Check if a given node can have a tag omitted.\n   *\n   * @type {OmitHandle}\n   */\n  function omit(node, index, parent) {\n    return (\n      own.call(handlers, node.tagName) &&\n      handlers[node.tagName](node, index, parent)\n    )\n  }\n}\n","/**\n * @import {Element, Parents} from 'hast'\n */\n\nimport {whitespace} from 'hast-util-whitespace'\nimport {siblingAfter} from './util/siblings.js'\nimport {omission} from './omission.js'\n\nexport const closing = omission({\n  body,\n  caption: headOrColgroupOrCaption,\n  colgroup: headOrColgroupOrCaption,\n  dd,\n  dt,\n  head: headOrColgroupOrCaption,\n  html,\n  li,\n  optgroup,\n  option,\n  p,\n  rp: rubyElement,\n  rt: rubyElement,\n  tbody,\n  td: cells,\n  tfoot,\n  th: cells,\n  thead,\n  tr\n})\n\n/**\n * Macro for `</head>`, `</colgroup>`, and `</caption>`.\n *\n * @param {Element} _\n *   Element.\n * @param {number | undefined} index\n *   Index of element in parent.\n * @param {Parents | undefined} parent\n *   Parent of element.\n * @returns {boolean}\n *   Whether the closing tag can be omitted.\n */\nfunction headOrColgroupOrCaption(_, index, parent) {\n  const next = siblingAfter(parent, index, true)\n  return (\n    !next ||\n    (next.type !== 'comment' &&\n      !(next.type === 'text' && whitespace(next.value.charAt(0))))\n  )\n}\n\n/**\n * Whether to omit `</html>`.\n *\n * @param {Element} _\n *   Element.\n * @param {number | undefined} index\n *   Index of element in parent.\n * @param {Parents | undefined} parent\n *   Parent of element.\n * @returns {boolean}\n *   Whether the closing tag can be omitted.\n */\nfunction html(_, index, parent) {\n  const next = siblingAfter(parent, index)\n  return !next || next.type !== 'comment'\n}\n\n/**\n * Whether to omit `</body>`.\n *\n * @param {Element} _\n *   Element.\n * @param {number | undefined} index\n *   Index of element in parent.\n * @param {Parents | undefined} parent\n *   Parent of element.\n * @returns {boolean}\n *   Whether the closing tag can be omitted.\n */\nfunction body(_, index, parent) {\n  const next = siblingAfter(parent, index)\n  return !next || next.type !== 'comment'\n}\n\n/**\n * Whether to omit `</p>`.\n *\n * @param {Element} _\n *   Element.\n * @param {number | undefined} index\n *   Index of element in parent.\n * @param {Parents | undefined} parent\n *   Parent of element.\n * @returns {boolean}\n *   Whether the closing tag can be omitted.\n */\nfunction p(_, index, parent) {\n  const next = siblingAfter(parent, index)\n  return next\n    ? next.type === 'element' &&\n        (next.tagName === 'address' ||\n          next.tagName === 'article' ||\n          next.tagName === 'aside' ||\n          next.tagName === 'blockquote' ||\n          next.tagName === 'details' ||\n          next.tagName === 'div' ||\n          next.tagName === 'dl' ||\n          next.tagName === 'fieldset' ||\n          next.tagName === 'figcaption' ||\n          next.tagName === 'figure' ||\n          next.tagName === 'footer' ||\n          next.tagName === 'form' ||\n          next.tagName === 'h1' ||\n          next.tagName === 'h2' ||\n          next.tagName === 'h3' ||\n          next.tagName === 'h4' ||\n          next.tagName === 'h5' ||\n          next.tagName === 'h6' ||\n          next.tagName === 'header' ||\n          next.tagName === 'hgroup' ||\n          next.tagName === 'hr' ||\n          next.tagName === 'main' ||\n          next.tagName === 'menu' ||\n          next.tagName === 'nav' ||\n          next.tagName === 'ol' ||\n          next.tagName === 'p' ||\n          next.tagName === 'pre' ||\n          next.tagName === 'section' ||\n          next.tagName === 'table' ||\n          next.tagName === 'ul')\n    : !parent ||\n        // Confusing parent.\n        !(\n          parent.type === 'element' &&\n          (parent.tagName === 'a' ||\n            parent.tagName === 'audio' ||\n            parent.tagName === 'del' ||\n            parent.tagName === 'ins' ||\n            parent.tagName === 'map' ||\n            parent.tagName === 'noscript' ||\n            parent.tagName === 'video')\n        )\n}\n\n/**\n * Whether to omit `</li>`.\n *\n * @param {Element} _\n *   Element.\n * @param {number | undefined} index\n *   Index of element in parent.\n * @param {Parents | undefined} parent\n *   Parent of element.\n * @returns {boolean}\n *   Whether the closing tag can be omitted.\n */\nfunction li(_, index, parent) {\n  const next = siblingAfter(parent, index)\n  return !next || (next.type === 'element' && next.tagName === 'li')\n}\n\n/**\n * Whether to omit `</dt>`.\n *\n * @param {Element} _\n *   Element.\n * @param {number | undefined} index\n *   Index of element in parent.\n * @param {Parents | undefined} parent\n *   Parent of element.\n * @returns {boolean}\n *   Whether the closing tag can be omitted.\n */\nfunction dt(_, index, parent) {\n  const next = siblingAfter(parent, index)\n  return Boolean(\n    next &&\n      next.type === 'element' &&\n      (next.tagName === 'dt' || next.tagName === 'dd')\n  )\n}\n\n/**\n * Whether to omit `</dd>`.\n *\n * @param {Element} _\n *   Element.\n * @param {number | undefined} index\n *   Index of element in parent.\n * @param {Parents | undefined} parent\n *   Parent of element.\n * @returns {boolean}\n *   Whether the closing tag can be omitted.\n */\nfunction dd(_, index, parent) {\n  const next = siblingAfter(parent, index)\n  return (\n    !next ||\n    (next.type === 'element' &&\n      (next.tagName === 'dt' || next.tagName === 'dd'))\n  )\n}\n\n/**\n * Whether to omit `</rt>` or `</rp>`.\n *\n * @param {Element} _\n *   Element.\n * @param {number | undefined} index\n *   Index of element in parent.\n * @param {Parents | undefined} parent\n *   Parent of element.\n * @returns {boolean}\n *   Whether the closing tag can be omitted.\n */\nfunction rubyElement(_, index, parent) {\n  const next = siblingAfter(parent, index)\n  return (\n    !next ||\n    (next.type === 'element' &&\n      (next.tagName === 'rp' || next.tagName === 'rt'))\n  )\n}\n\n/**\n * Whether to omit `</optgroup>`.\n *\n * @param {Element} _\n *   Element.\n * @param {number | undefined} index\n *   Index of element in parent.\n * @param {Parents | undefined} parent\n *   Parent of element.\n * @returns {boolean}\n *   Whether the closing tag can be omitted.\n */\nfunction optgroup(_, index, parent) {\n  const next = siblingAfter(parent, index)\n  return !next || (next.type === 'element' && next.tagName === 'optgroup')\n}\n\n/**\n * Whether to omit `</option>`.\n *\n * @param {Element} _\n *   Element.\n * @param {number | undefined} index\n *   Index of element in parent.\n * @param {Parents | undefined} parent\n *   Parent of element.\n * @returns {boolean}\n *   Whether the closing tag can be omitted.\n */\nfunction option(_, index, parent) {\n  const next = siblingAfter(parent, index)\n  return (\n    !next ||\n    (next.type === 'element' &&\n      (next.tagName === 'option' || next.tagName === 'optgroup'))\n  )\n}\n\n/**\n * Whether to omit `</thead>`.\n *\n * @param {Element} _\n *   Element.\n * @param {number | undefined} index\n *   Index of element in parent.\n * @param {Parents | undefined} parent\n *   Parent of element.\n * @returns {boolean}\n *   Whether the closing tag can be omitted.\n */\nfunction thead(_, index, parent) {\n  const next = siblingAfter(parent, index)\n  return Boolean(\n    next &&\n      next.type === 'element' &&\n      (next.tagName === 'tbody' || next.tagName === 'tfoot')\n  )\n}\n\n/**\n * Whether to omit `</tbody>`.\n *\n * @param {Element} _\n *   Element.\n * @param {number | undefined} index\n *   Index of element in parent.\n * @param {Parents | undefined} parent\n *   Parent of element.\n * @returns {boolean}\n *   Whether the closing tag can be omitted.\n */\nfunction tbody(_, index, parent) {\n  const next = siblingAfter(parent, index)\n  return (\n    !next ||\n    (next.type === 'element' &&\n      (next.tagName === 'tbody' || next.tagName === 'tfoot'))\n  )\n}\n\n/**\n * Whether to omit `</tfoot>`.\n *\n * @param {Element} _\n *   Element.\n * @param {number | undefined} index\n *   Index of element in parent.\n * @param {Parents | undefined} parent\n *   Parent of element.\n * @returns {boolean}\n *   Whether the closing tag can be omitted.\n */\nfunction tfoot(_, index, parent) {\n  return !siblingAfter(parent, index)\n}\n\n/**\n * Whether to omit `</tr>`.\n *\n * @param {Element} _\n *   Element.\n * @param {number | undefined} index\n *   Index of element in parent.\n * @param {Parents | undefined} parent\n *   Parent of element.\n * @returns {boolean}\n *   Whether the closing tag can be omitted.\n */\nfunction tr(_, index, parent) {\n  const next = siblingAfter(parent, index)\n  return !next || (next.type === 'element' && next.tagName === 'tr')\n}\n\n/**\n * Whether to omit `</td>` or `</th>`.\n *\n * @param {Element} _\n *   Element.\n * @param {number | undefined} index\n *   Index of element in parent.\n * @param {Parents | undefined} parent\n *   Parent of element.\n * @returns {boolean}\n *   Whether the closing tag can be omitted.\n */\nfunction cells(_, index, parent) {\n  const next = siblingAfter(parent, index)\n  return (\n    !next ||\n    (next.type === 'element' &&\n      (next.tagName === 'td' || next.tagName === 'th'))\n  )\n}\n","/**\n * @import {Element, Parents} from 'hast'\n */\n\nimport {whitespace} from 'hast-util-whitespace'\nimport {siblingAfter, siblingBefore} from './util/siblings.js'\nimport {closing} from './closing.js'\nimport {omission} from './omission.js'\n\nexport const opening = omission({\n  body,\n  colgroup,\n  head,\n  html,\n  tbody\n})\n\n/**\n * Whether to omit `<html>`.\n *\n * @param {Element} node\n *   Element.\n * @returns {boolean}\n *   Whether the opening tag can be omitted.\n */\nfunction html(node) {\n  const head = siblingAfter(node, -1)\n  return !head || head.type !== 'comment'\n}\n\n/**\n * Whether to omit `<head>`.\n *\n * @param {Element} node\n *   Element.\n * @returns {boolean}\n *   Whether the opening tag can be omitted.\n */\nfunction head(node) {\n  /** @type {Set<string>} */\n  const seen = new Set()\n\n  // Whether `srcdoc` or not,\n  // make sure the content model at least doesn’t have too many `base`s/`title`s.\n  for (const child of node.children) {\n    if (\n      child.type === 'element' &&\n      (child.tagName === 'base' || child.tagName === 'title')\n    ) {\n      if (seen.has(child.tagName)) return false\n      seen.add(child.tagName)\n    }\n  }\n\n  // “May be omitted if the element is empty,\n  // or if the first thing inside the head element is an element.”\n  const child = node.children[0]\n  return !child || child.type === 'element'\n}\n\n/**\n * Whether to omit `<body>`.\n *\n * @param {Element} node\n *   Element.\n * @returns {boolean}\n *   Whether the opening tag can be omitted.\n */\nfunction body(node) {\n  const head = siblingAfter(node, -1, true)\n\n  return (\n    !head ||\n    (head.type !== 'comment' &&\n      !(head.type === 'text' && whitespace(head.value.charAt(0))) &&\n      !(\n        head.type === 'element' &&\n        (head.tagName === 'meta' ||\n          head.tagName === 'link' ||\n          head.tagName === 'script' ||\n          head.tagName === 'style' ||\n          head.tagName === 'template')\n      ))\n  )\n}\n\n/**\n * Whether to omit `<colgroup>`.\n * The spec describes some logic for the opening tag, but it’s easier to\n * implement in the closing tag, to the same effect, so we handle it there\n * instead.\n *\n * @param {Element} node\n *   Element.\n * @param {number | undefined} index\n *   Index of element in parent.\n * @param {Parents | undefined} parent\n *   Parent of element.\n * @returns {boolean}\n *   Whether the opening tag can be omitted.\n */\nfunction colgroup(node, index, parent) {\n  const previous = siblingBefore(parent, index)\n  const head = siblingAfter(node, -1, true)\n\n  // Previous colgroup was already omitted.\n  if (\n    parent &&\n    previous &&\n    previous.type === 'element' &&\n    previous.tagName === 'colgroup' &&\n    closing(previous, parent.children.indexOf(previous), parent)\n  ) {\n    return false\n  }\n\n  return Boolean(head && head.type === 'element' && head.tagName === 'col')\n}\n\n/**\n * Whether to omit `<tbody>`.\n *\n * @param {Element} node\n *   Element.\n * @param {number | undefined} index\n *   Index of element in parent.\n * @param {Parents | undefined} parent\n *   Parent of element.\n * @returns {boolean}\n *   Whether the opening tag can be omitted.\n */\nfunction tbody(node, index, parent) {\n  const previous = siblingBefore(parent, index)\n  const head = siblingAfter(node, -1)\n\n  // Previous table section was already omitted.\n  if (\n    parent &&\n    previous &&\n    previous.type === 'element' &&\n    (previous.tagName === 'thead' || previous.tagName === 'tbody') &&\n    closing(previous, parent.children.indexOf(previous), parent)\n  ) {\n    return false\n  }\n\n  return Boolean(head && head.type === 'element' && head.tagName === 'tr')\n}\n","/**\n * @import {Element, Parents, Properties} from 'hast'\n * @import {State} from '../index.js'\n */\n\nimport {ccount} from 'ccount'\nimport {stringify as commas} from 'comma-separated-tokens'\nimport {find, svg} from 'property-information'\nimport {stringify as spaces} from 'space-separated-tokens'\nimport {stringifyEntities} from 'stringify-entities'\nimport {closing} from '../omission/closing.js'\nimport {opening} from '../omission/opening.js'\n\n/**\n * Maps of subsets.\n *\n * Each value is a matrix of tuples.\n * The value at `0` causes parse errors, the value at `1` is valid.\n * Of both, the value at `0` is unsafe, and the value at `1` is safe.\n *\n * @type {Record<'double' | 'name' | 'single' | 'unquoted', Array<[Array<string>, Array<string>]>>}\n */\nconst constants = {\n  // See: <https://html.spec.whatwg.org/#attribute-name-state>.\n  name: [\n    ['\\t\\n\\f\\r &/=>'.split(''), '\\t\\n\\f\\r \"&\\'/=>`'.split('')],\n    ['\\0\\t\\n\\f\\r \"&\\'/<=>'.split(''), '\\0\\t\\n\\f\\r \"&\\'/<=>`'.split('')]\n  ],\n  // See: <https://html.spec.whatwg.org/#attribute-value-(unquoted)-state>.\n  unquoted: [\n    ['\\t\\n\\f\\r &>'.split(''), '\\0\\t\\n\\f\\r \"&\\'<=>`'.split('')],\n    ['\\0\\t\\n\\f\\r \"&\\'<=>`'.split(''), '\\0\\t\\n\\f\\r \"&\\'<=>`'.split('')]\n  ],\n  // See: <https://html.spec.whatwg.org/#attribute-value-(single-quoted)-state>.\n  single: [\n    [\"&'\".split(''), '\"&\\'`'.split('')],\n    [\"\\0&'\".split(''), '\\0\"&\\'`'.split('')]\n  ],\n  // See: <https://html.spec.whatwg.org/#attribute-value-(double-quoted)-state>.\n  double: [\n    ['\"&'.split(''), '\"&\\'`'.split('')],\n    ['\\0\"&'.split(''), '\\0\"&\\'`'.split('')]\n  ]\n}\n\n/**\n * Serialize an element node.\n *\n * @param {Element} node\n *   Node to handle.\n * @param {number | undefined} index\n *   Index of `node` in `parent.\n * @param {Parents | undefined} parent\n *   Parent of `node`.\n * @param {State} state\n *   Info passed around about the current state.\n * @returns {string}\n *   Serialized node.\n */\nexport function element(node, index, parent, state) {\n  const schema = state.schema\n  const omit = schema.space === 'svg' ? false : state.settings.omitOptionalTags\n  let selfClosing =\n    schema.space === 'svg'\n      ? state.settings.closeEmptyElements\n      : state.settings.voids.includes(node.tagName.toLowerCase())\n  /** @type {Array<string>} */\n  const parts = []\n  /** @type {string} */\n  let last\n\n  if (schema.space === 'html' && node.tagName === 'svg') {\n    state.schema = svg\n  }\n\n  const attributes = serializeAttributes(state, node.properties)\n\n  const content = state.all(\n    schema.space === 'html' && node.tagName === 'template' ? node.content : node\n  )\n\n  state.schema = schema\n\n  // If the node is categorised as void, but it has children, remove the\n  // categorisation.\n  // This enables for example `menuitem`s, which are void in W3C HTML but not\n  // void in WHATWG HTML, to be stringified properly.\n  // Note: `menuitem` has since been removed from the HTML spec, and so is no\n  // longer void.\n  if (content) selfClosing = false\n\n  if (attributes || !omit || !opening(node, index, parent)) {\n    parts.push('<', node.tagName, attributes ? ' ' + attributes : '')\n\n    if (\n      selfClosing &&\n      (schema.space === 'svg' || state.settings.closeSelfClosing)\n    ) {\n      last = attributes.charAt(attributes.length - 1)\n      if (\n        !state.settings.tightSelfClosing ||\n        last === '/' ||\n        (last && last !== '\"' && last !== \"'\")\n      ) {\n        parts.push(' ')\n      }\n\n      parts.push('/')\n    }\n\n    parts.push('>')\n  }\n\n  parts.push(content)\n\n  if (!selfClosing && (!omit || !closing(node, index, parent))) {\n    parts.push('</' + node.tagName + '>')\n  }\n\n  return parts.join('')\n}\n\n/**\n * @param {State} state\n * @param {Properties | null | undefined} properties\n * @returns {string}\n */\nfunction serializeAttributes(state, properties) {\n  /** @type {Array<string>} */\n  const values = []\n  let index = -1\n  /** @type {string} */\n  let key\n\n  if (properties) {\n    for (key in properties) {\n      if (properties[key] !== null && properties[key] !== undefined) {\n        const value = serializeAttribute(state, key, properties[key])\n        if (value) values.push(value)\n      }\n    }\n  }\n\n  while (++index < values.length) {\n    const last = state.settings.tightAttributes\n      ? values[index].charAt(values[index].length - 1)\n      : undefined\n\n    // In tight mode, don’t add a space after quoted attributes.\n    if (index !== values.length - 1 && last !== '\"' && last !== \"'\") {\n      values[index] += ' '\n    }\n  }\n\n  return values.join('')\n}\n\n/**\n * @param {State} state\n * @param {string} key\n * @param {Properties[keyof Properties]} value\n * @returns {string}\n */\nfunction serializeAttribute(state, key, value) {\n  const info = find(state.schema, key)\n  const x =\n    state.settings.allowParseErrors && state.schema.space === 'html' ? 0 : 1\n  const y = state.settings.allowDangerousCharacters ? 0 : 1\n  let quote = state.quote\n  /** @type {string | undefined} */\n  let result\n\n  if (info.overloadedBoolean && (value === info.attribute || value === '')) {\n    value = true\n  } else if (\n    (info.boolean || info.overloadedBoolean) &&\n    (typeof value !== 'string' || value === info.attribute || value === '')\n  ) {\n    value = Boolean(value)\n  }\n\n  if (\n    value === null ||\n    value === undefined ||\n    value === false ||\n    (typeof value === 'number' && Number.isNaN(value))\n  ) {\n    return ''\n  }\n\n  const name = stringifyEntities(\n    info.attribute,\n    Object.assign({}, state.settings.characterReferences, {\n      // Always encode without parse errors in non-HTML.\n      subset: constants.name[x][y]\n    })\n  )\n\n  // No value.\n  // There is currently only one boolean property in SVG: `[download]` on\n  // `<a>`.\n  // This property does not seem to work in browsers (Firefox, Safari, Chrome),\n  // so I can’t test if dropping the value works.\n  // But I assume that it should:\n  //\n  // ```html\n  // <!doctype html>\n  // <svg viewBox=\"0 0 100 100\">\n  //   <a href=https://example.com download>\n  //     <circle cx=50 cy=40 r=35 />\n  //   </a>\n  // </svg>\n  // ```\n  //\n  // See: <https://github.com/wooorm/property-information/blob/main/lib/svg.js>\n  if (value === true) return name\n\n  // `spaces` doesn’t accept a second argument, but it’s given here just to\n  // keep the code cleaner.\n  value = Array.isArray(value)\n    ? (info.commaSeparated ? commas : spaces)(value, {\n        padLeft: !state.settings.tightCommaSeparatedLists\n      })\n    : String(value)\n\n  if (state.settings.collapseEmptyAttributes && !value) return name\n\n  // Check unquoted value.\n  if (state.settings.preferUnquoted) {\n    result = stringifyEntities(\n      value,\n      Object.assign({}, state.settings.characterReferences, {\n        attribute: true,\n        subset: constants.unquoted[x][y]\n      })\n    )\n  }\n\n  // If we don’t want unquoted, or if `value` contains character references when\n  // unquoted…\n  if (result !== value) {\n    // If the alternative is less common than `quote`, switch.\n    if (\n      state.settings.quoteSmart &&\n      ccount(value, quote) > ccount(value, state.alternative)\n    ) {\n      quote = state.alternative\n    }\n\n    result =\n      quote +\n      stringifyEntities(\n        value,\n        Object.assign({}, state.settings.characterReferences, {\n          // Always encode without parse errors in non-HTML.\n          subset: (quote === \"'\" ? constants.single : constants.double)[x][y],\n          attribute: true\n        })\n      ) +\n      quote\n  }\n\n  // Don’t add a `=` for unquoted empties.\n  return name + (result ? '=' + result : result)\n}\n","/**\n * @import {Parents, Text} from 'hast'\n * @import {Raw} from 'mdast-util-to-hast'\n * @import {State} from '../index.js'\n */\n\nimport {stringifyEntities} from 'stringify-entities'\n\n// Declare array as variable so it can be cached by `stringifyEntities`\nconst textEntitySubset = ['<', '&']\n\n/**\n * Serialize a text node.\n *\n * @param {Raw | Text} node\n *   Node to handle.\n * @param {number | undefined} _\n *   Index of `node` in `parent.\n * @param {Parents | undefined} parent\n *   Parent of `node`.\n * @param {State} state\n *   Info passed around about the current state.\n * @returns {string}\n *   Serialized node.\n */\nexport function text(node, _, parent, state) {\n  // Check if content of `node` should be escaped.\n  return parent &&\n    parent.type === 'element' &&\n    (parent.tagName === 'script' || parent.tagName === 'style')\n    ? node.value\n    : stringifyEntities(\n        node.value,\n        Object.assign({}, state.settings.characterReferences, {\n          subset: textEntitySubset\n        })\n      )\n}\n","/**\n * @import {Parents} from 'hast'\n * @import {Raw} from 'mdast-util-to-hast'\n * @import {State} from '../index.js'\n */\n\nimport {text} from './text.js'\n\n/**\n * Serialize a raw node.\n *\n * @param {Raw} node\n *   Node to handle.\n * @param {number | undefined} index\n *   Index of `node` in `parent.\n * @param {Parents | undefined} parent\n *   Parent of `node`.\n * @param {State} state\n *   Info passed around about the current state.\n * @returns {string}\n *   Serialized node.\n */\nexport function raw(node, index, parent, state) {\n  return state.settings.allowDangerousHtml\n    ? node.value\n    : text(node, index, parent, state)\n}\n","/**\n * @import {Parents, Root} from 'hast'\n * @import {State} from '../index.js'\n */\n\n/**\n * Serialize a root.\n *\n * @param {Root} node\n *   Node to handle.\n * @param {number | undefined} _1\n *   Index of `node` in `parent.\n * @param {Parents | undefined} _2\n *   Parent of `node`.\n * @param {State} state\n *   Info passed around about the current state.\n * @returns {string}\n *   Serialized node.\n */\nexport function root(node, _1, _2, state) {\n  return state.all(node)\n}\n","/**\n * @import {Nodes, Parents} from 'hast'\n * @import {State} from '../index.js'\n */\n\nimport {zwitch} from 'zwitch'\nimport {comment} from './comment.js'\nimport {doctype} from './doctype.js'\nimport {element} from './element.js'\nimport {raw} from './raw.js'\nimport {root} from './root.js'\nimport {text} from './text.js'\n\n/**\n * @type {(node: Nodes, index: number | undefined, parent: Parents | undefined, state: State) => string}\n */\nexport const handle = zwitch('type', {\n  invalid,\n  unknown,\n  handlers: {comment, doctype, element, raw, root, text}\n})\n\n/**\n * Fail when a non-node is found in the tree.\n *\n * @param {unknown} node\n *   Unknown value.\n * @returns {never}\n *   Never.\n */\nfunction invalid(node) {\n  throw new Error('Expected node, not `' + node + '`')\n}\n\n/**\n * Fail when a node with an unknown type is found in the tree.\n *\n * @param {unknown} node_\n *  Unknown node.\n * @returns {never}\n *   Never.\n */\nfunction unknown(node_) {\n  // `type` is guaranteed by runtime JS.\n  const node = /** @type {Nodes} */ (node_)\n  throw new Error('Cannot compile unknown node `' + node.type + '`')\n}\n","/**\n * @import {Nodes, Parents, RootContent} from 'hast'\n * @import {Schema} from 'property-information'\n * @import {Options as StringifyEntitiesOptions} from 'stringify-entities'\n */\n\n/**\n * @typedef {Omit<StringifyEntitiesOptions, 'attribute' | 'escapeOnly' | 'subset'>} CharacterReferences\n *\n * @typedef Options\n *   Configuration.\n * @property {boolean | null | undefined} [allowDangerousCharacters=false]\n *   Do not encode some characters which cause XSS vulnerabilities in older\n *   browsers (default: `false`).\n *\n *   > ⚠️ **Danger**: only set this if you completely trust the content.\n * @property {boolean | null | undefined} [allowDangerousHtml=false]\n *   Allow `raw` nodes and insert them as raw HTML (default: `false`).\n *\n *   When `false`, `Raw` nodes are encoded.\n *\n *   > ⚠️ **Danger**: only set this if you completely trust the content.\n * @property {boolean | null | undefined} [allowParseErrors=false]\n *   Do not encode characters which cause parse errors (even though they work),\n *   to save bytes (default: `false`).\n *\n *   Not used in the SVG space.\n *\n *   > 👉 **Note**: intentionally creates parse errors in markup (how parse\n *   > errors are handled is well defined, so this works but isn’t pretty).\n * @property {boolean | null | undefined} [bogusComments=false]\n *   Use “bogus comments” instead of comments to save byes: `<?charlie>`\n *   instead of `<!--charlie-->` (default: `false`).\n *\n *   > 👉 **Note**: intentionally creates parse errors in markup (how parse\n *   > errors are handled is well defined, so this works but isn’t pretty).\n * @property {CharacterReferences | null | undefined} [characterReferences]\n *   Configure how to serialize character references (optional).\n * @property {boolean | null | undefined} [closeEmptyElements=false]\n *   Close SVG elements without any content with slash (`/`) on the opening tag\n *   instead of an end tag: `<circle />` instead of `<circle></circle>`\n *   (default: `false`).\n *\n *   See `tightSelfClosing` to control whether a space is used before the\n *   slash.\n *\n *   Not used in the HTML space.\n * @property {boolean | null | undefined} [closeSelfClosing=false]\n *   Close self-closing nodes with an extra slash (`/`): `<img />` instead of\n *   `<img>` (default: `false`).\n *\n *   See `tightSelfClosing` to control whether a space is used before the\n *   slash.\n *\n *   Not used in the SVG space.\n * @property {boolean | null | undefined} [collapseEmptyAttributes=false]\n *   Collapse empty attributes: get `class` instead of `class=\"\"` (default:\n *   `false`).\n *\n *   Not used in the SVG space.\n *\n *   > 👉 **Note**: boolean attributes (such as `hidden`) are always collapsed.\n * @property {boolean | null | undefined} [omitOptionalTags=false]\n *   Omit optional opening and closing tags (default: `false`).\n *\n *   For example, in `<ol><li>one</li><li>two</li></ol>`, both `</li>` closing\n *   tags can be omitted.\n *   The first because it’s followed by another `li`, the last because it’s\n *   followed by nothing.\n *\n *   Not used in the SVG space.\n * @property {boolean | null | undefined} [preferUnquoted=false]\n *   Leave attributes unquoted if that results in less bytes (default: `false`).\n *\n *   Not used in the SVG space.\n * @property {boolean | null | undefined} [quoteSmart=false]\n *   Use the other quote if that results in less bytes (default: `false`).\n * @property {Quote | null | undefined} [quote='\"']\n *   Preferred quote to use (default: `'\"'`).\n * @property {Space | null | undefined} [space='html']\n *   When an `<svg>` element is found in the HTML space, this package already\n *   automatically switches to and from the SVG space when entering and exiting\n *   it (default: `'html'`).\n *\n *   > 👉 **Note**: hast is not XML.\n *   > It supports SVG as embedded in HTML.\n *   > It does not support the features available in XML.\n *   > Passing SVG might break but fragments of modern SVG should be fine.\n *   > Use [`xast`][xast] if you need to support SVG as XML.\n * @property {boolean | null | undefined} [tightAttributes=false]\n *   Join attributes together, without whitespace, if possible: get\n *   `class=\"a b\"title=\"c d\"` instead of `class=\"a b\" title=\"c d\"` to save\n *   bytes (default: `false`).\n *\n *   Not used in the SVG space.\n *\n *   > 👉 **Note**: intentionally creates parse errors in markup (how parse\n *   > errors are handled is well defined, so this works but isn’t pretty).\n * @property {boolean | null | undefined} [tightCommaSeparatedLists=false]\n *   Join known comma-separated attribute values with just a comma (`,`),\n *   instead of padding them on the right as well (`,␠`, where `␠` represents a\n *   space) (default: `false`).\n * @property {boolean | null | undefined} [tightDoctype=false]\n *   Drop unneeded spaces in doctypes: `<!doctypehtml>` instead of\n *   `<!doctype html>` to save bytes (default: `false`).\n *\n *   > 👉 **Note**: intentionally creates parse errors in markup (how parse\n *   > errors are handled is well defined, so this works but isn’t pretty).\n * @property {boolean | null | undefined} [tightSelfClosing=false]\n *   Do not use an extra space when closing self-closing elements: `<img/>`\n *   instead of `<img />` (default: `false`).\n *\n *   > 👉 **Note**: only used if `closeSelfClosing: true` or\n *   > `closeEmptyElements: true`.\n * @property {boolean | null | undefined} [upperDoctype=false]\n *   Use a `<!DOCTYPE…` instead of `<!doctype…` (default: `false`).\n *\n *   Useless except for XHTML.\n * @property {ReadonlyArray<string> | null | undefined} [voids]\n *   Tag names of elements to serialize without closing tag (default: `html-void-elements`).\n *\n *   Not used in the SVG space.\n *\n *   > 👉 **Note**: It’s highly unlikely that you want to pass this, because\n *   > hast is not for XML, and HTML will not add more void elements.\n *\n * @typedef {'\"' | \"'\"} Quote\n *   HTML quotes for attribute values.\n *\n * @typedef {Omit<Required<{[key in keyof Options]: Exclude<Options[key], null | undefined>}>, 'space' | 'quote'>} Settings\n *\n * @typedef {'html' | 'svg'} Space\n *   Namespace.\n *\n * @typedef State\n *   Info passed around about the current state.\n * @property {(node: Parents | undefined) => string} all\n *   Serialize the children of a parent node.\n * @property {Quote} alternative\n *   Alternative quote.\n * @property {(node: Nodes, index: number | undefined, parent: Parents | undefined) => string} one\n *   Serialize one node.\n * @property {Quote} quote\n *   Preferred quote.\n * @property {Schema} schema\n *   Current schema.\n * @property {Settings} settings\n *   User configuration.\n */\n\nimport {htmlVoidElements} from 'html-void-elements'\nimport {html, svg} from 'property-information'\nimport {handle} from './handle/index.js'\n\n/** @type {Options} */\nconst emptyOptions = {}\n\n/** @type {CharacterReferences} */\nconst emptyCharacterReferences = {}\n\n/** @type {Array<never>} */\nconst emptyChildren = []\n\n/**\n * Serialize hast as HTML.\n *\n * @param {Array<RootContent> | Nodes} tree\n *   Tree to serialize.\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n * @returns {string}\n *   Serialized HTML.\n */\nexport function toHtml(tree, options) {\n  const options_ = options || emptyOptions\n  const quote = options_.quote || '\"'\n  const alternative = quote === '\"' ? \"'\" : '\"'\n\n  if (quote !== '\"' && quote !== \"'\") {\n    throw new Error('Invalid quote `' + quote + '`, expected `\\'` or `\"`')\n  }\n\n  /** @type {State} */\n  const state = {\n    one,\n    all,\n    settings: {\n      omitOptionalTags: options_.omitOptionalTags || false,\n      allowParseErrors: options_.allowParseErrors || false,\n      allowDangerousCharacters: options_.allowDangerousCharacters || false,\n      quoteSmart: options_.quoteSmart || false,\n      preferUnquoted: options_.preferUnquoted || false,\n      tightAttributes: options_.tightAttributes || false,\n      upperDoctype: options_.upperDoctype || false,\n      tightDoctype: options_.tightDoctype || false,\n      bogusComments: options_.bogusComments || false,\n      tightCommaSeparatedLists: options_.tightCommaSeparatedLists || false,\n      tightSelfClosing: options_.tightSelfClosing || false,\n      collapseEmptyAttributes: options_.collapseEmptyAttributes || false,\n      allowDangerousHtml: options_.allowDangerousHtml || false,\n      voids: options_.voids || htmlVoidElements,\n      characterReferences:\n        options_.characterReferences || emptyCharacterReferences,\n      closeSelfClosing: options_.closeSelfClosing || false,\n      closeEmptyElements: options_.closeEmptyElements || false\n    },\n    schema: options_.space === 'svg' ? svg : html,\n    quote,\n    alternative\n  }\n\n  return state.one(\n    Array.isArray(tree) ? {type: 'root', children: tree} : tree,\n    undefined,\n    undefined\n  )\n}\n\n/**\n * Serialize a node.\n *\n * @this {State}\n *   Info passed around about the current state.\n * @param {Nodes} node\n *   Node to handle.\n * @param {number | undefined} index\n *   Index of `node` in `parent.\n * @param {Parents | undefined} parent\n *   Parent of `node`.\n * @returns {string}\n *   Serialized node.\n */\nfunction one(node, index, parent) {\n  return handle(node, index, parent, this)\n}\n\n/**\n * Serialize all children of `parent`.\n *\n * @this {State}\n *   Info passed around about the current state.\n * @param {Parents | undefined} parent\n *   Parent whose children to serialize.\n * @returns {string}\n */\nexport function all(parent) {\n  /** @type {Array<string>} */\n  const results = []\n  const children = (parent && parent.children) || emptyChildren\n  let index = -1\n\n  while (++index < children.length) {\n    results[index] = this.one(children[index], index, parent)\n  }\n\n  return results.join('')\n}\n","/**\n * @typedef {import('hast-util-sanitize').Schema} Schema\n * @typedef {import('hast-util-to-html').Options} ToHtmlOptions\n * @typedef {import('mdast').Root} Root\n * @typedef {import('mdast-util-to-hast').Handlers} Handlers\n * @typedef {import('unified').Compiler<Root, string>} Compiler\n * @typedef {import('unified').Processor<undefined, undefined, undefined, Root, string>} Processor\n */\n\n/**\n * @typedef ExtraOptionsFields\n *   Extra fields.\n * @property {Readonly<Handlers> | null | undefined} [handlers]\n *   How to turn mdast nodes into hast nodes (optional);\n *   passed to `mdast-util-to-hast`.\n * @property {Readonly<Schema> | boolean | null | undefined} [sanitize]\n *   Sanitize the output, and how (default: `true`).\n *\n * @typedef {ToHtmlOptions & ExtraOptionsFields} Options\n *   Configuration.\n */\n\nimport {sanitize} from 'hast-util-sanitize'\nimport {toHast} from 'mdast-util-to-hast'\nimport {toHtml} from 'hast-util-to-html'\n\n/** @type {Readonly<Options>} */\nconst emptyOptions = {}\n\n/**\n * Serialize markdown as HTML.\n *\n * ###### Notes\n *\n * Passing `sanitize: false` is dangerous.\n * It allows arbitrary HTML and does not sanitize elements.\n *\n * @param {Readonly<Options> | null | undefined} [options]\n *   Configuration (optional).\n * @returns {undefined}\n *   Nothing.\n */\nexport default function remarkHtml(options) {\n  /** @type {Processor} */\n  // @ts-expect-error: TS in JSDoc generates wrong types if `this` is typed regularly.\n  // eslint-disable-next-line unicorn/no-this-assignment\n  const self = this\n  const {handlers, sanitize: clean, ...toHtmlOptions} = options || emptyOptions\n  let allowDangerousHtml = false\n  /** @type {Readonly<Schema> | undefined} */\n  let schema\n\n  if (typeof clean === 'boolean') {\n    allowDangerousHtml = !clean\n  } else if (clean) {\n    schema = clean\n  }\n\n  self.compiler = compiler\n\n  /**\n   * @type {Compiler}\n   */\n  function compiler(tree, file) {\n    const hast = toHast(tree, {handlers, allowDangerousHtml})\n    const safeHast = allowDangerousHtml ? hast : sanitize(hast, schema)\n    const result = toHtml(safeHast, {...toHtmlOptions, allowDangerousHtml})\n\n    if (file.extname) {\n      file.extname = '.html'\n    }\n\n    // Add an eof eol.\n    return tree &&\n      tree.type === 'root' &&\n      result &&\n      /[^\\r\\n]/.test(result.charAt(result.length - 1))\n      ? result + '\\n'\n      : result\n  }\n}\n","import { remark } from \"remark\";\nimport remarkGfm from \"remark-gfm\";\nimport remarkHtml from \"remark-html\";\n\nexport default async function processMarkdown(markdown: string) {\n  const processed = await remark().use(remarkGfm).use(remarkHtml, { sanitize: false }).process(markdown);\n\n  // Add target=\"_blank\" to all links\n  const htmlWithTargetBlank = processed.toString().replace(/<a /g, '<a target=\"_blank\" rel=\"noopener noreferrer\" ');\n\n  return htmlWithTargetBlank;\n}\n"],"names":[],"mappings":"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I,UAAU,CAAC,EAAQ,GACvB,EAEJ,CACF,CCjFA,IAAM,GAAmB,aCAnB,GAAe,oDCKd,IAAM,GAA0B,CACrC,QACA,MACA,SACA,QACA,SACA,QACA,SACA,OACA,OACA,SACA,MACA,SACA,QACA,SACA,OACA,KACA,SACA,QACA,SACA,OACA,KACA,SACA,SACA,QACA,SACA,SACA,SACA,OACA,OACA,MACA,QACA,SACA,QACA,SACA,OACA,SACA,SACA,QACA,QACA,QACA,SACA,MACA,QACA,SACA,OACA,SACA,SACA,QACA,OACA,OACA,SACA,MACA,SACA,SACA,QACA,SACA,MACA,OACA,SACA,SACA,SACA,KACA,SACA,QACA,QACA,SACA,SACA,OACA,QACA,KACA,OACA,QACA,SACA,OACA,MACA,SACA,SACA,QACA,SACA,OACA,OACA,SACA,SACA,OACA,OACA,SACA,QACA,OACA,QACA,MACA,OACA,MACA,OACA,OACA,OACA,QACA,QACA,QACA,SACA,QACA,SACA,MACA,OACA,SACA,MACA,OACD,CC3GY,GAAyB,CACpC,KAAM,IACN,MAAO,IACP,KAAM,IACN,MAAO,IACP,OAAQ,IACR,IAAK,IACL,OAAQ,IACR,KAAM,IACN,IAAK,IACL,KAAM,IACN,KAAM,IACN,MAAO,IACP,IAAK,IACL,IAAK,IACL,IAAK,IACL,KAAM,IACN,IAAK,IACL,OAAQ,IACR,KAAM,IACN,KAAM,IACN,MAAO,IACP,MAAO,IACP,KAAM,IACN,OAAQ,IACR,MAAO,IACP,KAAM,IACN,KAAM,IACN,MAAO,IACP,OAAQ,IACR,OAAQ,IACR,OAAQ,IACR,OAAQ,IACR,OAAQ,IACR,OAAQ,IACR,MAAO,IACP,OAAQ,IACR,KAAM,IACN,MAAO,IACP,MAAO,IACP,OAAQ,IACR,OAAQ,IACR,OAAQ,IACR,MAAO,IACP,KAAM,IACN,OAAQ,IACR,OAAQ,IACR,MAAO,IACP,KAAM,IACN,IAAK,IACL,OAAQ,IACR,OAAQ,IACR,OAAQ,IACR,MAAO,IACP,OAAQ,IACR,KAAM,IACN,MAAO,IACP,OAAQ,IAC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","ignoreList":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225]}