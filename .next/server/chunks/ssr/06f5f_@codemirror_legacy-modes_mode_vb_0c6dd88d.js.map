{"version":3,"sources":["turbopack:///[project]/node_modules/.pnpm/@codemirror+legacy-modes@6.5.1/node_modules/@codemirror/legacy-modes/mode/vb.js"],"sourcesContent":["var ERRORCLASS = 'error';\n\nfunction wordRegexp(words) {\n  return new RegExp(\"^((\" + words.join(\")|(\") + \"))\\\\b\", \"i\");\n}\n\nvar singleOperators = new RegExp(\"^[\\\\+\\\\-\\\\*/%&\\\\\\\\|\\\\^~<>!]\");\nvar singleDelimiters = new RegExp('^[\\\\(\\\\)\\\\[\\\\]\\\\{\\\\}@,:`=;\\\\.]');\nvar doubleOperators = new RegExp(\"^((==)|(<>)|(<=)|(>=)|(<>)|(<<)|(>>)|(//)|(\\\\*\\\\*))\");\nvar doubleDelimiters = new RegExp(\"^((\\\\+=)|(\\\\-=)|(\\\\*=)|(%=)|(/=)|(&=)|(\\\\|=)|(\\\\^=))\");\nvar tripleDelimiters = new RegExp(\"^((//=)|(>>=)|(<<=)|(\\\\*\\\\*=))\");\nvar identifiers = new RegExp(\"^[_A-Za-z][_A-Za-z0-9]*\");\n\nvar openingKeywords = ['class','module', 'sub','enum','select','while','if','function', 'get','set','property', 'try', 'structure', 'synclock', 'using', 'with'];\nvar middleKeywords = ['else','elseif','case', 'catch', 'finally'];\nvar endKeywords = ['next','loop'];\n\nvar operatorKeywords = ['and', \"andalso\", 'or', 'orelse', 'xor', 'in', 'not', 'is', 'isnot', 'like'];\nvar wordOperators = wordRegexp(operatorKeywords);\n\nvar commonKeywords = [\"#const\", \"#else\", \"#elseif\", \"#end\", \"#if\", \"#region\", \"addhandler\", \"addressof\", \"alias\", \"as\", \"byref\", \"byval\", \"cbool\", \"cbyte\", \"cchar\", \"cdate\", \"cdbl\", \"cdec\", \"cint\", \"clng\", \"cobj\", \"compare\", \"const\", \"continue\", \"csbyte\", \"cshort\", \"csng\", \"cstr\", \"cuint\", \"culng\", \"cushort\", \"declare\", \"default\", \"delegate\", \"dim\", \"directcast\", \"each\", \"erase\", \"error\", \"event\", \"exit\", \"explicit\", \"false\", \"for\", \"friend\", \"gettype\", \"goto\", \"handles\", \"implements\", \"imports\", \"infer\", \"inherits\", \"interface\", \"isfalse\", \"istrue\", \"lib\", \"me\", \"mod\", \"mustinherit\", \"mustoverride\", \"my\", \"mybase\", \"myclass\", \"namespace\", \"narrowing\", \"new\", \"nothing\", \"notinheritable\", \"notoverridable\", \"of\", \"off\", \"on\", \"operator\", \"option\", \"optional\", \"out\", \"overloads\", \"overridable\", \"overrides\", \"paramarray\", \"partial\", \"private\", \"protected\", \"public\", \"raiseevent\", \"readonly\", \"redim\", \"removehandler\", \"resume\", \"return\", \"shadows\", \"shared\", \"static\", \"step\", \"stop\", \"strict\", \"then\", \"throw\", \"to\", \"true\", \"trycast\", \"typeof\", \"until\", \"until\", \"when\", \"widening\", \"withevents\", \"writeonly\"];\n\nvar commontypes = ['object', 'boolean', 'char', 'string', 'byte', 'sbyte', 'short', 'ushort', 'int16', 'uint16', 'integer', 'uinteger', 'int32', 'uint32', 'long', 'ulong', 'int64', 'uint64', 'decimal', 'single', 'double', 'float', 'date', 'datetime', 'intptr', 'uintptr'];\n\nvar keywords = wordRegexp(commonKeywords);\nvar types = wordRegexp(commontypes);\nvar stringPrefixes = '\"';\n\nvar opening = wordRegexp(openingKeywords);\nvar middle = wordRegexp(middleKeywords);\nvar closing = wordRegexp(endKeywords);\nvar doubleClosing = wordRegexp(['end']);\nvar doOpening = wordRegexp(['do']);\n\nvar indentInfo = null;\n\nfunction indent(_stream, state) {\n  state.currentIndent++;\n}\n\nfunction dedent(_stream, state) {\n  state.currentIndent--;\n}\n// tokenizers\nfunction tokenBase(stream, state) {\n  if (stream.eatSpace()) {\n    return null;\n  }\n\n  var ch = stream.peek();\n\n  // Handle Comments\n  if (ch === \"'\") {\n    stream.skipToEnd();\n    return 'comment';\n  }\n\n\n  // Handle Number Literals\n  if (stream.match(/^((&H)|(&O))?[0-9\\.a-f]/i, false)) {\n    var floatLiteral = false;\n    // Floats\n    if (stream.match(/^\\d*\\.\\d+F?/i)) { floatLiteral = true; }\n    else if (stream.match(/^\\d+\\.\\d*F?/)) { floatLiteral = true; }\n    else if (stream.match(/^\\.\\d+F?/)) { floatLiteral = true; }\n\n    if (floatLiteral) {\n      // Float literals may be \"imaginary\"\n      stream.eat(/J/i);\n      return 'number';\n    }\n    // Integers\n    var intLiteral = false;\n    // Hex\n    if (stream.match(/^&H[0-9a-f]+/i)) { intLiteral = true; }\n    // Octal\n    else if (stream.match(/^&O[0-7]+/i)) { intLiteral = true; }\n    // Decimal\n    else if (stream.match(/^[1-9]\\d*F?/)) {\n      // Decimal literals may be \"imaginary\"\n      stream.eat(/J/i);\n      // TODO - Can you have imaginary longs?\n      intLiteral = true;\n    }\n    // Zero by itself with no other piece of number.\n    else if (stream.match(/^0(?![\\dx])/i)) { intLiteral = true; }\n    if (intLiteral) {\n      // Integer literals may be \"long\"\n      stream.eat(/L/i);\n      return 'number';\n    }\n  }\n\n  // Handle Strings\n  if (stream.match(stringPrefixes)) {\n    state.tokenize = tokenStringFactory(stream.current());\n    return state.tokenize(stream, state);\n  }\n\n  // Handle operators and Delimiters\n  if (stream.match(tripleDelimiters) || stream.match(doubleDelimiters)) {\n    return null;\n  }\n  if (stream.match(doubleOperators)\n      || stream.match(singleOperators)\n      || stream.match(wordOperators)) {\n    return 'operator';\n  }\n  if (stream.match(singleDelimiters)) {\n    return null;\n  }\n  if (stream.match(doOpening)) {\n    indent(stream,state);\n    state.doInCurrentLine = true;\n    return 'keyword';\n  }\n  if (stream.match(opening)) {\n    if (! state.doInCurrentLine)\n      indent(stream,state);\n    else\n      state.doInCurrentLine = false;\n    return 'keyword';\n  }\n  if (stream.match(middle)) {\n    return 'keyword';\n  }\n\n  if (stream.match(doubleClosing)) {\n    dedent(stream,state);\n    dedent(stream,state);\n    return 'keyword';\n  }\n  if (stream.match(closing)) {\n    dedent(stream,state);\n    return 'keyword';\n  }\n\n  if (stream.match(types)) {\n    return 'keyword';\n  }\n\n  if (stream.match(keywords)) {\n    return 'keyword';\n  }\n\n  if (stream.match(identifiers)) {\n    return 'variable';\n  }\n\n  // Handle non-detected items\n  stream.next();\n  return ERRORCLASS;\n}\n\nfunction tokenStringFactory(delimiter) {\n  var singleline = delimiter.length == 1;\n  var OUTCLASS = 'string';\n\n  return function(stream, state) {\n    while (!stream.eol()) {\n      stream.eatWhile(/[^'\"]/);\n      if (stream.match(delimiter)) {\n        state.tokenize = tokenBase;\n        return OUTCLASS;\n      } else {\n        stream.eat(/['\"]/);\n      }\n    }\n    if (singleline) {\n      state.tokenize = tokenBase;\n    }\n    return OUTCLASS;\n  };\n}\n\n\nfunction tokenLexer(stream, state) {\n  var style = state.tokenize(stream, state);\n  var current = stream.current();\n\n  // Handle '.' connected identifiers\n  if (current === '.') {\n    style = state.tokenize(stream, state);\n    if (style === 'variable') {\n      return 'variable';\n    } else {\n      return ERRORCLASS;\n    }\n  }\n\n\n  var delimiter_index = '[({'.indexOf(current);\n  if (delimiter_index !== -1) {\n    indent(stream, state );\n  }\n  if (indentInfo === 'dedent') {\n    if (dedent(stream, state)) {\n      return ERRORCLASS;\n    }\n  }\n  delimiter_index = '])}'.indexOf(current);\n  if (delimiter_index !== -1) {\n    if (dedent(stream, state)) {\n      return ERRORCLASS;\n    }\n  }\n\n  return style;\n}\n\nexport const vb = {\n  name: \"vb\",\n\n  startState: function() {\n    return {\n      tokenize: tokenBase,\n      lastToken: null,\n      currentIndent: 0,\n      nextLineIndent: 0,\n      doInCurrentLine: false\n\n\n    };\n  },\n\n  token: function(stream, state) {\n    if (stream.sol()) {\n      state.currentIndent += state.nextLineIndent;\n      state.nextLineIndent = 0;\n      state.doInCurrentLine = 0;\n    }\n    var style = tokenLexer(stream, state);\n\n    state.lastToken = {style:style, content: stream.current()};\n\n\n\n    return style;\n  },\n\n  indent: function(state, textAfter, cx) {\n    var trueText = textAfter.replace(/^\\s+|\\s+$/g, '') ;\n    if (trueText.match(closing) || trueText.match(doubleClosing) || trueText.match(middle)) return cx.unit*(state.currentIndent-1);\n    if(state.currentIndent < 0) return 0;\n    return state.currentIndent * cx.unit;\n  },\n\n  languageData: {\n    closeBrackets: {brackets: [\"(\", \"[\", \"{\", '\"']},\n    commentTokens: {line: \"'\"},\n    autocomplete: openingKeywords.concat(middleKeywords).concat(endKeywords)\n      .concat(operatorKeywords).concat(commonKeywords).concat(commontypes)\n  }\n};\n"],"names":[],"mappings":"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","ignoreList":[0]}