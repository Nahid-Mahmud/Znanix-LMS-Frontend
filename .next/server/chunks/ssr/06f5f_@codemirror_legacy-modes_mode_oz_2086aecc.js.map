{"version":3,"sources":["turbopack:///[project]/node_modules/.pnpm/@codemirror+legacy-modes@6.5.1/node_modules/@codemirror/legacy-modes/mode/oz.js"],"sourcesContent":["function wordRegexp(words) {\n  return new RegExp(\"^((\" + words.join(\")|(\") + \"))\\\\b\");\n}\n\nvar singleOperators = /[\\^@!\\|<>#~\\.\\*\\-\\+\\\\/,=]/;\nvar doubleOperators = /(<-)|(:=)|(=<)|(>=)|(<=)|(<:)|(>:)|(=:)|(\\\\=)|(\\\\=:)|(!!)|(==)|(::)/;\nvar tripleOperators = /(:::)|(\\.\\.\\.)|(=<:)|(>=:)/;\n\nvar middle = [\"in\", \"then\", \"else\", \"of\", \"elseof\", \"elsecase\", \"elseif\", \"catch\",\n              \"finally\", \"with\", \"require\", \"prepare\", \"import\", \"export\", \"define\", \"do\"];\nvar end = [\"end\"];\n\nvar atoms = wordRegexp([\"true\", \"false\", \"nil\", \"unit\"]);\nvar commonKeywords = wordRegexp([\"andthen\", \"at\", \"attr\", \"declare\", \"feat\", \"from\", \"lex\",\n                                 \"mod\", \"div\", \"mode\", \"orelse\", \"parser\", \"prod\", \"prop\", \"scanner\", \"self\", \"syn\", \"token\"]);\nvar openingKeywords = wordRegexp([\"local\", \"proc\", \"fun\", \"case\", \"class\", \"if\", \"cond\", \"or\", \"dis\",\n                                  \"choice\", \"not\", \"thread\", \"try\", \"raise\", \"lock\", \"for\", \"suchthat\", \"meth\", \"functor\"]);\nvar middleKeywords = wordRegexp(middle);\nvar endKeywords = wordRegexp(end);\n\n// Tokenizers\nfunction tokenBase(stream, state) {\n  if (stream.eatSpace()) {\n    return null;\n  }\n\n  // Brackets\n  if(stream.match(/[{}]/)) {\n    return \"bracket\";\n  }\n\n  // Special [] keyword\n  if (stream.match('[]')) {\n    return \"keyword\"\n  }\n\n  // Operators\n  if (stream.match(tripleOperators) || stream.match(doubleOperators)) {\n    return \"operator\";\n  }\n\n  // Atoms\n  if(stream.match(atoms)) {\n    return 'atom';\n  }\n\n  // Opening keywords\n  var matched = stream.match(openingKeywords);\n  if (matched) {\n    if (!state.doInCurrentLine)\n      state.currentIndent++;\n    else\n      state.doInCurrentLine = false;\n\n    // Special matching for signatures\n    if(matched[0] == \"proc\" || matched[0] == \"fun\")\n      state.tokenize = tokenFunProc;\n    else if(matched[0] == \"class\")\n      state.tokenize = tokenClass;\n    else if(matched[0] == \"meth\")\n      state.tokenize = tokenMeth;\n\n    return 'keyword';\n  }\n\n  // Middle and other keywords\n  if (stream.match(middleKeywords) || stream.match(commonKeywords)) {\n    return \"keyword\"\n  }\n\n  // End keywords\n  if (stream.match(endKeywords)) {\n    state.currentIndent--;\n    return 'keyword';\n  }\n\n  // Eat the next char for next comparisons\n  var ch = stream.next();\n\n  // Strings\n  if (ch == '\"' || ch == \"'\") {\n    state.tokenize = tokenString(ch);\n    return state.tokenize(stream, state);\n  }\n\n  // Numbers\n  if (/[~\\d]/.test(ch)) {\n    if (ch == \"~\") {\n      if(! /^[0-9]/.test(stream.peek()))\n        return null;\n      else if (( stream.next() == \"0\" && stream.match(/^[xX][0-9a-fA-F]+/)) || stream.match(/^[0-9]*(\\.[0-9]+)?([eE][~+]?[0-9]+)?/))\n        return \"number\";\n    }\n\n    if ((ch == \"0\" && stream.match(/^[xX][0-9a-fA-F]+/)) || stream.match(/^[0-9]*(\\.[0-9]+)?([eE][~+]?[0-9]+)?/))\n      return \"number\";\n\n    return null;\n  }\n\n  // Comments\n  if (ch == \"%\") {\n    stream.skipToEnd();\n    return 'comment';\n  }\n  else if (ch == \"/\") {\n    if (stream.eat(\"*\")) {\n      state.tokenize = tokenComment;\n      return tokenComment(stream, state);\n    }\n  }\n\n  // Single operators\n  if(singleOperators.test(ch)) {\n    return \"operator\";\n  }\n\n  // If nothing match, we skip the entire alphanumerical block\n  stream.eatWhile(/\\w/);\n\n  return \"variable\";\n}\n\nfunction tokenClass(stream, state) {\n  if (stream.eatSpace()) {\n    return null;\n  }\n  stream.match(/([A-Z][A-Za-z0-9_]*)|(`.+`)/);\n  state.tokenize = tokenBase;\n  return \"type\"\n}\n\nfunction tokenMeth(stream, state) {\n  if (stream.eatSpace()) {\n    return null;\n  }\n  stream.match(/([a-zA-Z][A-Za-z0-9_]*)|(`.+`)/);\n  state.tokenize = tokenBase;\n  return \"def\"\n}\n\nfunction tokenFunProc(stream, state) {\n  if (stream.eatSpace()) {\n    return null;\n  }\n\n  if(!state.hasPassedFirstStage && stream.eat(\"{\")) {\n    state.hasPassedFirstStage = true;\n    return \"bracket\";\n  }\n  else if(state.hasPassedFirstStage) {\n    stream.match(/([A-Z][A-Za-z0-9_]*)|(`.+`)|\\$/);\n    state.hasPassedFirstStage = false;\n    state.tokenize = tokenBase;\n    return \"def\"\n  }\n  else {\n    state.tokenize = tokenBase;\n    return null;\n  }\n}\n\nfunction tokenComment(stream, state) {\n  var maybeEnd = false, ch;\n  while (ch = stream.next()) {\n    if (ch == \"/\" && maybeEnd) {\n      state.tokenize = tokenBase;\n      break;\n    }\n    maybeEnd = (ch == \"*\");\n  }\n  return \"comment\";\n}\n\nfunction tokenString(quote) {\n  return function (stream, state) {\n    var escaped = false, next, end = false;\n    while ((next = stream.next()) != null) {\n      if (next == quote && !escaped) {\n        end = true;\n        break;\n      }\n      escaped = !escaped && next == \"\\\\\";\n    }\n    if (end || !escaped)\n      state.tokenize = tokenBase;\n    return \"string\";\n  };\n}\n\nfunction buildElectricInputRegEx() {\n  // Reindentation should occur on [] or on a match of any of\n  // the block closing keywords, at the end of a line.\n  var allClosings = middle.concat(end);\n  return new RegExp(\"[\\\\[\\\\]]|(\" + allClosings.join(\"|\") + \")$\");\n}\n\nexport const oz = {\n  name: \"oz\",\n\n  startState: function () {\n    return {\n      tokenize: tokenBase,\n      currentIndent: 0,\n      doInCurrentLine: false,\n      hasPassedFirstStage: false\n    };\n  },\n\n  token: function (stream, state) {\n    if (stream.sol())\n      state.doInCurrentLine = 0;\n\n    return state.tokenize(stream, state);\n  },\n\n  indent: function (state, textAfter, cx) {\n    var trueText = textAfter.replace(/^\\s+|\\s+$/g, '');\n\n    if (trueText.match(endKeywords) || trueText.match(middleKeywords) || trueText.match(/(\\[])/))\n      return cx.unit * (state.currentIndent - 1);\n\n    if (state.currentIndent < 0)\n      return 0;\n\n    return state.currentIndent * cx.unit\n  },\n\n  languageData: {\n    indentOnInut: buildElectricInputRegEx(),\n    commentTokens: {line: \"%\", block: {open: \"/*\", close: \"*/\"}}\n  }\n};\n"],"names":[],"mappings":"wCAAA,SAAS,EAAW,CAAK,EACvB,OAAO,AAAI,OAAO,MAAQ,EAAM,IAAI,CAAC,OAAS,QAChD,mBAEA,IAAI,EAAkB,4BAClB,EAAkB,sEAClB,EAAkB,6BAElB,EAAS,CAAC,KAAM,OAAQ,OAAQ,KAAM,SAAU,WAAY,SAAU,QAC5D,UAAW,OAAQ,UAAW,UAAW,SAAU,SAAU,SAAU,KAAK,CACtF,EAAM,CAAC,MAAM,CAEb,EAAQ,EAAW,CAAC,OAAQ,QAAS,MAAO,OAAO,EACnD,EAAiB,EAAW,CAAC,UAAW,KAAM,OAAQ,UAAW,OAAQ,OAAQ,MACpD,MAAO,MAAO,OAAQ,SAAU,SAAU,OAAQ,OAAQ,UAAW,OAAQ,MAAO,QAAQ,EACzH,EAAkB,EAAW,CAAC,QAAS,OAAQ,MAAO,OAAQ,QAAS,KAAM,OAAQ,KAAM,MAC7D,SAAU,MAAO,SAAU,MAAO,QAAS,OAAQ,MAAO,WAAY,OAAQ,UAAU,EACtH,EAAiB,EAAW,GAC5B,EAAc,EAAW,GAG7B,SAAS,EAAU,CAAM,CAAE,CAAK,EAC9B,GAAI,EAAO,QAAQ,GACjB,CADqB,MACd,KAIT,GAAG,EAAO,KAAK,CAAC,QACd,CADuB,KAChB,UAIT,GAAI,EAAO,KAAK,CAAC,MACf,CADsB,KACf,UAIT,GAAI,EAAO,KAAK,CAAC,IAAoB,EAAO,KAAK,CAAC,GAChD,MAAO,SAD2D,EAKpE,GAAG,EAAO,KAAK,CAAC,GACd,KADsB,CACf,OAIT,MAAI,EAAU,EAAO,KAAK,CAAC,GAC3B,GAAI,EAcF,OAdW,AACN,EAAM,eAAe,CAGxB,EAAM,eAAe,EAAG,EAFxB,EAAM,aAAa,GAKJ,QAAd,CAAO,CAAC,EAAE,EAA4B,OAAd,CAAO,CAAC,EAAE,CACnC,EAAM,QAAQ,CAAG,EACG,SAAd,CAAO,CAAC,EAAE,CAChB,EAAM,QAAQ,CAAG,EACG,QAAd,CAAO,CAAC,EAAE,GAChB,EAAM,QAAQ,CAAG,CAAA,EAEZ,UAIT,GAAI,EAAO,KAAK,CAAC,IAAmB,EAAO,KAAK,CAAC,GAC/C,MAAO,QADyD,EAKlE,GAAI,EAAO,KAAK,CAAC,GAEf,OADA,EAAM,EADuB,WACV,GACZ,UAIT,IAAI,EAAK,EAAO,IAAI,GAGpB,GAAU,KAAN,GAAa,AAAM,KAAK,GAE1B,OA4FiB,EA7FY,EAA7B,CA6FsB,CA7FhB,QAAQ,CA8FT,EA9FY,OA8FF,CAAM,CAAE,CAAK,EAE5B,IADA,IAAqB,EAAjB,GAAU,EAAa,GAAM,EAC1B,AAA0B,OAAzB,EAAO,EAAO,IAAI,EAAA,CAAE,EAAW,CACrC,GAAI,GAAQ,GAAS,CAAC,EAAS,CAC7B,EAAM,GACN,KACF,CACA,EAAU,CAAC,GAAmB,MAAR,CACxB,CAGA,OAFI,GAAO,CAAC,CAAA,IACV,EAAM,QAAQ,CAAG,CAAA,EACZ,QACT,EAzGS,EAAM,QAAQ,CAAC,EAAQ,EAAA,CAIhC,GAAI,QAAQ,IAAI,CAAC,GAAK,CACpB,GAAU,KAAN,AAAW,GACb,GAAG,CAAE,SAAS,IAAI,CAAC,EAAO,IAAI,IAC5B,OAAO,UACJ,GAAuB,KAAjB,EAAO,IAAI,IAAa,EAAO,KAAK,CAAC,sBAAyB,EAAO,KAAK,CAAC,wCACpF,MAAO,QAAA,OAGX,AAAW,KAAN,GAAa,EAAO,KAAK,CAAC,sBAAyB,EAAO,KAAK,CAAC,wCAC5D,CAAP,QAEK,IACT,OAGU,AAAV,KAAI,AAAW,GACb,EAAO,SAAS,GACT,WAEM,KAAN,AAAW,GACd,EAAO,GAAG,CAAC,MAAM,AACnB,EAAM,QAAQ,CAAG,EACV,EAAa,EAAQ,IAK7B,EAAgB,IAAI,CAAC,GACf,EADoB,UAK7B,EAAO,QAAQ,CAAC,MAET,WACT,CAEA,SAAS,EAAW,CAAM,CAAE,CAAK,SAC/B,AAAI,EAAO,QAAQ,GACV,CADc,KAGvB,EAAO,KAAK,CAAC,+BACb,EAAM,QAAQ,CAAG,EACV,OACT,CAEA,SAAS,EAAU,CAAM,CAAE,CAAK,SAC9B,AAAI,EAAO,QAAQ,GACV,CADc,KAGvB,EAAO,KAAK,CAAC,kCACb,EAAM,QAAQ,CAAG,EACV,MACT,CAEA,SAAS,EAAa,CAAM,CAAE,CAAK,SACjC,AAAI,EAAO,QAAQ,GACV,CADc,IAIpB,CAAC,EAAM,mBAAmB,EAAI,EAAO,GAAG,CAAC,MAAM,AAChD,EAAM,mBAAmB,EAAG,EACrB,WAED,EAAM,mBAAmB,EAAE,AACjC,EAAO,KAAK,CAAC,kCACb,EAAM,mBAAmB,CAAG,GAC5B,EAAM,QAAQ,CAAG,EACV,QAGP,EAAM,QAAQ,CAAG,EACV,KAEX,CAEA,SAAS,EAAa,CAAM,CAAE,CAAK,EAEjC,IADA,IAAsB,EAAlB,GAAW,EACR,EAAK,EAAO,IAAI,IAAI,CACzB,GAAI,AAAM,QAAO,EAAU,CACzB,EAAM,QAAQ,CAAG,EACjB,KACF,CACA,EAAkB,KAAN,CACd,CACA,MAAO,SACT,CAyBO,IAAM,EAAK,CAChB,KAAM,KAEN,WAAY,WACV,MAAO,CACL,SAAU,EACV,cAAe,EACf,iBAAiB,EACjB,qBAAqB,CACvB,CACF,EAEA,MAAO,SAAU,CAAM,CAAE,CAAK,EAI5B,OAHI,EAAO,GAAG,KACZ,EAAM,eAAe,EAAG,EAEnB,EAAM,QAAQ,CAAC,EAAQ,EAChC,EAEA,OAAQ,SAAU,CAAK,CAAE,CAAS,CAAE,CAAE,EACpC,IAAI,EAAW,EAAU,OAAO,CAAC,aAAc,WAE/C,AAAI,EAAS,KAAK,CAAC,IAAgB,EAAS,KAAK,CAAC,IAAmB,EAAS,KAAK,CAAC,SAC3E,CAAP,CAAU,IAAI,EAAI,CAAD,CAAO,aAAa,EAAG,CAAC,CAEvC,EAAM,aAAa,CAAG,EACjB,CAAP,CAEK,EAAM,aAAa,CAAG,EAAG,IAAI,AACtC,EAEA,aAAc,CACZ,aAnCK,AAAI,CAmCK,MAnCE,aADA,AACe,EADR,MAAM,CAAC,GACa,IAAI,CAAC,KAAO,MAoCvD,cAAe,CAAC,KAAM,IAAK,MAAO,CAAC,KAAM,KAAM,MAAO,IAAI,CAAC,CAC7D,CACF","ignoreList":[0]}