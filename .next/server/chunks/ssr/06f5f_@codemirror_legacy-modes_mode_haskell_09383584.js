module.exports=[729139,a=>{"use strict";a.s(["haskell",()=>o]);var b=/[a-z_]/,c=/[A-Z]/,d=/\d/,e=/[0-9A-Fa-f]/,f=/[0-7]/,g=/[a-z_A-Z0-9'\xa1-\uffff]/,h=/[-!#$%&*+.\/<=>?@\\^|~:]/,i=/[(),;[\]`{}]/,j=/[ \t\v\f]/;function k(a,m){if(a.eatWhile(j))return null;var n,o=a.next();if(i.test(o)){if("{"==o&&a.eat("-")){var p,q="comment";return a.eat("#")&&(q="meta"),m(p=function a(b,c){return 0==c?k:function(d,e){for(var f=c;!d.eol();){var g=d.next();if("{"==g&&d.eat("-"))++f;else if("-"==g&&d.eat("}")&&0==--f)return e(k),b}return e(a(b,f)),b}}(q,1)),p(a,m)}return null}if("'"==o)return(a.eat("\\"),a.next(),a.eat("'"))?"string":"error";if('"'==o)return m(n=l),n(a,m);if(c.test(o))return(a.eatWhile(g),a.eat("."))?"qualifier":"type";if(b.test(o))return a.eatWhile(g),"variable";if(d.test(o)){if("0"==o){if(a.eat(/[xX]/))return a.eatWhile(e),"integer";if(a.eat(/[oO]/))return a.eatWhile(f),"number"}a.eatWhile(d);var q="number";return a.match(/^\.\d+/)&&(q="number"),a.eat(/[eE]/)&&(q="number",a.eat(/[-+]/),a.eatWhile(d)),q}if("."==o&&a.eat("."))return"keyword";if(h.test(o))return"-"==o&&a.eat(/-/)&&(a.eatWhile(/-/),!a.eat(h))?(a.skipToEnd(),"comment"):(a.eatWhile(h),"variable");return"error"}function l(a,b){for(;!a.eol();){var c=a.next();if('"'==c)return b(k),"string";if("\\"==c){if(a.eol()||a.eat(j))return b(m),"string";a.eat("&")||a.next()}}return b(k),"error"}function m(a,b){if(a.eat("\\")){var c;return b(c=l),c(a,b)}return a.next(),b(k),"error"}var n=function(){var a={};function b(b){return function(){for(var c=0;c<arguments.length;c++)a[arguments[c]]=b}}return b("keyword")("case","class","data","default","deriving","do","else","foreign","if","import","in","infix","infixl","infixr","instance","let","module","newtype","of","then","type","where","_"),b("keyword")("..",":","::","=","\\","<-","->","@","~","=>"),b("builtin")("!!","$!","$","&&","+","++","-",".","/","/=","<","<*","<=","<$>","<*>","=<<","==",">",">=",">>",">>=","^","^^","||","*","*>","**"),b("builtin")("Applicative","Bool","Bounded","Char","Double","EQ","Either","Enum","Eq","False","FilePath","Float","Floating","Fractional","Functor","GT","IO","IOError","Int","Integer","Integral","Just","LT","Left","Maybe","Monad","Nothing","Num","Ord","Ordering","Rational","Read","ReadS","Real","RealFloat","RealFrac","Right","Show","ShowS","String","True"),b("builtin")("abs","acos","acosh","all","and","any","appendFile","asTypeOf","asin","asinh","atan","atan2","atanh","break","catch","ceiling","compare","concat","concatMap","const","cos","cosh","curry","cycle","decodeFloat","div","divMod","drop","dropWhile","either","elem","encodeFloat","enumFrom","enumFromThen","enumFromThenTo","enumFromTo","error","even","exp","exponent","fail","filter","flip","floatDigits","floatRadix","floatRange","floor","fmap","foldl","foldl1","foldr","foldr1","fromEnum","fromInteger","fromIntegral","fromRational","fst","gcd","getChar","getContents","getLine","head","id","init","interact","ioError","isDenormalized","isIEEE","isInfinite","isNaN","isNegativeZero","iterate","last","lcm","length","lex","lines","log","logBase","lookup","map","mapM","mapM_","max","maxBound","maximum","maybe","min","minBound","minimum","mod","negate","not","notElem","null","odd","or","otherwise","pi","pred","print","product","properFraction","pure","putChar","putStr","putStrLn","quot","quotRem","read","readFile","readIO","readList","readLn","readParen","reads","readsPrec","realToFrac","recip","rem","repeat","replicate","return","reverse","round","scaleFloat","scanl","scanl1","scanr","scanr1","seq","sequence","sequence_","show","showChar","showList","showParen","showString","shows","showsPrec","significand","signum","sin","sinh","snd","span","splitAt","sqrt","subtract","succ","sum","tail","take","takeWhile","tan","tanh","toEnum","toInteger","toRational","truncate","uncurry","undefined","unlines","until","unwords","unzip","unzip3","userError","words","writeFile","zip","zip3","zipWith","zipWith3"),a}();let o={name:"haskell",startState:function(){return{f:k}},copyState:function(a){return{f:a.f}},token:function(a,b){var c=b.f(a,function(a){b.f=a}),d=a.current();return n.hasOwnProperty(d)?n[d]:c},languageData:{commentTokens:{line:"--",block:{open:"{-",close:"-}"}}}}}];

//# sourceMappingURL=06f5f_%40codemirror_legacy-modes_mode_haskell_09383584.js.map