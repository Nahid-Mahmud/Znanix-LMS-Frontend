{"version":3,"sources":["turbopack:///[project]/node_modules/.pnpm/@codemirror+legacy-modes@6.5.1/node_modules/@codemirror/legacy-modes/mode/xquery.js"],"sourcesContent":["// The keywords object is set to the result of this self executing\n// function. Each keyword is a property of the keywords object whose\n// value is {type: atype, style: astyle}\nvar keywords = function(){\n  // convenience functions used to build keywords object\n  function kw(type) {return {type: type, style: \"keyword\"};}\n  var operator = kw(\"operator\")\n  , atom = {type: \"atom\", style: \"atom\"}\n  , punctuation = {type: \"punctuation\", style: null}\n  , qualifier = {type: \"axis_specifier\", style: \"qualifier\"};\n\n  // kwObj is what is return from this function at the end\n  var kwObj = {\n    ',': punctuation\n  };\n\n  // a list of 'basic' keywords. For each add a property to kwObj with the value of\n  // {type: basic[i], style: \"keyword\"} e.g. 'after' --> {type: \"after\", style: \"keyword\"}\n  var basic = ['after', 'all', 'allowing', 'ancestor', 'ancestor-or-self', 'any', 'array', 'as',\n               'ascending', 'at', 'attribute', 'base-uri', 'before', 'boundary-space', 'by', 'case', 'cast',\n               'castable', 'catch', 'child', 'collation', 'comment', 'construction', 'contains', 'content',\n               'context', 'copy', 'copy-namespaces', 'count', 'decimal-format', 'declare', 'default', 'delete',\n               'descendant', 'descendant-or-self', 'descending', 'diacritics', 'different', 'distance',\n               'document', 'document-node', 'element', 'else', 'empty', 'empty-sequence', 'encoding', 'end',\n               'entire', 'every', 'exactly', 'except', 'external', 'first', 'following', 'following-sibling',\n               'for', 'from', 'ftand', 'ftnot', 'ft-option', 'ftor', 'function', 'fuzzy', 'greatest', 'group',\n               'if', 'import', 'in', 'inherit', 'insensitive', 'insert', 'instance', 'intersect', 'into',\n               'invoke', 'is', 'item', 'language', 'last', 'lax', 'least', 'let', 'levels', 'lowercase', 'map',\n               'modify', 'module', 'most', 'namespace', 'next', 'no', 'node', 'nodes', 'no-inherit',\n               'no-preserve', 'not', 'occurs', 'of', 'only', 'option', 'order', 'ordered', 'ordering',\n               'paragraph', 'paragraphs', 'parent', 'phrase', 'preceding', 'preceding-sibling', 'preserve',\n               'previous', 'processing-instruction', 'relationship', 'rename', 'replace', 'return',\n               'revalidation', 'same', 'satisfies', 'schema', 'schema-attribute', 'schema-element', 'score',\n               'self', 'sensitive', 'sentence', 'sentences', 'sequence', 'skip', 'sliding', 'some', 'stable',\n               'start', 'stemming', 'stop', 'strict', 'strip', 'switch', 'text', 'then', 'thesaurus', 'times',\n               'to', 'transform', 'treat', 'try', 'tumbling', 'type', 'typeswitch', 'union', 'unordered',\n               'update', 'updating', 'uppercase', 'using', 'validate', 'value', 'variable', 'version',\n               'weight', 'when', 'where', 'wildcards', 'window', 'with', 'without', 'word', 'words', 'xquery'];\n  for(var i=0, l=basic.length; i < l; i++) { kwObj[basic[i]] = kw(basic[i]);};\n\n  // a list of types. For each add a property to kwObj with the value of\n  // {type: \"atom\", style: \"atom\"}\n  var types = ['xs:anyAtomicType', 'xs:anySimpleType', 'xs:anyType', 'xs:anyURI',\n               'xs:base64Binary', 'xs:boolean', 'xs:byte', 'xs:date', 'xs:dateTime', 'xs:dateTimeStamp',\n               'xs:dayTimeDuration', 'xs:decimal', 'xs:double', 'xs:duration', 'xs:ENTITIES', 'xs:ENTITY',\n               'xs:float', 'xs:gDay', 'xs:gMonth', 'xs:gMonthDay', 'xs:gYear', 'xs:gYearMonth', 'xs:hexBinary',\n               'xs:ID', 'xs:IDREF', 'xs:IDREFS', 'xs:int', 'xs:integer', 'xs:item', 'xs:java', 'xs:language',\n               'xs:long', 'xs:Name', 'xs:NCName', 'xs:negativeInteger', 'xs:NMTOKEN', 'xs:NMTOKENS',\n               'xs:nonNegativeInteger', 'xs:nonPositiveInteger', 'xs:normalizedString', 'xs:NOTATION',\n               'xs:numeric', 'xs:positiveInteger', 'xs:precisionDecimal', 'xs:QName', 'xs:short', 'xs:string',\n               'xs:time', 'xs:token', 'xs:unsignedByte', 'xs:unsignedInt', 'xs:unsignedLong',\n               'xs:unsignedShort', 'xs:untyped', 'xs:untypedAtomic', 'xs:yearMonthDuration'];\n  for(var i=0, l=types.length; i < l; i++) { kwObj[types[i]] = atom;};\n\n  // each operator will add a property to kwObj with value of {type: \"operator\", style: \"keyword\"}\n  var operators = ['eq', 'ne', 'lt', 'le', 'gt', 'ge', ':=', '=', '>', '>=', '<', '<=', '.', '|', '?', 'and', 'or', 'div', 'idiv', 'mod', '*', '/', '+', '-'];\n  for(var i=0, l=operators.length; i < l; i++) { kwObj[operators[i]] = operator;};\n\n  // each axis_specifiers will add a property to kwObj with value of {type: \"axis_specifier\", style: \"qualifier\"}\n  var axis_specifiers = [\"self::\", \"attribute::\", \"child::\", \"descendant::\", \"descendant-or-self::\", \"parent::\",\n                         \"ancestor::\", \"ancestor-or-self::\", \"following::\", \"preceding::\", \"following-sibling::\", \"preceding-sibling::\"];\n  for(var i=0, l=axis_specifiers.length; i < l; i++) { kwObj[axis_specifiers[i]] = qualifier; };\n\n  return kwObj;\n}();\n\nfunction chain(stream, state, f) {\n  state.tokenize = f;\n  return f(stream, state);\n}\n\n// the primary mode tokenizer\nfunction tokenBase(stream, state) {\n  var ch = stream.next(),\n      mightBeFunction = false,\n      isEQName = isEQNameAhead(stream);\n\n  // an XML tag (if not in some sub, chained tokenizer)\n  if (ch == \"<\") {\n    if(stream.match(\"!--\", true))\n      return chain(stream, state, tokenXMLComment);\n\n    if(stream.match(\"![CDATA\", false)) {\n      state.tokenize = tokenCDATA;\n      return \"tag\";\n    }\n\n    if(stream.match(\"?\", false)) {\n      return chain(stream, state, tokenPreProcessing);\n    }\n\n    var isclose = stream.eat(\"/\");\n    stream.eatSpace();\n    var tagName = \"\", c;\n    while ((c = stream.eat(/[^\\s\\u00a0=<>\\\"\\'\\/?]/))) tagName += c;\n\n    return chain(stream, state, tokenTag(tagName, isclose));\n  }\n  // start code block\n  else if(ch == \"{\") {\n    pushStateStack(state, { type: \"codeblock\"});\n    return null;\n  }\n  // end code block\n  else if(ch == \"}\") {\n    popStateStack(state);\n    return null;\n  }\n  // if we're in an XML block\n  else if(isInXmlBlock(state)) {\n    if(ch == \">\")\n      return \"tag\";\n    else if(ch == \"/\" && stream.eat(\">\")) {\n      popStateStack(state);\n      return \"tag\";\n    }\n    else\n      return \"variable\";\n  }\n  // if a number\n  else if (/\\d/.test(ch)) {\n    stream.match(/^\\d*(?:\\.\\d*)?(?:E[+\\-]?\\d+)?/);\n    return \"atom\";\n  }\n  // comment start\n  else if (ch === \"(\" && stream.eat(\":\")) {\n    pushStateStack(state, { type: \"comment\"});\n    return chain(stream, state, tokenComment);\n  }\n  // quoted string\n  else if (!isEQName && (ch === '\"' || ch === \"'\"))\n    return startString(stream, state, ch);\n  // variable\n  else if(ch === \"$\") {\n    return chain(stream, state, tokenVariable);\n  }\n  // assignment\n  else if(ch ===\":\" && stream.eat(\"=\")) {\n    return \"keyword\";\n  }\n  // open paren\n  else if(ch === \"(\") {\n    pushStateStack(state, { type: \"paren\"});\n    return null;\n  }\n  // close paren\n  else if(ch === \")\") {\n    popStateStack(state);\n    return null;\n  }\n  // open paren\n  else if(ch === \"[\") {\n    pushStateStack(state, { type: \"bracket\"});\n    return null;\n  }\n  // close paren\n  else if(ch === \"]\") {\n    popStateStack(state);\n    return null;\n  }\n  else {\n    var known = keywords.propertyIsEnumerable(ch) && keywords[ch];\n\n    // if there's a EQName ahead, consume the rest of the string portion, it's likely a function\n    if(isEQName && ch === '\\\"') while(stream.next() !== '\"'){}\n    if(isEQName && ch === '\\'') while(stream.next() !== '\\''){}\n\n    // gobble up a word if the character is not known\n    if(!known) stream.eatWhile(/[\\w\\$_-]/);\n\n    // gobble a colon in the case that is a lib func type call fn:doc\n    var foundColon = stream.eat(\":\");\n\n    // if there's not a second colon, gobble another word. Otherwise, it's probably an axis specifier\n    // which should get matched as a keyword\n    if(!stream.eat(\":\") && foundColon) {\n      stream.eatWhile(/[\\w\\$_-]/);\n    }\n    // if the next non whitespace character is an open paren, this is probably a function (if not a keyword of other sort)\n    if(stream.match(/^[ \\t]*\\(/, false)) {\n      mightBeFunction = true;\n    }\n    // is the word a keyword?\n    var word = stream.current();\n    known = keywords.propertyIsEnumerable(word) && keywords[word];\n\n    // if we think it's a function call but not yet known,\n    // set style to variable for now for lack of something better\n    if(mightBeFunction && !known) known = {type: \"function_call\", style: \"def\"};\n\n    // if the previous word was element, attribute, axis specifier, this word should be the name of that\n    if(isInXmlConstructor(state)) {\n      popStateStack(state);\n      return \"variable\";\n    }\n    // as previously checked, if the word is element,attribute, axis specifier, call it an \"xmlconstructor\" and\n    // push the stack so we know to look for it on the next word\n    if(word == \"element\" || word == \"attribute\" || known.type == \"axis_specifier\") pushStateStack(state, {type: \"xmlconstructor\"});\n\n    // if the word is known, return the details of that else just call this a generic 'word'\n    return known ? known.style : \"variable\";\n  }\n}\n\n// handle comments, including nested\nfunction tokenComment(stream, state) {\n  var maybeEnd = false, maybeNested = false, nestedCount = 0, ch;\n  while (ch = stream.next()) {\n    if (ch == \")\" && maybeEnd) {\n      if(nestedCount > 0)\n        nestedCount--;\n      else {\n        popStateStack(state);\n        break;\n      }\n    }\n    else if(ch == \":\" && maybeNested) {\n      nestedCount++;\n    }\n    maybeEnd = (ch == \":\");\n    maybeNested = (ch == \"(\");\n  }\n\n  return \"comment\";\n}\n\n// tokenizer for string literals\n// optionally pass a tokenizer function to set state.tokenize back to when finished\nfunction tokenString(quote, f) {\n  return function(stream, state) {\n    var ch;\n    while (ch = stream.next()) {\n      if (ch == quote) {\n        popStateStack(state);\n        if (f) state.tokenize = f;\n        break;\n      } else if (stream.match(\"{\", false) && isInXmlAttributeBlock(state)) {\n        // if we're in a string and in an XML block, allow an embedded code block in an attribute\n        pushStateStack(state, { type: \"codeblock\"});\n        state.tokenize = tokenBase;\n        return \"string\";\n      }\n    }\n\n    return \"string\";\n  };\n}\n\nfunction startString(stream, state, quote, f) {\n  let tokenize = tokenString(quote, f);\n  pushStateStack(state, { type: \"string\", name: quote, tokenize });\n  return chain(stream, state, tokenize);\n}\n\n// tokenizer for variables\nfunction tokenVariable(stream, state) {\n  var isVariableChar = /[\\w\\$_-]/;\n\n  // a variable may start with a quoted EQName so if the next character is quote, consume to the next quote\n  if(stream.eat(\"\\\"\")) {\n    while(stream.next() !== '\\\"'){};\n    stream.eat(\":\");\n  } else {\n    stream.eatWhile(isVariableChar);\n    if(!stream.match(\":=\", false)) stream.eat(\":\");\n  }\n  stream.eatWhile(isVariableChar);\n  state.tokenize = tokenBase;\n  return \"variable\";\n}\n\n// tokenizer for XML tags\nfunction tokenTag(name, isclose) {\n  return function(stream, state) {\n    stream.eatSpace();\n    if(isclose && stream.eat(\">\")) {\n      popStateStack(state);\n      state.tokenize = tokenBase;\n      return \"tag\";\n    }\n    // self closing tag without attributes?\n    if(!stream.eat(\"/\"))\n      pushStateStack(state, { type: \"tag\", name: name, tokenize: tokenBase});\n    if(!stream.eat(\">\")) {\n      state.tokenize = tokenAttribute;\n      return \"tag\";\n    }\n    else {\n      state.tokenize = tokenBase;\n    }\n    return \"tag\";\n  };\n}\n\n// tokenizer for XML attributes\nfunction tokenAttribute(stream, state) {\n  var ch = stream.next();\n\n  if(ch == \"/\" && stream.eat(\">\")) {\n    if(isInXmlAttributeBlock(state)) popStateStack(state);\n    if(isInXmlBlock(state)) popStateStack(state);\n    return \"tag\";\n  }\n  if(ch == \">\") {\n    if(isInXmlAttributeBlock(state)) popStateStack(state);\n    return \"tag\";\n  }\n  if(ch == \"=\")\n    return null;\n  // quoted string\n  if (ch == '\"' || ch == \"'\")\n    return startString(stream, state, ch, tokenAttribute);\n\n  if(!isInXmlAttributeBlock(state))\n    pushStateStack(state, { type: \"attribute\", tokenize: tokenAttribute});\n\n  stream.eat(/[a-zA-Z_:]/);\n  stream.eatWhile(/[-a-zA-Z0-9_:.]/);\n  stream.eatSpace();\n\n  // the case where the attribute has not value and the tag was closed\n  if(stream.match(\">\", false) || stream.match(\"/\", false)) {\n    popStateStack(state);\n    state.tokenize = tokenBase;\n  }\n\n  return \"attribute\";\n}\n\n// handle comments, including nested\nfunction tokenXMLComment(stream, state) {\n  var ch;\n  while (ch = stream.next()) {\n    if (ch == \"-\" && stream.match(\"->\", true)) {\n      state.tokenize = tokenBase;\n      return \"comment\";\n    }\n  }\n}\n\n\n// handle CDATA\nfunction tokenCDATA(stream, state) {\n  var ch;\n  while (ch = stream.next()) {\n    if (ch == \"]\" && stream.match(\"]\", true)) {\n      state.tokenize = tokenBase;\n      return \"comment\";\n    }\n  }\n}\n\n// handle preprocessing instructions\nfunction tokenPreProcessing(stream, state) {\n  var ch;\n  while (ch = stream.next()) {\n    if (ch == \"?\" && stream.match(\">\", true)) {\n      state.tokenize = tokenBase;\n      return \"processingInstruction\";\n    }\n  }\n}\n\n\n// functions to test the current context of the state\nfunction isInXmlBlock(state) { return isIn(state, \"tag\"); }\nfunction isInXmlAttributeBlock(state) { return isIn(state, \"attribute\"); }\nfunction isInXmlConstructor(state) { return isIn(state, \"xmlconstructor\"); }\nfunction isInString(state) { return isIn(state, \"string\"); }\n\nfunction isEQNameAhead(stream) {\n  // assume we've already eaten a quote (\")\n  if(stream.current() === '\"')\n    return stream.match(/^[^\\\"]+\\\"\\:/, false);\n  else if(stream.current() === '\\'')\n    return stream.match(/^[^\\\"]+\\'\\:/, false);\n  else\n    return false;\n}\n\nfunction isIn(state, type) {\n  return (state.stack.length && state.stack[state.stack.length - 1].type == type);\n}\n\nfunction pushStateStack(state, newState) {\n  state.stack.push(newState);\n}\n\nfunction popStateStack(state) {\n  state.stack.pop();\n  var reinstateTokenize = state.stack.length && state.stack[state.stack.length-1].tokenize;\n  state.tokenize = reinstateTokenize || tokenBase;\n}\n\n// the interface for the mode API\nexport const xQuery = {\n  name: \"xquery\",\n  startState: function() {\n    return {\n      tokenize: tokenBase,\n      cc: [],\n      stack: []\n    };\n  },\n\n  token: function(stream, state) {\n    if (stream.eatSpace()) return null;\n    var style = state.tokenize(stream, state);\n    return style;\n  },\n\n  languageData: {\n    commentTokens: {block: {open: \"(:\", close: \":)\"}}\n  }\n};\n"],"names":[],"mappings":"8DAGA,IAAI,EAAW,WAEb,SAAS,EAAG,CAAI,EAAG,MAAO,CAAC,KAAM,EAAM,MAAO,SAAS,CAAE,CAiCzD,IAAI,IAhCA,EAAW,EAAG,YAChB,EAAO,CAAC,KAAM,OAAQ,MAAO,MAAM,EAEnC,CADA,CACY,CAAC,KAAM,iBAAkB,MAAO,WAAW,EAGrD,EAAQ,CACV,IALc,CAAC,AAKV,KALgB,cAAe,MAAO,IAAI,CAMjD,EAII,EAAQ,CAAC,QAAS,MAAO,WAAY,WAAY,mBAAoB,MAAO,QAAS,KAC5E,YAAa,KAAM,YAAa,WAAY,SAAU,iBAAkB,KAAM,OAAQ,OACtF,WAAY,QAAS,QAAS,YAAa,UAAW,eAAgB,WAAY,UAClF,UAAW,OAAQ,kBAAmB,QAAS,iBAAkB,UAAW,UAAW,SACvF,aAAc,qBAAsB,aAAc,aAAc,YAAa,WAC7E,WAAY,gBAAiB,UAAW,OAAQ,QAAS,iBAAkB,WAAY,MACvF,SAAU,QAAS,UAAW,SAAU,WAAY,QAAS,YAAa,oBAC1E,MAAO,OAAQ,QAAS,QAAS,YAAa,OAAQ,WAAY,QAAS,WAAY,QACvF,KAAM,SAAU,KAAM,UAAW,cAAe,SAAU,WAAY,YAAa,OACnF,SAAU,KAAM,OAAQ,WAAY,OAAQ,MAAO,QAAS,MAAO,SAAU,YAAa,MAC1F,SAAU,SAAU,OAAQ,YAAa,OAAQ,KAAM,OAAQ,QAAS,aACxE,cAAe,MAAO,SAAU,KAAM,OAAQ,SAAU,QAAS,UAAW,WAC5E,YAAa,aAAc,SAAU,SAAU,YAAa,oBAAqB,WACjF,WAAY,yBAA0B,eAAgB,SAAU,UAAW,SAC3E,eAAgB,OAAQ,YAAa,SAAU,mBAAoB,iBAAkB,QACrF,OAAQ,YAAa,WAAY,YAAa,WAAY,OAAQ,UAAW,OAAQ,SACrF,QAAS,WAAY,OAAQ,SAAU,QAAS,SAAU,OAAQ,OAAQ,YAAa,QACvF,KAAM,YAAa,QAAS,MAAO,WAAY,OAAQ,aAAc,QAAS,YAC9E,SAAU,WAAY,YAAa,QAAS,WAAY,QAAS,WAAY,UAC7E,SAAU,OAAQ,QAAS,YAAa,SAAU,OAAQ,UAAW,OAAQ,QAAS,SAAS,CACpG,EAAE,EAAG,EAAE,EAAM,MAAM,CAAE,EAAI,EAAG,IAAK,AAAE,CAAK,CAAC,CAAK,CAAC,EAAE,CAAC,CAAG,EAAG,CAAK,CAAC,EAAE,EAcxE,IAAI,IAVA,EAAQ,CAAC,mBAAoB,mBAAoB,aAAc,YACtD,kBAAmB,aAAc,UAAW,UAAW,cAAe,mBACtE,qBAAsB,aAAc,YAAa,cAAe,cAAe,YAC/E,WAAY,UAAW,YAAa,eAAgB,WAAY,gBAAiB,eACjF,QAAS,WAAY,YAAa,SAAU,aAAc,UAAW,UAAW,cAChF,UAAW,UAAW,YAAa,qBAAsB,aAAc,cACvE,wBAAyB,wBAAyB,sBAAuB,cACzE,aAAc,qBAAsB,sBAAuB,WAAY,WAAY,YACnF,UAAW,WAAY,kBAAmB,iBAAkB,kBAC5D,mBAAoB,aAAc,mBAAoB,uBAAuB,CAClF,EAAE,EAAG,EAAE,EAAM,MAAM,CAAE,EAAI,EAAG,IAAK,AAAE,CAAK,CAAC,CAAK,CAAC,EAAE,CAAC,CAAG,EAI7D,IAAI,IADA,EAAY,CAAC,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,KAAM,IAAK,IAAK,KAAM,IAAK,KAAM,IAAK,IAAK,IAAK,MAAO,KAAM,MAAO,OAAQ,MAAO,IAAK,IAAK,IAAK,IAAI,CACnJ,EAAE,EAAG,EAAE,EAAU,MAAM,CAAE,EAAI,EAAG,IAAK,AAAE,CAAK,CAAC,CAAS,CAAC,EAAE,CAAC,CAAG,EAKrE,IAAI,IAFA,EAAkB,CAAC,SAAU,cAAe,UAAW,eAAgB,uBAAwB,WAC5E,aAAc,qBAAsB,cAAe,cAAe,sBAAuB,sBAAsB,CAC9H,EAAE,EAAG,EAAE,EAAgB,MAAM,CAAE,EAAI,EAAG,IAAK,AAAE,CAAK,CAAC,CAAe,CAAC,EAAE,CAAC,CAAG,EAEjF,OAAO,CACT,IAEA,SAAS,EAAM,CAAM,CAAE,CAAK,CAAE,CAAC,EAE7B,OADA,EAAM,QAAQ,CAAG,EACV,EAAE,EAAQ,EACnB,CAGA,SAAS,EAAU,CAAM,CAAE,CAAK,EAC9B,IAAI,EAAK,EAAO,IAAI,GAChB,GAAkB,EAClB,EAySJ,AAAwB,KACtB,CADC,GAzSY,AAAc,GAySnB,OAAO,GACR,EAAO,KAAK,CAAC,eAAe,GACR,MAArB,AACN,EADa,OAAO,IACb,EAAO,KAAK,CAAC,eAAe,GAzSrC,GAAU,KAAN,EAAW,CACb,GAAG,EAAO,KAAK,CAAC,OAAO,GACrB,OAAO,EAAM,EAAQ,EAAO,GAE9B,GAAG,EAAO,KAAK,CAAC,WAAW,GAEzB,KAFiC,EACjC,EAAM,QAAQ,CAAG,EACV,MAGT,GAAG,EAAO,KAAK,CAAC,KAAK,GACnB,KAD2B,EACpB,EAAM,EAAQ,EAAO,GAG9B,IAuRmB,IAlGC,EAkGK,AAvRrB,EAAU,EAAO,CAqLM,EArLH,CAAC,KACzB,EAAO,QAAQ,GAEf,IADA,IAAkB,EAAd,EAAU,GACN,EAAI,EAAO,GAAG,CAAC,0BAA2B,GAAW,EAE7D,OAAO,EAAM,EAAQ,GAgLP,EAhLuB,EAgLnB,AAhLU,EAAkB,EAiLzC,SAAS,CAAM,CAAE,CAAK,SAC3B,EAAO,QAAQ,GACZ,GAAW,EAAO,GAAG,CAAC,MAAM,CAC7B,EAAc,GACd,EAAM,QAAQ,CAAG,IAIhB,AAAC,EAAO,GAAG,CAAC,MACb,EAAe,EAAO,CAAE,KAAM,MAAO,KAAM,EAAM,SAAU,CAAS,GAClE,EAAO,GAAG,CAAC,KAKb,CALmB,CAKb,QAAQ,CAAG,EAJjB,EAAM,QAAQ,CAAG,GAMZ,KACT,GAlMA,CAEK,GAAS,KAAK,AAAX,EAEN,OADA,EAAe,EAAO,CAAE,KAAM,WAAW,GAClC,KAGJ,GAAG,AAAM,KAAK,EAEjB,OADA,EAAc,GACP,KAGJ,IAAG,CAAa,QAAQ,CAC3B,GAAS,KAAN,EACD,MAAO,WACJ,GAAS,KAAN,GAAa,EAAO,GAAG,CAAC,KAE9B,CAFoC,MACpC,EAAc,GACP,WAGP,MAAO,eA2CN,CAxCA,GAAI,KAAK,IAAI,CAAC,GAEjB,EAFsB,KACtB,EAAO,KAAK,CAAC,iCACN,OAGJ,GAAW,MAAP,GAAc,EAAO,GAAG,CAAC,KAEhC,CAFsC,MACtC,EAAe,EAAO,CAAE,KAAM,SAAS,GAChC,EAAM,EAAQ,EAAO,GAGzB,GAAI,CAAC,IAAoB,MAAP,EAAD,CAAsB,MAAP,CAAO,CAAG,CAC7C,OAAO,EAAY,EAAQ,EAAO,GAE/B,GAAU,KAAK,CAAZ,EACN,OAAO,EAAM,EAAQ,EAAO,GAGzB,GAAS,MAAN,GAAa,EAAO,GAAG,CAAC,KAC9B,CADoC,KAC7B,UAGJ,GAAU,KAAK,CAAZ,EAEN,OADA,EAAe,EAAO,CAAE,KAAM,OAAO,GAC9B,KAGJ,GAAU,KAAK,CAAZ,EAEN,OADA,EAAc,GACP,KAGJ,GAAU,KAAK,CAAZ,EAEN,OADA,EAAe,EAAO,CAAE,KAAM,SAAS,GAChC,KAGJ,GAAU,KAAK,CAAZ,EAEN,OADA,EAAc,GACP,KAGP,IAAI,EAAQ,EAAS,oBAAoB,CAAC,IAAO,CAAQ,CAAC,EAAG,CAG7D,GAAG,GAAmB,MAAP,EAAa,KAAwB,IAAI,CAAC,CAAvB,EAAO,IAAI,KAC7C,GAAG,GAAmB,MAAP,EAAa,KAAwB,KAAK,CAAvB,AAAwB,EAAjB,IAAI,KAG1C,AAAC,GAAO,EAAO,QAAQ,CAAC,YAG3B,IAAI,EAAa,EAAO,GAAG,CAAC,IAIzB,EAAC,EAAO,GAAG,CAAC,MAAQ,GACrB,EAAO,OAD0B,CAClB,CAAC,YAGf,EAAO,KAAK,CAAC,YAAa,MAC3B,EADmC,CACjB,CAAA,EAGpB,IAAI,EAAO,EAAO,OAAO,SAQzB,CAPA,EAAQ,CAOL,CAPc,oBAAoB,CAAC,IAAS,CAAQ,CAAC,EAAK,CAI1D,GAAmB,CAAC,IAAO,EAAQ,CAAC,KAAM,gBAAiB,MAAO,MAAK,EAmLlC,EAhLlB,EAgL8B,CAAP,KAhLf,cAC5B,EAAc,GACP,cAIE,WAAR,GAA6B,aAAR,GAAqC,kBAAd,EAAM,IAAI,AAAI,GAAkB,EAAe,EAAO,CAAC,KAAM,gBAAgB,GAGrH,EAAQ,EAAM,KAAK,CAAG,WAC/B,CACF,CAGA,SAAS,EAAa,CAAM,CAAE,CAAK,EAEjC,IADA,IAA4D,EAAxD,GAAW,EAAO,GAAc,EAAO,EAAc,EAClD,EAAK,EAAO,IAAI,IAAI,CACzB,GAAU,KAAN,GAAa,EACf,GAAG,EAAc,EACf,CAFuB,OAGpB,CACH,EAAc,GACd,KACF,KAEY,KAAN,GAAa,GACnB,IAEF,EAAkB,IAHgB,CAGtB,EACZ,EAAqB,KAAN,CACjB,CAEA,MAAO,SACT,CAwBA,SAAS,EAAY,CAAM,CAAE,CAAK,CAAE,CAAK,CAAE,CAAC,EAC1C,IAAI,EApBG,SAoBQ,AApBC,CAAM,CAAE,CAAK,EAE3B,IADA,IAAI,EACG,EAAK,EAAO,IAAI,GAAI,CACzB,GAAI,GAiBmB,EAjBN,CAAP,AACR,EAAc,GACV,IAAG,EAAM,QAAQ,CAeO,CAfJ,EACxB,KACF,MAAO,GAAI,EAAO,KAAK,CAAC,KAAK,IAAU,EAAsB,GAAQ,CAEnE,EAAe,EAAO,CAAE,KAAM,WAAW,GACzC,EAAM,QAAQ,CAAG,EACjB,KACF,CAGF,CAJW,KAIJ,QACT,EAMA,OADA,EAAe,EAAO,CAAE,KAAM,SAAU,KAAM,WAAO,CAAS,GACvD,EAAM,EAAQ,EAAO,EAC9B,CAGA,SAAS,EAAc,CAAM,CAAE,CAAK,EAClC,IAAI,EAAiB,WAGrB,GAAG,EAAO,GAAG,CAAC,KAAO,CACnB,KAAwB,KAAK,CAAvB,AAAwB,EAAjB,IAAI,KACjB,EAAO,GAAG,CAAC,IACb,MACE,CADK,CACE,QAAQ,CAAC,GACb,AAAC,EAAO,KAAK,CAAC,MAAM,IAAQ,EAAO,GAAG,CAAC,KAI5C,OAFA,EAAO,QAAQ,CAAC,GAChB,EAAM,QAAQ,CAAG,EACV,UACT,CA0BA,SAAS,EAAe,CAAM,CAAE,CAAK,EACnC,IAAI,EAAK,EAAO,IAAI,SAEpB,AAAS,KAAN,GAAa,EAAO,GAAG,CAAC,MAAM,AAC5B,EAAsB,IAAQ,EAAc,GAkEb,AAjE/B,EAAa,EAiE8B,CAAP,OAjEf,EAAc,GAC/B,OAEN,AAAM,KAAK,GACT,EAAsB,IAAQ,EAAc,GACxC,OAEA,KACP,AADC,EACM,KAEC,KAAN,GAAmB,KAAN,AACf,EAAO,EAAY,EAAQ,EAAO,EAAI,IAErC,AAAC,EAAsB,IACxB,EAAe,EAAO,CAAE,KAAM,YAAa,SAAU,CAAc,GAErE,EAAO,GAAG,CAAC,cACX,EAAO,QAAQ,CAAC,mBAChB,EAAO,QAAQ,IAGZ,EAAO,KAAK,CAAC,KAAK,IAAU,EAAO,KAAK,CAAC,IAAK,GAAA,GAAQ,CACvD,EAAc,GACd,EAAM,QAAQ,CAAG,GAGZ,YACT,CAGA,SAAS,EAAgB,CAAM,CAAE,CAAK,EAEpC,IADA,IAAI,EACG,EAAK,EAAO,IAAI,GAAI,CACzB,GAAU,KAAN,GAAa,EAAO,KAAK,CAAC,MAAM,GAElC,IAFyC,GACzC,EAAM,QAAQ,CAAG,EACV,SAGb,CAIA,SAAS,EAAW,CAAM,CAAE,CAAK,EAE/B,IADA,IAAI,EACG,EAAK,EAAO,IAAI,GAAI,CACzB,GAAU,KAAN,GAAa,EAAO,KAAK,CAAC,KAAK,GAEjC,IAFwC,GACxC,EAAM,QAAQ,CAAG,EACV,SAGb,CAGA,SAAS,EAAmB,CAAM,CAAE,CAAK,EAEvC,IADA,IAAI,EACG,EAAK,EAAO,IAAI,GAAI,CACzB,GAAU,KAAN,GAAa,EAAO,KAAK,CAAC,KAAK,GAEjC,IAFwC,GACxC,EAAM,QAAQ,CAAG,EACV,uBAGb,CAKA,SAAS,EAAsB,CAAK,EAAI,OAAO,EAAK,EAAO,YAAc,CAczE,SAAS,EAAK,CAAK,CAAE,CAAI,EACvB,OAAQ,EAAM,KAAK,CAAC,MAAM,EAAI,EAAM,KAAK,CAAC,EAAM,KAAK,CAAC,MAAM,CAAG,EAAE,CAAC,IAAI,EAAI,CAC5E,CAEA,SAAS,EAAe,CAAK,CAAE,CAAQ,EACrC,EAAM,KAAK,CAAC,IAAI,CAAC,EACnB,CAEA,SAAS,EAAc,CAAK,EAC1B,EAAM,KAAK,CAAC,GAAG,GACf,IAAI,EAAoB,EAAM,KAAK,CAAC,MAAM,EAAI,EAAM,KAAK,CAAC,EAAM,KAAK,CAAC,MAAM,CAAC,EAAE,CAAC,QAAQ,CACxF,EAAM,QAAQ,CAAG,GAAqB,CACxC,CAGO,IAAM,EAAS,CACpB,KAAM,SACN,WAAY,WACV,MAAO,CACL,SAAU,EACV,GAAI,EAAE,CACN,MAAO,EAAE,AACX,CACF,EAEA,MAAO,SAAS,CAAM,CAAE,CAAK,SAC3B,AAAI,EAAO,QAAQ,GAAW,CAAP,IACX,EAAM,QAAQ,CAAC,EAAQ,EAErC,EAEA,aAAc,CACZ,cAAe,CAAC,MAAO,CAAC,KAAM,KAAM,MAAO,IAAI,CAAC,CAClD,CACF","ignoreList":[0]}