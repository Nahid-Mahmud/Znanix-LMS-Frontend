{"version":3,"sources":["turbopack:///[project]/node_modules/.pnpm/@codemirror+legacy-modes@6.5.1/node_modules/@codemirror/legacy-modes/mode/sparql.js"],"sourcesContent":["var curPunc;\n\nfunction wordRegexp(words) {\n  return new RegExp(\"^(?:\" + words.join(\"|\") + \")$\", \"i\");\n}\nvar ops = wordRegexp([\"str\", \"lang\", \"langmatches\", \"datatype\", \"bound\", \"sameterm\", \"isiri\", \"isuri\",\n                      \"iri\", \"uri\", \"bnode\", \"count\", \"sum\", \"min\", \"max\", \"avg\", \"sample\",\n                      \"group_concat\", \"rand\", \"abs\", \"ceil\", \"floor\", \"round\", \"concat\", \"substr\", \"strlen\",\n                      \"replace\", \"ucase\", \"lcase\", \"encode_for_uri\", \"contains\", \"strstarts\", \"strends\",\n                      \"strbefore\", \"strafter\", \"year\", \"month\", \"day\", \"hours\", \"minutes\", \"seconds\",\n                      \"timezone\", \"tz\", \"now\", \"uuid\", \"struuid\", \"md5\", \"sha1\", \"sha256\", \"sha384\",\n                      \"sha512\", \"coalesce\", \"if\", \"strlang\", \"strdt\", \"isnumeric\", \"regex\", \"exists\",\n                      \"isblank\", \"isliteral\", \"a\", \"bind\"]);\nvar keywords = wordRegexp([\"base\", \"prefix\", \"select\", \"distinct\", \"reduced\", \"construct\", \"describe\",\n                           \"ask\", \"from\", \"named\", \"where\", \"order\", \"limit\", \"offset\", \"filter\", \"optional\",\n                           \"graph\", \"by\", \"asc\", \"desc\", \"as\", \"having\", \"undef\", \"values\", \"group\",\n                           \"minus\", \"in\", \"not\", \"service\", \"silent\", \"using\", \"insert\", \"delete\", \"union\",\n                           \"true\", \"false\", \"with\",\n                           \"data\", \"copy\", \"to\", \"move\", \"add\", \"create\", \"drop\", \"clear\", \"load\", \"into\"]);\nvar operatorChars = /[*+\\-<>=&|\\^\\/!\\?]/;\nvar PN_CHARS = \"[A-Za-z_\\\\-0-9]\";\nvar PREFIX_START = new RegExp(\"[A-Za-z]\");\nvar PREFIX_REMAINDER = new RegExp(\"((\" + PN_CHARS + \"|\\\\.)*(\" + PN_CHARS + \"))?:\");\n\nfunction tokenBase(stream, state) {\n  var ch = stream.next();\n  curPunc = null;\n  if (ch == \"$\" || ch == \"?\") {\n    if(ch == \"?\" && stream.match(/\\s/, false)){\n      return \"operator\";\n    }\n    stream.match(/^[A-Za-z0-9_\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][A-Za-z0-9_\\u00B7\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u203F-\\u2040\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD]*/);\n    return \"variableName.local\";\n  }\n  else if (ch == \"<\" && !stream.match(/^[\\s\\u00a0=]/, false)) {\n    stream.match(/^[^\\s\\u00a0>]*>?/);\n    return \"atom\";\n  }\n  else if (ch == \"\\\"\" || ch == \"'\") {\n    state.tokenize = tokenLiteral(ch);\n    return state.tokenize(stream, state);\n  }\n  else if (/[{}\\(\\),\\.;\\[\\]]/.test(ch)) {\n    curPunc = ch;\n    return \"bracket\";\n  }\n  else if (ch == \"#\") {\n    stream.skipToEnd();\n    return \"comment\";\n  }\n  else if (operatorChars.test(ch)) {\n    return \"operator\";\n  }\n  else if (ch == \":\") {\n    eatPnLocal(stream);\n    return \"atom\";\n  }\n  else if (ch == \"@\") {\n    stream.eatWhile(/[a-z\\d\\-]/i);\n    return \"meta\";\n  }\n  else if (PREFIX_START.test(ch) && stream.match(PREFIX_REMAINDER)) {\n    eatPnLocal(stream);\n    return \"atom\";\n  }\n  stream.eatWhile(/[_\\w\\d]/);\n  var word = stream.current();\n  if (ops.test(word))\n    return \"builtin\";\n  else if (keywords.test(word))\n    return \"keyword\";\n  else\n    return \"variable\";\n}\n\nfunction eatPnLocal(stream) {\n  stream.match(/(\\.(?=[\\w_\\-\\\\%])|[:\\w_-]|\\\\[-\\\\_~.!$&'()*+,;=/?#@%]|%[a-f\\d][a-f\\d])+/i);\n}\n\nfunction tokenLiteral(quote) {\n  return function(stream, state) {\n    var escaped = false, ch;\n    while ((ch = stream.next()) != null) {\n      if (ch == quote && !escaped) {\n        state.tokenize = tokenBase;\n        break;\n      }\n      escaped = !escaped && ch == \"\\\\\";\n    }\n    return \"string\";\n  };\n}\n\nfunction pushContext(state, type, col) {\n  state.context = {prev: state.context, indent: state.indent, col: col, type: type};\n}\nfunction popContext(state) {\n  state.indent = state.context.indent;\n  state.context = state.context.prev;\n}\n\nexport const sparql = {\n  name: \"sparql\",\n\n  startState: function() {\n    return {tokenize: tokenBase,\n            context: null,\n            indent: 0,\n            col: 0};\n  },\n\n  token: function(stream, state) {\n    if (stream.sol()) {\n      if (state.context && state.context.align == null) state.context.align = false;\n      state.indent = stream.indentation();\n    }\n    if (stream.eatSpace()) return null;\n    var style = state.tokenize(stream, state);\n\n    if (style != \"comment\" && state.context && state.context.align == null && state.context.type != \"pattern\") {\n      state.context.align = true;\n    }\n\n    if (curPunc == \"(\") pushContext(state, \")\", stream.column());\n    else if (curPunc == \"[\") pushContext(state, \"]\", stream.column());\n    else if (curPunc == \"{\") pushContext(state, \"}\", stream.column());\n    else if (/[\\]\\}\\)]/.test(curPunc)) {\n      while (state.context && state.context.type == \"pattern\") popContext(state);\n      if (state.context && curPunc == state.context.type) {\n        popContext(state);\n        if (curPunc == \"}\" && state.context && state.context.type == \"pattern\")\n          popContext(state);\n      }\n    }\n    else if (curPunc == \".\" && state.context && state.context.type == \"pattern\") popContext(state);\n    else if (/atom|string|variable/.test(style) && state.context) {\n      if (/[\\}\\]]/.test(state.context.type))\n        pushContext(state, \"pattern\", stream.column());\n      else if (state.context.type == \"pattern\" && !state.context.align) {\n        state.context.align = true;\n        state.context.col = stream.column();\n      }\n    }\n\n    return style;\n  },\n\n  indent: function(state, textAfter, cx) {\n    var firstChar = textAfter && textAfter.charAt(0);\n    var context = state.context;\n    if (/[\\]\\}]/.test(firstChar))\n      while (context && context.type == \"pattern\") context = context.prev;\n\n    var closing = context && firstChar == context.type;\n    if (!context)\n      return 0;\n    else if (context.type == \"pattern\")\n      return context.col;\n    else if (context.align)\n      return context.col + (closing ? 0 : 1);\n    else\n      return context.indent + (closing ? 0 : cx.unit);\n  },\n\n  languageData: {\n    commentTokens: {line: \"#\"}\n  }\n};\n\n"],"names":[],"mappings":"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","ignoreList":[0]}