{"version":3,"sources":["turbopack:///[project]/node_modules/.pnpm/@codemirror+legacy-modes@6.5.1/node_modules/@codemirror/legacy-modes/mode/haskell.js"],"sourcesContent":["function switchState(source, setState, f) {\n  setState(f);\n  return f(source, setState);\n}\n\n// These should all be Unicode extended, as per the Haskell 2010 report\nvar smallRE = /[a-z_]/;\nvar largeRE = /[A-Z]/;\nvar digitRE = /\\d/;\nvar hexitRE = /[0-9A-Fa-f]/;\nvar octitRE = /[0-7]/;\nvar idRE = /[a-z_A-Z0-9'\\xa1-\\uffff]/;\nvar symbolRE = /[-!#$%&*+.\\/<=>?@\\\\^|~:]/;\nvar specialRE = /[(),;[\\]`{}]/;\nvar whiteCharRE = /[ \\t\\v\\f]/; // newlines are handled in tokenizer\n\nfunction normal(source, setState) {\n  if (source.eatWhile(whiteCharRE)) {\n    return null;\n  }\n\n  var ch = source.next();\n  if (specialRE.test(ch)) {\n    if (ch == '{' && source.eat('-')) {\n      var t = \"comment\";\n      if (source.eat('#')) {\n        t = \"meta\";\n      }\n      return switchState(source, setState, ncomment(t, 1));\n    }\n    return null;\n  }\n\n  if (ch == '\\'') {\n    if (source.eat('\\\\')) {\n      source.next();  // should handle other escapes here\n    }\n    else {\n      source.next();\n    }\n    if (source.eat('\\'')) {\n      return \"string\";\n    }\n    return \"error\";\n  }\n\n  if (ch == '\"') {\n    return switchState(source, setState, stringLiteral);\n  }\n\n  if (largeRE.test(ch)) {\n    source.eatWhile(idRE);\n    if (source.eat('.')) {\n      return \"qualifier\";\n    }\n    return \"type\";\n  }\n\n  if (smallRE.test(ch)) {\n    source.eatWhile(idRE);\n    return \"variable\";\n  }\n\n  if (digitRE.test(ch)) {\n    if (ch == '0') {\n      if (source.eat(/[xX]/)) {\n        source.eatWhile(hexitRE); // should require at least 1\n        return \"integer\";\n      }\n      if (source.eat(/[oO]/)) {\n        source.eatWhile(octitRE); // should require at least 1\n        return \"number\";\n      }\n    }\n    source.eatWhile(digitRE);\n    var t = \"number\";\n    if (source.match(/^\\.\\d+/)) {\n      t = \"number\";\n    }\n    if (source.eat(/[eE]/)) {\n      t = \"number\";\n      source.eat(/[-+]/);\n      source.eatWhile(digitRE); // should require at least 1\n    }\n    return t;\n  }\n\n  if (ch == \".\" && source.eat(\".\"))\n    return \"keyword\";\n\n  if (symbolRE.test(ch)) {\n    if (ch == '-' && source.eat(/-/)) {\n      source.eatWhile(/-/);\n      if (!source.eat(symbolRE)) {\n        source.skipToEnd();\n        return \"comment\";\n      }\n    }\n    source.eatWhile(symbolRE);\n    return \"variable\"\n  }\n\n  return \"error\";\n}\n\nfunction ncomment(type, nest) {\n  if (nest == 0) {\n    return normal;\n  }\n  return function(source, setState) {\n    var currNest = nest;\n    while (!source.eol()) {\n      var ch = source.next();\n      if (ch == '{' && source.eat('-')) {\n        ++currNest;\n      }\n      else if (ch == '-' && source.eat('}')) {\n        --currNest;\n        if (currNest == 0) {\n          setState(normal);\n          return type;\n        }\n      }\n    }\n    setState(ncomment(type, currNest));\n    return type;\n  };\n}\n\nfunction stringLiteral(source, setState) {\n  while (!source.eol()) {\n    var ch = source.next();\n    if (ch == '\"') {\n      setState(normal);\n      return \"string\";\n    }\n    if (ch == '\\\\') {\n      if (source.eol() || source.eat(whiteCharRE)) {\n        setState(stringGap);\n        return \"string\";\n      }\n      if (source.eat('&')) {\n      }\n      else {\n        source.next(); // should handle other escapes here\n      }\n    }\n  }\n  setState(normal);\n  return \"error\";\n}\n\nfunction stringGap(source, setState) {\n  if (source.eat('\\\\')) {\n    return switchState(source, setState, stringLiteral);\n  }\n  source.next();\n  setState(normal);\n  return \"error\";\n}\n\n\nvar wellKnownWords = (function() {\n  var wkw = {};\n  function setType(t) {\n    return function () {\n      for (var i = 0; i < arguments.length; i++)\n        wkw[arguments[i]] = t;\n    };\n  }\n\n  setType(\"keyword\")(\n    \"case\", \"class\", \"data\", \"default\", \"deriving\", \"do\", \"else\", \"foreign\",\n    \"if\", \"import\", \"in\", \"infix\", \"infixl\", \"infixr\", \"instance\", \"let\",\n    \"module\", \"newtype\", \"of\", \"then\", \"type\", \"where\", \"_\");\n\n  setType(\"keyword\")(\n    \"\\.\\.\", \":\", \"::\", \"=\", \"\\\\\", \"<-\", \"->\", \"@\", \"~\", \"=>\");\n\n  setType(\"builtin\")(\n    \"!!\", \"$!\", \"$\", \"&&\", \"+\", \"++\", \"-\", \".\", \"/\", \"/=\", \"<\", \"<*\", \"<=\",\n    \"<$>\", \"<*>\", \"=<<\", \"==\", \">\", \">=\", \">>\", \">>=\", \"^\", \"^^\", \"||\", \"*\",\n    \"*>\", \"**\");\n\n  setType(\"builtin\")(\n    \"Applicative\", \"Bool\", \"Bounded\", \"Char\", \"Double\", \"EQ\", \"Either\", \"Enum\",\n    \"Eq\", \"False\", \"FilePath\", \"Float\", \"Floating\", \"Fractional\", \"Functor\",\n    \"GT\", \"IO\", \"IOError\", \"Int\", \"Integer\", \"Integral\", \"Just\", \"LT\", \"Left\",\n    \"Maybe\", \"Monad\", \"Nothing\", \"Num\", \"Ord\", \"Ordering\", \"Rational\", \"Read\",\n    \"ReadS\", \"Real\", \"RealFloat\", \"RealFrac\", \"Right\", \"Show\", \"ShowS\",\n    \"String\", \"True\");\n\n  setType(\"builtin\")(\n    \"abs\", \"acos\", \"acosh\", \"all\", \"and\", \"any\", \"appendFile\", \"asTypeOf\",\n    \"asin\", \"asinh\", \"atan\", \"atan2\", \"atanh\", \"break\", \"catch\", \"ceiling\",\n    \"compare\", \"concat\", \"concatMap\", \"const\", \"cos\", \"cosh\", \"curry\",\n    \"cycle\", \"decodeFloat\", \"div\", \"divMod\", \"drop\", \"dropWhile\", \"either\",\n    \"elem\", \"encodeFloat\", \"enumFrom\", \"enumFromThen\", \"enumFromThenTo\",\n    \"enumFromTo\", \"error\", \"even\", \"exp\", \"exponent\", \"fail\", \"filter\",\n    \"flip\", \"floatDigits\", \"floatRadix\", \"floatRange\", \"floor\", \"fmap\",\n    \"foldl\", \"foldl1\", \"foldr\", \"foldr1\", \"fromEnum\", \"fromInteger\",\n    \"fromIntegral\", \"fromRational\", \"fst\", \"gcd\", \"getChar\", \"getContents\",\n    \"getLine\", \"head\", \"id\", \"init\", \"interact\", \"ioError\", \"isDenormalized\",\n    \"isIEEE\", \"isInfinite\", \"isNaN\", \"isNegativeZero\", \"iterate\", \"last\",\n    \"lcm\", \"length\", \"lex\", \"lines\", \"log\", \"logBase\", \"lookup\", \"map\",\n    \"mapM\", \"mapM_\", \"max\", \"maxBound\", \"maximum\", \"maybe\", \"min\", \"minBound\",\n    \"minimum\", \"mod\", \"negate\", \"not\", \"notElem\", \"null\", \"odd\", \"or\",\n    \"otherwise\", \"pi\", \"pred\", \"print\", \"product\", \"properFraction\", \"pure\",\n    \"putChar\", \"putStr\", \"putStrLn\", \"quot\", \"quotRem\", \"read\", \"readFile\",\n    \"readIO\", \"readList\", \"readLn\", \"readParen\", \"reads\", \"readsPrec\",\n    \"realToFrac\", \"recip\", \"rem\", \"repeat\", \"replicate\", \"return\", \"reverse\",\n    \"round\", \"scaleFloat\", \"scanl\", \"scanl1\", \"scanr\", \"scanr1\", \"seq\",\n    \"sequence\", \"sequence_\", \"show\", \"showChar\", \"showList\", \"showParen\",\n    \"showString\", \"shows\", \"showsPrec\", \"significand\", \"signum\", \"sin\",\n    \"sinh\", \"snd\", \"span\", \"splitAt\", \"sqrt\", \"subtract\", \"succ\", \"sum\",\n    \"tail\", \"take\", \"takeWhile\", \"tan\", \"tanh\", \"toEnum\", \"toInteger\",\n    \"toRational\", \"truncate\", \"uncurry\", \"undefined\", \"unlines\", \"until\",\n    \"unwords\", \"unzip\", \"unzip3\", \"userError\", \"words\", \"writeFile\", \"zip\",\n    \"zip3\", \"zipWith\", \"zipWith3\");\n\n  return wkw;\n})();\n\nexport const haskell = {\n  name: \"haskell\",\n  startState: function ()  { return { f: normal }; },\n  copyState:  function (s) { return { f: s.f }; },\n\n  token: function(stream, state) {\n    var t = state.f(stream, function(s) { state.f = s; });\n    var w = stream.current();\n    return wellKnownWords.hasOwnProperty(w) ? wellKnownWords[w] : t;\n  },\n\n  languageData: {\n    commentTokens: {line: \"--\", block: {open: \"{-\", close: \"-}\"}}\n  }\n};\n"],"names":[],"mappings":"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","ignoreList":[0]}